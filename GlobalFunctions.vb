Imports Microsoft.VisualBasic
Imports Microsoft.CSharp
Imports System.Data
Imports System.Text
Imports System.Xml
Imports System.Reflection
Imports System.CodeDom.Compiler
Imports System.Globalization
Imports System.DirectoryServices.AccountManagement
Imports System.DirectoryServices
Imports System.Configuration.ConfigurationManager
Imports NLog
Imports System.IO
Imports Oracle.ManagedDataAccess.Client
Imports ZukamiLib
Imports System.Transactions
Imports System.Threading
Imports ClosedXML.Excel
Imports CsvHelper
Imports Newtonsoft.Json.Linq
Imports System.Data.SqlClient
Imports System.Security.Cryptography

Public Class GlobalFunctions
    Private Shared EncryptionKey As String = "DF32DFY6934DER4"
    Private Shared logger As Logger = LogManager.GetCurrentClassLogger()

    Public Enum WORKFLOWINSTANCE_STATUS
        STATUS_PENDING = 0
        STATUS_COMPLETED = 1
    End Enum

    Public Enum ChartTypes
        CHARTTYPE_EMPLOYEEEFFICIENCY
        CHARTTYPE_AVGWORKFLOWTIME
        CHARTTYPE_WORKFLOWINSTANCES
        CHARTTYPE_EMPLOYEETHROUGHPUT
        CHARTTYPE_EMPLOYEEEFFICIENCYRANGE
    End Enum

    Public Enum ScheduledActionTypes
        ACTIONTYPE_SENDEMAILWITHURL
    End Enum

    Public Enum ChartStyles
        CHART_BARCHART
        CHART_PIECHART
        CHART_3DBARCHART
        CHART_3DPIECHART
        CHART_MULTIBARCHART
        CHART_CANDLESTICK
        CHART_DOUGHNUT
        CHART_FUNNEL
        CHART_MSAREA2D
        CHART_MSBAR2D
        CHART_LINE
        CHART_COLUMN2D
        CHART_COLUMN3D
        CHART_AREA2D
        CHART_3DBARCHARTMULTI
        CHART_3DBARCHARTMULTIWITHLINE
        CHART_RADAR
        CHART_POLAR
        CHART_BULLSEYE
    End Enum

    Public Enum FIELDTYPES
        FT_AUTO = -1
        FT_SHORTTEXT = 0
        FT_LONGTEXT = 1
        FT_INT = 2
        FT_FLOAT = 3
        FT_DATETIME = 4
        FT_FILE = 5
        FT_YESNO = 6
        FT_AUTONUMBER = 7
        FT_USER = 8
        FT_DROPDOWN = 9
        FT_DATE = 10
        FT_FILESIZE = 11
        FT_VERSIONNO = 12
        FT_SUBMISSIONNO = 13
        FT_TIMEINMINUTES = 14
        FT_CURRENCY = 15
        FT_TABLE = 20
        FT_LABEL = 21
        FT_RADIO = 22
        FT_COUNTRY = 23
        FT_BUTTON = 24
        FT_CALFIELD = 25
        FT_IMAGE = 26
        FT_AUTOID = 27
        FT_HEADER = 28
        FT_FRAME = 29
        FT_TIFFVIEWER = 30
        FT_HIDDENFIELD = 31
        FT_CHECKLIST = 32
        FT_DBLABEL = 33
        FT_HTML = 34
        FT_SIGNATURE = 35
        FT_CAMERA = 36
        FT_CHECKLIST2 = 37
        FT_BARCODE = 38
        FT_GPS = 40
        FT_RATING = 50
    End Enum
    Public Enum ERRORTYPES
        ERROR_MISSINGFIELD
        ERROR_INVALIDFIELD
        ERROR_INPUTMASKFAILED
        ERROR_TOOLONG
        ERROR_OTHER
        ERROR_PROHIBITEDTAGFOUND
    End Enum

    Public Enum VIEW_TYPES
        tableviews = 0
        chartviews = 2
        calviews = 3
        reportviews = 7
    End Enum

    Public Shared WORKFLOWROOTNODE_GUID As Guid = New Guid("11111111-1111-1111-1111-111111111111")
    Public Shared JSCRIPTSEPARATOR As String = "##"
    Public Shared VCSSEPARATOR As String = "#!\"
    Public Shared GLOBSEPARATOR As String = "\,\"
    Public Shared GLOBSTGSSEPARATOR As String = "\\!*\\"
    Public Shared GLOBSEPARATOR2 As String = "\{\"
    Public Shared GLOBSEPARATOR3 As String = "\*\"
    Public Shared GLOBSEPARATOR_AGGREGATEROWS As String = "\#\"
    Public Shared GLOBSEPARATOR_AGGREGATECOLS As String = "\&\"
    Public Shared GLOBSEPARATOR_AGGREGATEFIELDS As String = "\%\"
    Public Shared GLOBSEPARATOR_AGGREGATEFIELDS2 As String = "\^\"
    Public Shared GLOBSEPARATOR_ARGFIELDS As String = "\~*\"
    Public Const AUTOIDUNSET As String = "(Autogenerated)"
    Public Const RAPIDFLOWSVERSION As String = "4.5M.70 (.NET Framework 4.5 Version)"

    Public Shared DROPDOWNLISTMAX As Integer = GlobalFunctions.FormatInteger(WebconfigSettings.DropdownlistMax, 3000)
    Public Const ISPAPERLOGIC As Boolean = False
    Public Const ISRAPPS As Boolean = False
    Public Const ISDTULTRA As Boolean = False
    Public Const ISAURORA As Boolean = False
    Public Const ISTAPIR As Boolean = False
    Public Const ISMAHSING As Boolean = False
    Public Const ISRAPID4 As Boolean = True
    Public Const ISRAPID3 As Boolean = False
    Public Const ISCCN As Boolean = False
    Public Const ISCIDB As Boolean = False
    Public Const ISLITE As Boolean = False
    Public Const ISMOT As Boolean = False
    Public Const ISMICA As Boolean = False
    Public Const ISSPRING As Boolean = False
    Public Const ISBTK As Boolean = False
    Public Const SPRING_VSCODE As Boolean = False
    Public Const ISBLYNK As Boolean = False
    Public Const FT8INCLUDED As Boolean = True
    Public Const ISFTFLOWS As Boolean = False
    Public Const SHAREPOINTINCLUDED As Boolean = False
    'Public Shared FORGOTPASSFUNCTIONALITY As Boolean = True
    Public Shared ISCLOUDSERVER As Boolean = CBool(AppSettings.Get("IsCloudServer"))
    Public Shared PRODUCTNAME As String = AppSettings.Get("Product_Name")
    Public Shared PRODUCTWEBSITE As String = AppSettings.Get("Product_Website")
    Public Shared DTPATH As String = AppSettings.Get("Product_Integration")
    Public Shared FirstURL As String = AppSettings.Get("FirstURL")
    Public Shared MaxUsers As Long = -1
    Public Shared MaxForms As Long = 0 '0 means no limit
    Public Shared AppLimit As Long = 0  '0 means no limit
    Public Const BUILTINACCT_USERCOUNT As Long = 3
    Public Const SaltByteSize As Integer = 64
    Public Const HashByteSize As Integer = 128
    ' Public Const Pbkdf2Iterations As Integer = 50000
    Public Const IterationIndex As Integer = 0
    Public Const SaltIndex As Integer = 1
    Public Const Pbkdf2Index As Integer = 2

    Public Shared Function IsAuthenticated(ByVal Server As String, ByVal username As String, ByVal password As String, Optional ByRef ReturnedError As String = "") As Boolean
        logger.Debug("start")
        Dim authenticated As Boolean = False
        Try
            Dim entry As New System.DirectoryServices.DirectoryEntry(Server, username, password)
            Dim nativeObject As Object = entry.NativeObject
            authenticated = True
            ReturnedError = ""
        Catch cex As DirectoryServicesCOMException
            logger.Debug(cex)
            ReturnedError = cex.Message
        Catch ex As Exception
            logger.Error(ex)
            ReturnedError = ex.Message
        End Try
        logger.Debug("authenticated: " + authenticated.ToString() + ", ReturnedError: " + ReturnedError)
        Return authenticated
    End Function

    Public Shared Function ReplaceSubstitution(tag As String, ByRef SubColl As Collection, UICulture As String) As String
        Dim mycoll As Collection = GrabAllTags(tag)
        Dim i As Integer = 0
        Dim _final As String = tag
        For i = 1 To mycoll.Count
            Dim _tagn As String = mycoll.Item(i)
            Dim _tagn2 As String = _tagn & "." & UICulture

            If SubColl.Contains(_tagn2) Then
                _final = Replace(_final, "<$" & _tagn & ">", SubColl.Item(_tagn2),,, CompareMethod.Text)
            ElseIf SubColl.Contains(_tagn) Then
                _final = Replace(_final, "<$" & _tagn & ">", SubColl.Item(_tagn),,, CompareMethod.Text)
            End If

        Next i
        Return _final
    End Function

    Public Shared Function TruncateIt(ByVal MainText As String) As String
        If GlobalFunctions.ISSPRING = True Then
            If Len(MainText) > 80 Then
                Return Mid(MainText, 1, 80) & "..."
            Else
                Return MainText
            End If
        Else
            Return MainText
        End If
    End Function

    Public Shared Sub LoadExternalBindSource(ByRef webobj As ZukamiLib.WebSession, ByRef ddList As DropDownList, ExternalBindSource As String)
        'sfarg\_\FirstName\_\LastName\_\c07f5181-0f55-45f0-b4b2-26a785e45461\_\42f730ac-3016-4cdd-b156-11b8d02fbc78

        Dim arrsplits() As String = Split(ExternalBindSource, "\_\")
        If UBound(arrsplits) <> 4 Then
            Exit Sub
        End If

        Dim _CaptionField As String = arrsplits(1)
        Dim _ValueField As String = arrsplits(2)
        Dim _ListItemID As String = arrsplits(3)
        Dim _PluginID As String = arrsplits(4)

        If GlobalFunctions.IsGUID(_PluginID) = False Then Exit Sub

        Dim _Set As DataSet = webobj.ExternalConn_GetRecord(New Guid(_PluginID))
        If _Set.Tables(0).Rows.Count = 0 Then Exit Sub
        Dim _plugincode As String = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("PluginCode"))
        Dim _tag1 As String = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Tag1"))
        Dim _tag2 As String = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Tag2"))
        Dim _username As String = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Username"))
        Dim _password As String = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Password"))

        If StrComp(_plugincode, "sf", CompareMethod.Text) = 0 Then
            Try
                Dim sf As New SalesforceInteractions.Business.AccountBusiness(_tag1, _tag2, _username, _password)
                Dim j As Newtonsoft.Json.Linq.JObject = sf.GetAllCustomers()

                Dim abc As Newtonsoft.Json.Linq.JArray = j.Item("records")
                Dim i As Integer = 0


                For Each myobject As Newtonsoft.Json.Linq.JObject In abc
                    Try
                        Dim _captiondata As String = GlobalFunctions.FormatData(myobject.Item(_CaptionField))
                        Dim _valuedata As String = GlobalFunctions.FormatData(myobject.Item(_ValueField))

                        Dim _li As New System.Web.UI.WebControls.ListItem(TruncateIt(_captiondata), _ValueField)
                        ddList.Items.Add(_li)
                    Catch ex As Exception

                    End Try

                Next


            Catch ex As Exception

            End Try


        End If



    End Sub

    Public Shared Function FormatDistance(DistanceInMeters As Object) As String
        Dim _distance As Double = GlobalFunctions.FormatDouble(DistanceInMeters)
        Return Format(_distance, "###,###,##0.00") & "m"
    End Function

    Public Shared Sub SetActiveTab(ByRef mymaster As Object, ByVal TabActive As String)
        Try
            If StrComp(TypeName(mymaster), "default_master", CompareMethod.Text) = 0 Then
                CType(mymaster, Object).activetab = TabActive
            End If
        Catch ex As Exception

        End Try
    End Sub

    Public Shared Function SubstituteFormKeywords(ByRef WebSessionObj As ZukamiLib.WebSession, ByVal RecipientName As String, ByVal _MainBody As String, ByRef InstanceID As Guid, Optional ByRef Attachments As String = "") As String
        Try

            'System.IO.File.AppendAllText("c:\temp\sfk.log", "substitute recipient:" & RecipientName & ",instanceid:" & InstanceID.ToString & vbCrLf)

            Dim _appid As String = ""
            Dim _Formid As String = ""
            Dim _RecID As String = ""
            Dim _InstanceStarted As DateTime
            Dim _StartedByFullName As String = ""
            Dim _SubmissionNumber As String = ""
            Dim _Remarks As String = ""
            Dim _StageName As String = ""
            Dim _RecordSet As DataSet = Nothing
            Dim _RecordRow As DataRow = Nothing
            Dim _Set As DataSet = Nothing
            Dim _workflowid As Guid = Guid.Empty

            Dim winstance As DataSet = WebSessionObj.WorkflowInstances_GetRecord(InstanceID)
            If winstance.Tables(0).Rows.Count > 0 Then
                _appid = GlobalFunctions.FormatData(winstance.Tables(0).Rows(0).Item("AppID"))
                _Formid = GlobalFunctions.FormatData(winstance.Tables(0).Rows(0).Item("FormID"))
                _RecID = GlobalFunctions.FormatData(winstance.Tables(0).Rows(0).Item("RecordID"))
                _StartedByFullName = GlobalFunctions.FormatData(winstance.Tables(0).Rows(0).Item("StartedByFullName"))
                _SubmissionNumber = GlobalFunctions.FormatData(winstance.Tables(0).Rows(0).Item("SubmissionNumber"))
                _Remarks = GlobalFunctions.FormatData(winstance.Tables(0).Rows(0).Item("Remarks"))
                _StageName = GlobalFunctions.FormatData(winstance.Tables(0).Rows(0).Item("StageName"))
                _workflowid = GlobalFunctions.GetGUID(winstance.Tables(0).Rows(0).Item("WorkflowID"))
                _InstanceStarted = GlobalFunctions.FormatDateTime(winstance.Tables(0).Rows(0).Item("InstanceStarted"))

                Dim _listset As DataSet = WebSessionObj.Lists_GetRecord(New Guid(_Formid), Nothing)
                If _listset.Tables(0).Rows.Count > 0 Then
                    Dim _tbs As String = GlobalFunctions.FormatData(_listset.Tables(0).Rows(0).Item("TableBindSource"))
                    Dim _sql As String = "SELECT * FROM [" & _tbs & "] WHERE ID='" & _RecID & "'"
                    WebSessionObj.CustomSQLCommand(_sql)
                    WebSessionObj.CustomClearParameters()
                    _RecordSet = WebSessionObj.CustomSQLExecuteReturn()
                    If _RecordSet.Tables(0).Rows.Count > 0 Then
                        _RecordRow = _RecordSet.Tables(0).Rows(0)
                    End If
                End If
                Try
                    _listset.Dispose()
                    _listset = Nothing
                Catch ex As Exception
                End Try
                _Set = WebSessionObj.ListItems_Get(New Guid(_Formid))
            End If

            If _Set Is Nothing Or _RecordRow Is Nothing Then
                'System.IO.File.AppendAllText("c:\temp\sfk.log", "THERE IS NO DATA" & vbCrLf)
            Else
                'System.IO.File.AppendAllText("c:\temp\sfk.log", "THERE IS DATA" & vbCrLf)
            End If

            Attachments = ""
            Dim _body As String = _MainBody
            If _Set Is Nothing = False And _RecordRow Is Nothing = False Then
                If _Set.Tables(0).Rows.Count > 0 Then
                    Dim _counter As Integer
                    For _counter = 0 To _Set.Tables(0).Rows.Count - 1
                        Dim _fname As String = GlobalFunctions.FormatData(_Set.Tables(0).Rows(_counter).Item("FieldBindSource"))
                        Dim _ftype As FIELDTYPES = GlobalFunctions.FormatInteger(_Set.Tables(0).Rows(_counter).Item("FieldType"))

                        Dim _isFileAttach As Boolean = False
                        If _ftype = FIELDTYPES.FT_FILE Or _ftype = FIELDTYPES.FT_TIFFVIEWER Or _ftype = FIELDTYPES.FT_HIDDENFIELD Then
                            If InStr(_body, "[$Attachment:" & _fname & "]", CompareMethod.Text) > 0 Then
                                _isFileAttach = True

                                Dim _paths As String = ""
                                Try
                                    _paths = GlobalFunctions.FormatData(_RecordRow.Item(_fname))
                                Catch ex As Exception

                                End Try

                                Dim arrFSplits() As String = Split(_paths, ",")
                                Dim _counter6 As Integer
                                For _counter6 = 0 To UBound(arrFSplits)
                                    Dim _ftag As String = Trim(arrFSplits(_counter6))
                                    If Len(_ftag) > 0 Then
                                        Dim _path As String = GetFullUploadedFilePathFromMetadata(_ftag)

                                        If System.IO.File.Exists(_path) Then
                                            If Len(Attachments) > 0 Then Attachments += ","
                                            Attachments += _path
                                        End If
                                    End If
                                Next _counter6
                            End If
                        End If

                        If _isFileAttach = False Then
                            Try
                                _body = Replace(_body, "[$" & _fname & "]", GlobalFunctions.FormatData(_RecordRow.Item(_fname)), , , CompareMethod.Text)
                            Catch ex As Exception

                            End Try

                        Else
                            _body = Replace(_body, "[$Attachment:" & _fname & "]", "", , , CompareMethod.Text)
                        End If

                    Next _counter
                End If
            End If

            Dim wflowname As String = ""
            Dim _mwset As DataSet = WebSessionObj.Workflows_GetBoth(_workflowid)
            If _mwset.Tables(0).Rows.Count > 0 Then
                wflowname = GlobalFunctions.FormatData(_mwset.Tables(0).Rows(0).Item("Name"))
            End If

            'System.IO.File.AppendAllText("c:\temp\sfk.log", "Got to the point of substitution" & vbCrLf)

            Dim _QuickflowsURL As String = WebSessionObj.ServerVariables_Get("QuickflowsURL")
            If Len(_QuickflowsURL) = 0 Then _QuickflowsURL = "http://" & My.Computer.Name & "/Zukami"
            _QuickflowsURL = _QuickflowsURL.TrimEnd("/") + "/FillForm.aspx?a=" & _appid & "&FT=1&RO=1&ID=" & _RecID & "&ListID=" & _Formid
            _QuickflowsURL = "<a href=""" + _QuickflowsURL + """>View Details</a>"

            _body = Replace(_body, "{$Recipient}", RecipientName, , , CompareMethod.Text)
            _body = Replace(_body, "{$SubmissionID}", _SubmissionNumber, , , CompareMethod.Text)
            _body = Replace(_body, "{$SubmissionDate}", GlobalFunctions.FormatDate(_InstanceStarted), , , CompareMethod.Text)
            _body = Replace(_body, "{$SubmittedBy}", _StartedByFullName, , , CompareMethod.Text)
            _body = Replace(_body, "{$SubmittedFiles}", "", , , CompareMethod.Text)
            _body = Replace(_body, "{$SubmissionRemarks}", _Remarks, , , CompareMethod.Text)
            _body = Replace(_body, "{$SubmissionCurrentStage}", _StageName, , , CompareMethod.Text)
            _body = Replace(_body, "{$DataLink}", _QuickflowsURL, , , CompareMethod.Text)
            _body = Replace(_body, "{$Link}", _QuickflowsURL, , , CompareMethod.Text)
            _body = Replace(_body, "{$WorkflowName}", wflowname, , , CompareMethod.Text)

            'System.IO.File.AppendAllText("c:\temp\sfk.log", "Post substitution" & vbCrLf)

            Try
                _Set.Dispose()
                _RecordRow = Nothing
                _RecordSet.Dispose()
            Catch ex As Exception

            End Try


            Return _body
        Catch ex As Exception
            'System.IO.File.AppendAllText("c:\temp\sfk.log", "substitute recipient error:" & ex.ToString & vbCrLf & "======================" & vbCrLf)
            Return _MainBody
        End Try
    End Function

    Public Shared Function GetFullUploadedFilePathFromMetadata(ByVal FileTag As String) As String
        Return GetZukamiSettings.UploadPath.TrimEnd("\") & "\" & Replace(FileTag, ";", "\")
    End Function

    Public Shared Sub AddAttribute(ByRef WebControl As WebControl, ByVal AttributeKey As String, ByVal AttributeValue As String)
        Dim _value As String = ""
        Try
            _value = CType(WebControl, WebControl).Attributes.Item(AttributeKey)
        Catch ex As Exception
        End Try
        If Len(_value) > 0 Then
            _value = _value.Trim.TrimEnd(";") & ";"
        End If
        _value += AttributeValue
        CType(WebControl, WebControl).Attributes.Item(AttributeKey) = _value
    End Sub

    Public Shared Function UploadFile(ByRef webobj As ZukamiLib.WebSession, ByVal FilePath As String, ByRef FormID As Guid, ByRef RecordID As Guid, ByVal FieldName As String) As Boolean
        UploadFile = False
        Dim _finalpath As String = webobj.UploadFile(GetZukamiSettings.UploadPath, FilePath)
        _finalpath = Replace(_finalpath, "\", ";", , , CompareMethod.Text)

        Dim _set As DataSet = webobj.forms_GetRecord(FormID, Nothing)
        If _set.Tables(0).Rows.Count > 0 Then
            Dim _Tablesource As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("TableBindSource"))
            Dim _sql As String = "UPDATE [" & _Tablesource & "] SET [" & FieldName & "]='" & _finalpath & "' WHERE [ID]='" & RecordID.ToString & "'"
            Try
                webobj.CustomSQLCommand(_sql)
                webobj.CustomSQLExecute()
            Catch ex As Exception
                UploadFile = False
            End Try
            UploadFile = True
        End If
    End Function

    Public Shared Function IsAtPage(pageName As String) As Boolean
        Dim urlAbsolutePath As String = ""
        Dim containsPageName As Boolean = False
        Try
            urlAbsolutePath = HttpContext.Current.Request.Url.AbsolutePath
            If FormatData(urlAbsolutePath).ToLower().Contains(pageName.ToLower()) Then
                containsPageName = True
            End If
        Catch ex As Exception
            logger.Error(ex, "urlAbsolutePath: " + FormatData(urlAbsolutePath) + ", pageName: " + pageName)
        End Try
        logger.Debug("urlAbsolutePath: " + FormatData(urlAbsolutePath) + ", pageName: " + pageName + ", containsPageName: " + containsPageName.ToString())
        Return containsPageName
    End Function

    Public Shared Function DynamicArguments(ByVal Form As String, ByVal CaptionField As String, ByVal ValueField As String, ByVal OrderField As String, ByVal IsDistinct As Boolean, ByVal Filters As String, ByVal DefaultToFindMode As Boolean, ByVal ShowRefresh As Boolean, ByRef ShowNewEntry As Boolean) As String
        Return "DD:" & Form & "\,\" & CaptionField & "\,\" & ValueField & "\,\" & OrderField & "\,\" & IsDistinct & "\,\" & Filters & "\,\" & DefaultToFindMode & "\,\" & ShowRefresh & "\,\" & ShowNewEntry
    End Function

    Public Shared Function DynamicGPSArguments(ByVal Form As String, ByVal CaptionField As String, ByVal ValueField As String, ByVal OrderField As String, ByVal IsDistinct As Boolean, ByVal Filters As String, ByVal DefaultToFindMode As Boolean, ByVal ShowRefresh As Boolean, StartCaption As String, StopCaption As String) As String
        Return "DD:" & Form & "\,\" & CaptionField & "\,\" & ValueField & "\,\" & OrderField & "\,\" & IsDistinct & "\,\" & Filters & "\,\" & DefaultToFindMode & "\,\" & ShowRefresh & "\,\" & StartCaption & "\,\" & StopCaption
    End Function

    Public Shared Function IsBuiltIn(ByVal ActionName As String) As Boolean
        Select Case ActionName
            Case "BUILTIN_ADDNEWENTRY", "BUILTIN_EXPORTTOCSV", "BUILTIN_EXPORTTOXML", "BUILTIN_IMPORTFROMCSV"
                Return True
            Case Else
                Return False
        End Select
    End Function

    Public Shared Function FormatSQLField(ByVal Data As Object) As String
        Return "[" & Data & "]"

    End Function

    Public Shared Function FormatDblQuoteData(ByVal Data As Object) As String
        Return Replace(Data, """", """""")

    End Function

    Public Shared Function GetWinADName() As String
        Try
            Dim wi As System.Security.Principal.WindowsIdentity = Nothing
            Dim winid As System.Security.Principal.IIdentity = System.Web.HttpContext.Current.User.Identity
            wi = winid
            Return wi.Name
        Catch ex As Exception
            Return System.Web.HttpContext.Current.User.Identity.Name
        End Try


    End Function


    Public Shared Function IsMobileDevice() As Boolean
        Dim result As Boolean = False
        Try
            If EnableMobileMode = False Then Return False
            Dim _useragent As String = System.Web.HttpContext.Current.Request.UserAgent
            result = InStr(1, _useragent, "iphone", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "ipad", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "android", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "ppc", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "windows ce", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "blackberry", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "opera mini", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "mobile", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "palm", CompareMethod.Text) > 0 Or
            InStr(1, _useragent, "portable", CompareMethod.Text) > 0
            'logger.Debug("_useragent: " + _useragent + ", result: " + result.ToString())

        Catch ex As Exception
            logger.Error(ex)
        End Try
        Return result
    End Function

    Public Shared Function IsMobilePhone() As Boolean
        Return CookieEqualsTo("IsPhoneOrTablet", "phone")
    End Function
    Public Shared Function IsTablet() As Boolean
        Return CookieEqualsTo("IsPhoneOrTablet", "tablet")
    End Function
    Public Shared Function CookieEqualsTo(cookieName As String, compareToValue As String) As Boolean
        Dim equals As Boolean = False
        logger.Trace("cookie name: " + cookieName + ", compareToValue: " + compareToValue)
        Dim theCookie As HttpCookie = HttpContext.Current.Request.Cookies(cookieName)
        If (theCookie IsNot Nothing) Then
            logger.Trace("cookie value: " + theCookie.Value)
            If theCookie.Value = compareToValue Then
                equals = True
            End If
        End If
        logger.Trace("equals: " + equals.ToString())
        Return equals
    End Function
    Public Shared Sub ExtractTableArgs(ByVal Args As String, ByRef TVData As String, ByRef FullWidth As Boolean, ByRef InRowEdit As Boolean, Optional ByRef Popup As Boolean = False)
        FullWidth = False
        InRowEdit = False
        Dim _args() As String = Split(Args, GLOBSEPARATOR_ARGFIELDS)
        If UBound(_args) = 0 Then
            TVData = _args(0)
        ElseIf UBound(_args) >= 1 Then
            TVData = _args(0)
            FullWidth = GlobalFunctions.FormatBoolean(_args(1))
        End If
        If UBound(_args) >= 2 Then
            InRowEdit = GlobalFunctions.FormatBoolean(_args(2), False)
        End If
        If UBound(_args) >= 3 Then
            Popup = GlobalFunctions.FormatBoolean(_args(3), False)
        End If
    End Sub

    Public Shared Function CreateFormField(ByRef WebObj As ZukamiLib.WebSession, ByRef FormGUID As Guid, ByVal FieldName As String, ByVal FieldCaption As String, ByVal HelperText As String, ByVal FieldType As GlobalFunctions.FIELDTYPES, Optional ByVal Compulsory As Boolean = False, Optional ByVal Enabled As Boolean = True, Optional ByVal DefaultValue As String = "", Optional ByVal FieldArguments As String = "", Optional ByVal AllowDuplicates As Boolean = True, Optional ByVal CSS As String = "", Optional ByVal LabelCSS As String = "", Optional ByVal FocusCSS As String = "", Optional ByVal ReadonlyCSS As String = "", Optional ByVal FieldOrder As Integer = 0, Optional ByRef ReturnGUID As String = "", Optional Hidden As Boolean = False, Optional FormCol As Integer = 0, Optional SpanCol As Integer = 0, Optional SearchAttr As String = "", Optional Width As Integer = 0, Optional UseExistingField As Boolean = False) As Boolean
        Dim _listitemid As Guid = Guid.NewGuid

        If Len(ReturnGUID) > 0 And GlobalFunctions.IsGUID(ReturnGUID) Then
            _listitemid = New Guid(ReturnGUID)
        End If

        Dim _fExists As Boolean

        If UseExistingField = True Then
            _fExists = False
        Else
            _fExists = WebObj.FormItems_CheckFieldExists(FormGUID, Trim(FieldName), Guid.Empty)
        End If

        If _fExists = False Then
            ' Dim goInsertExistingField As Boolean = False
            ' If UseExistingField = True Then
            '     goInsertExistingField = True
            ' Else
            '     If OracleDBEnabled() Then
            '         goInsertExistingField = True
            '         OracleAddColumn(GetTableBindSource(FormGUID), Trim(FieldName), OracleGetFieldType(FieldType))
            '     End If
            ' End If
            ' If goInsertExistingField Then
            '     WebObj.FormItems_InsertExistingField(_listitemid, Trim(FieldName), Trim(FieldCaption), FieldType, FieldOrder, FormGUID, "", HelperText, FieldArguments, Compulsory, False, Enabled, CSS, LabelCSS, FocusCSS, ReadonlyCSS, Hidden, FormCol, SpanCol, SearchAttr, AllowDuplicates, Width, True)
            ' Else
            '     WebObj.FormItems_Insert(_listitemid, Trim(FieldName), Trim(FieldCaption), FieldType, FieldOrder, FormGUID, "", HelperText, FieldArguments, Compulsory, False, Enabled, CSS, LabelCSS, FocusCSS, ReadonlyCSS, Hidden, FormCol, SpanCol, SearchAttr, AllowDuplicates, Width)
            ' End If
            FormItems_Insert(_listitemid, Trim(FieldName), Trim(FieldCaption), FieldType, FieldOrder, FormGUID,
                             "", HelperText, FieldArguments, Compulsory, False,
                             Enabled, CSS, LabelCSS, FocusCSS, ReadonlyCSS, Hidden, FormCol,
                             SpanCol, SearchAttr, AllowDuplicates, Width, False,
                             UseExistingField, WebObj)
            WebObj.ListItems_UpdateAdvSettings(_listitemid, "", 0, DefaultValue, "", "", False, "", False, False, AllowDuplicates)
            ReturnGUID = _listitemid.ToString
            Return True
        Else
            ReturnGUID = ""
            Return False
        End If
    End Function

    Public Shared Sub FormItems_Insert(ListItemID As Guid, FieldName As String, FieldCaption As String, FieldType As Integer, FieldOrder As Integer, ListID As Guid,
                                       FieldBindSource As String, FieldRemarks As String, FieldArguments As String, IsCompulsory As Boolean, AdditionalFlag As Boolean,
                                       Enabled As Boolean, CSS As String, LabelCSS As String, FocusCSS As String, ReadonlyCSS As String, Hidden As Boolean, FormCol As Integer,
                                       SpanCol As Integer, SearchAttr As String, AllowDuplicates As Boolean, Width As Integer, Locked As Boolean,
                                       UseExistingField As Boolean, ByRef WebObj As ZukamiLib.WebSession)
        Dim goInsertExistingField As Boolean = False
        If UseExistingField = True Then
            goInsertExistingField = True
        Else
            If OracleDBEnabled() Then
                goInsertExistingField = True
                'OracleAddColumn(GetTableBindSource(ListID), Trim(FieldName), OracleGetFieldType(FieldType))
                OracleEnsureColumnExists(GetTableBindSource(ListID), Trim(FieldName), OracleGetFieldType(FieldType))
            End If
        End If
        If goInsertExistingField Then
            WebObj.FormItems_InsertExistingField(ListItemID, FieldName, FieldCaption, FieldType, FieldOrder, ListID,
                                                FieldBindSource, FieldRemarks, FieldArguments, IsCompulsory, AdditionalFlag,
                                                Enabled, CSS, LabelCSS, FocusCSS, ReadonlyCSS, Hidden, FormCol,
                                                SpanCol, SearchAttr, AllowDuplicates, Width, Locked)
        Else
            WebObj.FormItems_Insert(ListItemID, FieldName, FieldCaption, FieldType, FieldOrder, ListID,
                                                FieldBindSource, FieldRemarks, FieldArguments, IsCompulsory, AdditionalFlag,
                                                Enabled, CSS, LabelCSS, FocusCSS, ReadonlyCSS, Hidden, FormCol,
                                                SpanCol, SearchAttr, AllowDuplicates, Width)
        End If
    End Sub

    Public Shared Function CreateTableArgs(ByVal TVData As String, ByVal FullWidth As Boolean, ByVal InRowEdit As Boolean, Popup As Boolean) As String
        Return TVData & GLOBSEPARATOR_ARGFIELDS & CStr(FullWidth) & GLOBSEPARATOR_ARGFIELDS & CStr(InRowEdit) & GLOBSEPARATOR_ARGFIELDS & CStr(Popup)
    End Function

    Public Shared Function PerformAction(ByVal TaskID As Guid, ByVal ActionTag As String, ByVal CustomActionDisplayName As String, ByVal Remarks As String, Optional ByVal signature As String = "") As String
        Try
            ' undo: Seem this fix for Aeon is not suitable for the standard version:
            ' as tested it will cause bug if set Completion criteria to multiple person. 
            ' In Aeon we assume there's always 1 person required to take action on all workflow bubbles.
            ' If TaskAlreadyProcessed(TaskID) Then
            '     Return "Someone else has already acted on this item. Your action is no longer necessary"
            ' End If
            'Submit the action
            Dim _actionresult As String = ""
            Dim _actionTitle As String = ""
            Dim _HistoryCaption As String = ""
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()

            If StrComp(ActionTag, "approve", CompareMethod.Text) = 0 Then
                _actionresult = ZukamiLib.WebSession.ACTIONRESULT_APPROVE
                _actionTitle = _settings.CurrentFullName + " approved this task"
                _HistoryCaption = Replace(WorkflowHistory_ApproveMsg, "[$User]", GetZukamiSettings.CurrentFullName, , , CompareMethod.Text)
            ElseIf StrComp(ActionTag, "reject", CompareMethod.Text) = 0 Then
                _actionresult = ZukamiLib.WebSession.ACTIONRESULT_REJECT
                _actionTitle = _settings.CurrentFullName + " rejected this task"
                _HistoryCaption = Replace(WorkflowHistory_RejectMsg, "[$User]", GetZukamiSettings.CurrentFullName, , , CompareMethod.Text)
            ElseIf StrComp(ActionTag, "correction", CompareMethod.Text) = 0 Then
                _actionresult = ZukamiLib.WebSession.ACTIONRESULT_CORRECTION
                _actionTitle = _settings.CurrentFullName + " requested a change"
            ElseIf StrComp(ActionTag, "Custom", CompareMethod.Text) = 0 Then
                _actionresult = CustomActionDisplayName
                _actionTitle = _settings.CurrentFullName + " submitted an action - " & CustomActionDisplayName
                Dim _temp As String = Replace(WorkflowHistory_ActionMsg, "[$User]", GetZukamiSettings.CurrentFullName, , , CompareMethod.Text)
                _temp = Replace(_temp, "[$Action]", CustomActionDisplayName, , , CompareMethod.Text)
                _HistoryCaption = _temp
            End If

            Dim _web As New ZukamiLib.WebSession(_settings)
            _web.OpenConnection()
            '_web.TaskActions_Submit(TaskID, Remarks, _actionresult, _actionTitle, _HistoryCaption)
            Try
                logger.Debug("signature: " + FormatData(signature))
                _web.TaskActions_SubmitWithSignature(TaskID, Remarks, _actionresult, _actionTitle, _HistoryCaption, signature)
            Catch ex As Exception
                logger.Error(ex)
            End Try
            Dim _TaskSet As DataSet = _web.Task_GetRecord(TaskID)



            'Now we try to trigger this via MSMQ 
            If _TaskSet.Tables(0).Rows.Count > 0 Then
                Dim _instanceID As Guid = GlobalFunctions.GetGUID(_TaskSet.Tables(0).Rows(0).Item("InstanceID"))
                Dim _sessionNodeID As Guid = GlobalFunctions.GetGUID(_TaskSet.Tables(0).Rows(0).Item("InstanceNodeID"))

                'Let's also clear reminders associated with this task
                _web.Reminders_Clear(_settings.CurrentUserGUID, TaskID)

                PromptWorkflowNode(_instanceID, _sessionNodeID)
            End If

            _web.CloseConnection()
            _web = Nothing
            Return ""
        Catch ex As Exception
            Return ex.ToString
        End Try
    End Function
    Private Shared Function TaskAlreadyProcessed(taskID As Guid) As Boolean
        Dim alreadyProcessed As Boolean = False
        Dim sql As String = String.Format(
            " select * from Tasks                                                                           " + vbCrLf +
            " where Not ([Status]='' OR [Status] Is NULL OR [Status] = 'NOTREQUIRED')                       " + vbCrLf +
            "     AND InstanceNodeID in (                                                                     " + vbCrLf +
            "         select InstanceNodeID from Tasks where TaskID = '{0}'                                   " + vbCrLf +
            "     )                                                                                           " + vbCrLf,
            taskID.ToString()
        )
        Dim dt As DataTable = GetDataTableBySql(sql)
        If dt.Rows.Count > 0 Then
            alreadyProcessed = True
        End If
        Return alreadyProcessed
    End Function

    Public Shared Sub PromptWorkflowNode(ByVal sessionGUID As Guid, ByVal argSessionNodeguid As Guid)
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _web As New ZukamiLib.WebSession(_settings)
        _web.OpenConnection()
        Dim _set As DataSet = _web.ExecThread_InstanceNodes_Get(argSessionNodeguid)
        _web.CloseConnection()
        _web = Nothing

        If _set.Tables(0).Rows.Count > 0 Then
            Dim oriItem As New MSMQMessage(_settings.Queue)
            oriItem.MessageType = MSMQMessage.MessageTypes.MT_NODEACTION
            oriItem.SessionGUID = sessionGUID.ToString
            oriItem.SessionNodeGUID = argSessionNodeguid.ToString
            oriItem.ExecutionThreadGUID = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("XStreamID"))
            oriItem.SendMessage()
        End If
    End Sub


    Public Shared Sub LoadHeaderArguments(ArgumentString As String, ByRef Type As Integer, ByRef TabGroupName As String, ByRef ParentSectionName As String)
        Dim arrArguments() As String = Split(ArgumentString, ",")
        If UBound(arrArguments) >= 2 Then
            Type = arrArguments(0)
            TabGroupName = arrArguments(1)
            ParentSectionName = arrArguments(2)
        End If
    End Sub


    Public Shared Function ImportAsCSV(ByRef ViewID As Guid, ByVal CSVFile As String, ByRef EncodingType As System.Text.Encoding, ByVal Delimitor As String, ByVal KeyFieldCaption As String) As String
        Dim _ImportColls As New Collection

        Dim _encoding As System.Text.Encoding = EncodingType
        Dim _RowArray() As String

        _RowArray = System.IO.File.ReadAllLines(CSVFile, _encoding)
        Dim _HeaderLine As String = _RowArray(0)
        If Len(_HeaderLine) = 0 Then
            ImportAsCSV = "The header Is missing In the uploaded CSV file"
            Exit Function
        End If

        Dim _delimitor As String = Delimitor


        Dim arrHeaderFields() As String = Split(_HeaderLine, _delimitor)




        Dim _webobj As New ZukamiLib.WebSession(GetZukamiSettings)
        _webobj.OpenConnection()
        Dim _viewcols As DataSet = _webobj.ViewColumns_Get(ViewID)
        Dim _counter As Integer
        Dim _table As String = ""
        Dim _fldstring As String = ""
        Dim _mainc As Integer
        Dim _KeyBoundCol As String = ""

        For _mainc = 0 To UBound(arrHeaderFields)
            Dim _ImportColName As String = arrHeaderFields(_mainc)
            Dim _fieldfound As Boolean = False
            For _counter = 0 To _viewcols.Tables(0).Rows.Count - 1
                Dim _tbl As String = GlobalFunctions.FormatData(_viewcols.Tables(0).Rows(_counter).Item("SQLBoundTbl"))
                Dim _fld As String = GlobalFunctions.FormatData(_viewcols.Tables(0).Rows(_counter).Item("SQLBoundFld"))
                Dim _colCaption As String = GlobalFunctions.FormatData(_viewcols.Tables(0).Rows(_counter).Item("ColCaption"))
                Dim _fieldArgs As String = GlobalFunctions.FormatData(_viewcols.Tables(0).Rows(_counter).Item("FieldArguments"))
                Dim _fieldType As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_viewcols.Tables(0).Rows(_counter).Item("FldType"))

                If StrComp(_ImportColName, _colCaption, CompareMethod.Text) = 0 Then
                    If Len(KeyFieldCaption) > 0 Then
                        If StrComp(_ImportColName, KeyFieldCaption, CompareMethod.Text) = 0 Then
                            _KeyBoundCol = _fld
                        End If
                    End If


                    If Len(_tbl) <> 0 Then _table = _tbl
                    If Len(_fldstring) > 0 Then _fldstring += ", "
                    _fieldfound = True

                    Dim _vp As New ValuePair
                    _vp.Caption = _fld
                    _vp.Value5 = CStr(CInt(_fieldType))
                    _vp.Value6 = _fieldArgs
                    _vp.Value2 = ""
                    _vp.Value3 = ""


                    If _fieldType = GlobalFunctions.FIELDTYPES.FT_DROPDOWN Then
                        Dim _formname As String = ""
                        If GlobalFunctions.IsLookup(_fieldArgs) = True Then
                            Dim _captionfield As String = ""
                            Dim _idfield As String = ""
                            Dim _orderfield As String = ""

                            GlobalFunctions.GetDynamicArguments(_fieldArgs, _formname, _captionfield, _idfield, _orderfield)
                            If Len(_formname) > 0 Then
                                Dim _fset As DataSet = _webobj.Forms_GetByFormName(_formname)
                                If _fset.Tables(0).Rows.Count > 0 Then
                                    Dim _Tbs As String = GlobalFunctions.FormatData(_fset.Tables(0).Rows(0).Item("TableBindSource"))
                                    Dim _getSQL As String = "Select [" & _idfield & "] FROM [" & _Tbs & "] WHERE [" & _captionfield & "]=@CaptionData"
                                    Dim _insertSQL As String = ""
                                    Dim _additionalCol As String = ""
                                    Dim _additionalVal As String = ""

                                    If StrComp(_idfield, "ID", CompareMethod.Text) <> 0 And StrComp(_captionfield, "ID", CompareMethod.Text) <> 0 Then
                                        _additionalCol = ", [ID]"
                                        _additionalVal = ", NEWID()"
                                    End If


                                    If StrComp(_idfield, _captionfield, CompareMethod.Text) = 0 Then
                                        _insertSQL = "INSERT INTO [" & _Tbs & "] ([" & _idfield & "]" & _additionalCol & ") VALUES (@CaptionParam" & _additionalVal & ")"
                                    Else
                                        _insertSQL = "INSERT INTO [" & _Tbs & "] ([" & _idfield & "],[" & _captionfield & "]" & _additionalCol & ") VALUES (@ValueParam,@CaptionParam" & _additionalVal & ")"
                                    End If


                                    _vp.Value2 = _getSQL
                                    _vp.Value3 = _insertSQL
                                    _vp.Value4 = _idfield
                                End If
                            End If
                        End If
                    End If
                    _ImportColls.Add(_vp)
                    Exit For
                End If
            Next _counter
            If _fieldfound = False Then
                Dim _vp As New ValuePair
                _vp.Caption = ""
                _ImportColls.Add(_vp)
            End If
        Next

        Dim _ori As New ZukamiLib.WebSession(GetZukamiSettings)
        _ori.OpenConnection()
        Dim _paramlist As String = ""
        Dim _sql As String = ""
        Dim _setlist As String = ""

        If Len(_KeyBoundCol) > 0 Then
            _sql = "If Not EXISTS(Select 1 FROM [" & _table & "] WHERE [" & _KeyBoundCol & "]=@KeyBoundCol) INSERT INTO [" & _table & "]([ID],%FieldList%) VALUES(NEWID(),%Data%)" & vbCrLf &
                    "Else" & vbCrLf & "UPDATE [" & _table & "] Set %MatchList% WHERE [" & _KeyBoundCol & "]=@KeyBoundCol"
        Else
            _sql = "INSERT INTO [" & _table & "]([ID],%FieldList%) VALUES(NEWID(),%Data%)"
        End If


        Dim _additionalweb As New ZukamiLib.WebSession(GetZukamiSettings)
        _additionalweb.OpenConnection()

        Dim _ImportRow As Boolean = True
        For _counter = 1 To UBound(_RowArray)
            Try
                _fldstring = ""
                _paramlist = ""
                _setlist = ""

                _webobj.CustomSQLCommand("")
                _webobj.CustomClearParameters()

                Dim _string As String = _RowArray(_counter)
                Dim _Values() As String = Split(_string, _delimitor)
                Dim _data As String = ""

                If UBound(_Values) >= _ImportColls.Count - 1 Then


                    For _mainc = 1 To _ImportColls.Count
                        Dim _vp As ValuePair = _ImportColls.Item(_mainc)
                        If Len(_vp.Caption) > 0 Then

                            'Before we add the data, we check fieldtype
                            Dim _fType As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_vp.Value5, GlobalFunctions.FIELDTYPES.FT_SHORTTEXT)
                            Dim _FinalValue As String = StripExcelFormatting(_Values(_mainc - 1))

                            If Len(_KeyBoundCol) > 0 Then
                                If StrComp(_vp.Caption, _KeyBoundCol, CompareMethod.Text) = 0 Then
                                    'if its keyboundcol, we add the paramter
                                    _webobj.CustomAddParameter("KeyBoundCol", SqlDbType.NVarChar, 255, IIf(Len(_FinalValue) > 0, _FinalValue, String.Empty))
                                End If
                            End If



                            If _fType = GlobalFunctions.FIELDTYPES.FT_DROPDOWN And Len(_vp.Value2) > 0 And Len(_vp.Value3) > 0 Then
                                'else we try to add to parent
                                _ori.CustomSQLCommand(_vp.Value2)
                                _ori.CustomClearParameters()

                                If Len(_FinalValue) > 0 Then
                                    _ori.CustomAddParameter("CaptionData", SqlDbType.NVarChar, -1, _FinalValue)
                                    Dim _ItemValue As DataSet = _ori.CustomSQLExecuteReturn
                                    If _ItemValue.Tables(0).Rows.Count > 0 Then
                                        _webobj.CustomAddParameter("param" & _mainc, SqlDbType.NVarChar, -1, GlobalFunctions.FormatData(_ItemValue.Tables(0).Rows(0).Item(0)))
                                    Else
                                        'if theres no data we create the item
                                        Dim _createsql As String = _vp.Value3
                                        Dim _idparam As String = ""
                                        Dim _valueparam As String = ""
                                        Dim _captionparam As String = _FinalValue

                                        _ori.CustomSQLCommand(_createsql)
                                        If StrComp(_vp.Value4, "ID", CompareMethod.Text) = 0 Then
                                            _valueparam = Guid.NewGuid.ToString
                                        Else
                                            _valueparam = _FinalValue
                                        End If
                                        _ori.CustomAddParameter("ValueParam", SqlDbType.NVarChar, -1, _valueparam)
                                        _ori.CustomAddParameter("CaptionParam", SqlDbType.NVarChar, -1, _captionparam)
                                        _ori.CustomSQLExecute()

                                        _webobj.CustomAddParameter("param" & _mainc, SqlDbType.NVarChar, -1, _valueparam)
                                    End If
                                Else
                                    _webobj.CustomAddParameter("param" & _mainc, SqlDbType.NVarChar, -1, DBNull.Value)
                                End If
                            ElseIf _fType = GlobalFunctions.FIELDTYPES.FT_DATE Or _fType = GlobalFunctions.FIELDTYPES.FT_DATETIME Then
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.DateTime, -1, GlobalFunctions.GetDBDateTime(_FinalValue))
                            ElseIf _fType = GlobalFunctions.FIELDTYPES.FT_LONGTEXT Then
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.NText, -1, IIf(Len(_FinalValue) > 0, _FinalValue, String.Empty))
                            ElseIf _fType = GlobalFunctions.FIELDTYPES.FT_FLOAT Then
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.Float, -1, IIf(Len(_FinalValue) > 0, _FinalValue, DBNull.Value))
                            ElseIf _fType = GlobalFunctions.FIELDTYPES.FT_INT Then
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.Int, -1, IIf(Len(_FinalValue) > 0, _FinalValue, DBNull.Value))
                            ElseIf _fType = GlobalFunctions.FIELDTYPES.FT_YESNO Then
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.Bit, -1, GetBitValue(_FinalValue))
                            ElseIf _fType = GlobalFunctions.FIELDTYPES.FT_USER Then
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.UniqueIdentifier, -1, GetUserValue(_additionalweb, _FinalValue, _vp.Value6))
                            ElseIf _fType = GlobalFunctions.FIELDTYPES.FT_CURRENCY Then
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.Decimal, -1, IIf(Len(_FinalValue) > 0, _FinalValue, DBNull.Value))
                            Else
                                'else we just add as normal
                                _webobj.CustomAddParameter("param" & _mainc, SqlDbType.NVarChar, 255, IIf(Len(_FinalValue) > 0, _FinalValue, String.Empty))
                            End If

                            If Len(_paramlist) > 0 Then _paramlist += ","
                            _paramlist += "@param" & _mainc
                            If Len(_fldstring) > 0 Then _fldstring += ", "
                            _fldstring += "[" & _vp.Caption & "]"
                            If Len(_setlist) > 0 Then _setlist += ", "
                            _setlist += "[" & _vp.Caption & "]=@param" & _mainc

                        End If
                    Next _mainc

                    Dim _finalsql As String = Replace(_sql, "%Data%", _paramlist)
                    _finalsql = Replace(_finalsql, "%FieldList%", _fldstring)
                    _finalsql = Replace(_finalsql, "%MatchList%", _setlist)

                    _webobj.SetSQLCommand(_finalsql)
                    _webobj.CustomSQLExecute()
                    If Len(_webobj.LastError) > 0 Then
                        Return _webobj.LastError
                    End If
                End If
            Catch ex As Exception
                Return ex.ToString
            End Try
        Next

        _ori.CloseConnection()
        _ori = Nothing
        _webobj.CloseConnection()
        _additionalweb.CloseConnection()
        _additionalweb = Nothing
        Return ""
    End Function


    Public Shared Function LoadAllMySubs(ByRef mysubs As Collection, ByRef webobj As ZukamiLib.WebSession, AppID As String) As String
        Dim _set As DataSet = webobj.SubstitutionStrings_Get(New Guid(AppID))
        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _tag As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("StringName"))
            Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Value"))

            _value = Replace(_value, "SS,", "")
            If mysubs.Contains(_tag) = False Then
                mysubs.Add(_value, _tag)
            End If

        Next _counter
    End Function


    Public Shared Function IsSeekInput(ByVal TaskID As String) As Boolean
        'checks if we are currently in seek input mode
        Try
            If IsGUID(TaskID) = False Then Return False
            Dim webobj As New ZukamiLib.WebSession(GetZukamiSettings)
            webobj.OpenConnection()

            Dim _taskset As DataSet = webobj.Task_GetRecord(New Guid(TaskID))
            If StrComp(GlobalFunctions.FormatData(_taskset.Tables(0).Rows(0).Item("Type")), "SFI", CompareMethod.Text) = 0 And
    StrComp(GlobalFunctions.FormatData(_taskset.Tables(0).Rows(0).Item("Tag1")), "SFI", CompareMethod.Text) = 0 Then
                IsSeekInput = True
            Else
                IsSeekInput = False
            End If

            webobj.CloseConnection()
            webobj = Nothing
            _taskset.Dispose()
            _taskset = Nothing
        Catch ex As Exception
            Return False
        End Try
    End Function

    Public Shared Function IsRework(ByVal TaskID As String) As Boolean
        'checks if we are currently in seek input mode
        Try
            If IsGUID(TaskID) = False Then Return False
            Dim webobj As New ZukamiLib.WebSession(GetZukamiSettings)
            webobj.OpenConnection()

            Dim _taskset As DataSet = webobj.Task_GetRecord(New Guid(TaskID))
            If StrComp(GlobalFunctions.FormatData(_taskset.Tables(0).Rows(0).Item("Tag1")), "REWK", CompareMethod.Text) = 0 And GlobalFunctions.FormatBoolean(_taskset.Tables(0).Rows(0).Item("IsCorrectionMode")) Then
                IsRework = True
            Else
                IsRework = False
            End If

            webobj.CloseConnection()
            webobj = Nothing
            _taskset.Dispose()
            _taskset = Nothing
        Catch ex As Exception
            Return False
        End Try
    End Function



    Public Shared Function GrabPostLoginAppPage(ByVal AppID As String) As String
        Dim _other As String = "Default.aspx?a=" & AppID
        If IsMobileDevice() Then
            _other = "ApplicationMobile.aspx?a=" & AppID
        End If
        If Len(AppID) > 0 Then
            'we check if there is any navigation
            Dim _settings As ZukamiLib.ZukamiSettings = CreateDefaultZukamiSettings()
            Dim _webobj As ZukamiLib.WebSession = New ZukamiLib.WebSession(_settings)
            _webobj.OpenConnection()

            If GlobalFunctions.IsGUID(AppID) = True Then
                Dim _set2 As System.Data.DataSet = _webobj.App_GetRecord(New Guid(AppID.ToUpper))
                If _set2.Tables(0).Rows.Count > 0 Then
                    Dim _firstpage As String = GlobalFunctions.FormatData(_set2.Tables(0).Rows(0).Item("FirstPage"))
                    If Len(_firstpage) > 0 Then
                        _other = GlobalFunctions.ResolveLink(_webobj, AppID, "FirstLogin", _firstpage, False, New Guid(CStr(AppID)))
                    End If
                End If
            End If
            _webobj.CloseConnection()
            _webobj = Nothing
        End If
        Return _other
    End Function

    Private Shared Function StripExcelFormatting(ByVal Data As String) As String
        Dim _FData As String = Data
        _FData = Replace(_FData, """""", "{$TempDblQuote}")
        _FData = Replace(_FData, """", "")
        _FData = Replace(_FData, "{$TempDblQuote}", """")
        Return _FData
    End Function

    Private Shared Function GetBitValue(ByRef FinalValue As Object) As Object
        If Len(FinalValue) = 0 Then Return DBNull.Value

        If StrComp(FinalValue, "yes", CompareMethod.Text) = 0 Then Return 1
        If StrComp(FinalValue, "True", CompareMethod.Text) = 0 Then Return 1
        Try
            If CBool(FinalValue) = True Then Return 1
        Catch ex As Exception
        End Try


        Return 0
    End Function

    Friend Shared Function GetAppID() As String
        Dim result As String = ""
        Dim a As String = FormatData(System.Web.HttpContext.Current.Request.QueryString("a")).Trim()
        Dim AppID As String = FormatData(System.Web.HttpContext.Current.Request.QueryString("AppID")).Trim()
        If Len(a) > 0 Then
            result = a
        ElseIf Len(AppID) > 0 Then
            result = AppID
        End If
        Return result
    End Function

    Private Shared Function GetUserValue(ByRef WebObj As ZukamiLib.WebSession, ByRef FinalValue As Object, ByVal AdditionalArgs As String) As Object
        If Len(Trim(FinalValue)) = 0 Then Return DBNull.Value

        If Mid(AdditionalArgs, 1, 6) = "USRPKR" Then
            Dim _user As DataSet = WebObj.User_GetByName(Trim(FinalValue))
            If _user.Tables(0).Rows.Count > 0 Then
                Return GlobalFunctions.GetGUID(_user.Tables(0).Rows(0).Item("UserID"))
            End If
        ElseIf Mid(AdditionalArgs, 1, 6) = "RLEPKR" Then
            Dim _grp As DataSet = WebObj.Group_GetByName(Trim(FinalValue))
            If _grp.Tables(0).Rows.Count > 0 Then
                Return GlobalFunctions.GetGUID(_grp.Tables(0).Rows(0).Item("GroupID"))
            End If
        End If
        Return DBNull.Value
    End Function

    Public Shared Sub SetPostback(ByRef ListID As Guid, ByVal FieldName As String, ByRef WebObj As ZukamiLib.WebSession, ByVal Postback As Boolean)
        Try
            WebObj.Forms_UpdatePostBack(ListID, FieldName, Postback)
        Catch ex As Exception

        End Try

    End Sub

    Public Shared Sub ExtractSectionArguments(Args As String, ByRef IsTab As Boolean, ByRef TabGroupName As String, ByRef ParentSectionFieldID As String)
        Dim arrArgs() As String = Split(Args, ",")
        If UBound(arrArgs) >= 2 Then
            Dim _type As String = arrArgs(0)
            Select Case _type
                Case "2"
                    IsTab = True
                Case Else
                    IsTab = False
            End Select
            TabGroupName = arrArgs(1)
            ParentSectionFieldID = arrArgs(2)
        End If
    End Sub


    Private Shared Function GrabViewInfo(ByRef ViewID As Guid) As FormInfoBag
        Dim _viewdataset As DataSet
        Dim _viewcolumns As DataSet
        Dim _Actions As String


        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)

        _web.OpenConnection()
        _viewdataset = _web.Views_GetRecord(ViewID)
        _viewcolumns = _web.ViewColumns_Get(ViewID)
        _web.CloseConnection()


        If _viewdataset.Tables(0).Rows.Count = 0 Then
            Return Nothing
        End If

        Dim _fib As New FormInfoBag


        _fib.AppID = GlobalFunctions.GetGUID(_viewdataset.Tables(0).Rows(0).Item("AppID"))
        _fib.hfAppID = _fib.AppID.ToString



        _fib.ListName = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("Caption"))
        _fib.CustomRowTemplate = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("CustomRowTemplate"))
        Dim _aggregate As String = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("Aggregate"))
        _fib.ListDescription = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("Desc"))
        _Actions = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("Actions"))
        _fib.IsInlineView = GlobalFunctions.FormatBoolean(_viewdataset.Tables(0).Rows(0).Item("IsInlineView"))
        _fib.IDField = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("IDField"))
        _fib.SourceType = GlobalFunctions.FormatInteger(_viewdataset.Tables(0).Rows(0).Item("SourceType"), 0)
        _fib.hfSourceType = CStr(_fib.SourceType)
        _fib.hfSourceDSN = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("SourceArg1"))
        _fib.hfSourceData = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("SourceArg2"))

        _fib.hfOrdering = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("Ordering"))
        _fib.hfGrouping = GlobalFunctions.FormatData(_viewdataset.Tables(0).Rows(0).Item("Grouping"))

        Dim _tablesUsed As New Collection
        Dim _fieldlist As String

        If _fib.SourceType = 1 Then
            _fieldlist = ""
        Else
            _fieldlist = "*"
        End If



        For _counter = 0 To _viewcolumns.Tables(0).Rows.Count - 1

            Dim _sourceColID As Guid = GlobalFunctions.GetGUID(_viewcolumns.Tables(0).Rows(_counter).Item("SourceColID"))
            Dim _caption As String = GlobalFunctions.FormatData(_viewcolumns.Tables(0).Rows(_counter).Item("ColCaption"))
            Dim _args As String = GlobalFunctions.FormatData(_viewcolumns.Tables(0).Rows(_counter).Item("FieldArguments"))
            Dim _formatting As String = GlobalFunctions.FormatData(_viewcolumns.Tables(0).Rows(_counter).Item("Formatting"))
            Dim _fldAttributes As String = GlobalFunctions.FormatData(_viewcolumns.Tables(0).Rows(_counter).Item("FldAttributes"))
            Dim _show As Boolean = GlobalFunctions.FormatBoolean(_viewcolumns.Tables(0).Rows(_counter).Item("Show"))
            Dim _showfilter As Boolean = GlobalFunctions.FormatBoolean(_viewcolumns.Tables(0).Rows(_counter).Item("ShowFilter"))
            Dim _popupedit As Boolean = GlobalFunctions.FormatBoolean(_viewcolumns.Tables(0).Rows(_counter).Item("PopupEdit"))
            Dim _boundfield As String = GlobalFunctions.FormatData(_viewcolumns.Tables(0).Rows(_counter).Item("SQLBoundFld"))
            Dim _boundtable As String = GlobalFunctions.FormatData(_viewcolumns.Tables(0).Rows(_counter).Item("SQLBoundTbl"))
            Dim _colwidth As Integer = GlobalFunctions.FormatInteger(_viewcolumns.Tables(0).Rows(_counter).Item("ColWidth"), 100)
            Dim _ftype As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_viewcolumns.Tables(0).Rows(_counter).Item("FldType"))
            Dim _updatesql As String = ""
            If _popupedit = True Then
                _updatesql = "UPDATE [" & _boundtable & "] Set [" & _boundfield & "]=@Param1 WHERE [ID]=@ID"
            End If

            If Len(_boundtable) > 0 Then
                If _tablesUsed.Contains(_boundtable) = False Then
                    _tablesUsed.Add(_boundtable, _boundtable)
                End If
            End If

            If GlobalFunctions.ColumnShowAvailable(_ftype) = True Then
                If _show = True Then
                    If _sourceColID = Guid.Empty Then
                        If Len(_fieldlist) > 0 Then _fieldlist += ","
                        _fieldlist += _boundfield & " As [" & _caption & "]"
                    Else
                        If Len(_fib.hfMainTable) = 0 Then _fib.hfMainTable = _boundtable
                    End If
                End If
            End If

            'Add to dgcolumns
            Dim dg As New DataGridColumn
            dg.Arguments = _args
            dg.FType = _ftype
            dg.BoundColumn = _boundfield
            _fib.DGColumns.Add(dg, _boundfield)

        Next _counter
        Dim _tableName As String = ""

        If _tablesUsed.Count = 0 And GlobalFunctions.FormatInteger(_fib.hfSourceType) <> 2 Then
            'no table, lets request the user to re-save the view
            ValidationError.Display2("Sorry, the view you are attempting To open does Not have a table attached")
            Return Nothing
        Else
            For _counter = 1 To _tablesUsed.Count
                If Len(_tableName) > 0 Then _tableName += ", "
                _tableName += "[" & _tablesUsed.Item(_counter) & "]"
            Next _counter
        End If
        _fib.hfFieldList = _fieldlist
        _fib.hfTableName = _tableName

        _fib.CountryColl = GlobalFunctions.GetCountryColl
        Return _fib
    End Function

    Private Shared Function GetAutoFilters(ByRef FilterArgs As Collection, ByRef WebObj As ZukamiLib.WebSession, ByVal ViewID As String, ByRef AutoFilters As DataSet, ByRef ErrorOccured As Boolean) As String
        ErrorOccured = False
        If AutoFilters.Tables(0).Rows.Count = 0 Then Return ""



        Dim _value As String = GlobalFunctions.FormatData(AutoFilters.Tables(0).Rows(0).Item("FilterValue"))

        If Len(_value) >= 3 Then
            Dim _key As String = LCase(Mid(_value, 1, 3))
            Dim _data As String = Mid(_value, 4, Len(_value) - 3)


            Select Case _key
                Case "ss,"
                    Return GlobalFunctions.SubstituteSpecialTags(WebObj, _data, FilterArgs)
                Case "sq,"
                    WebObj.CustomSQLCommand(GlobalFunctions.SubstituteSpecialTags(WebObj, _data, FilterArgs))
                    Dim _val As String = ""
                    Dim _data2 As DataSet = WebObj.CustomSQLExecuteReturn
                    If _data2.Tables(0).Rows.Count > 0 Then
                        _val = GlobalFunctions.FormatData(_data2.Tables(0).Rows(0).Item(0))
                    End If
                    Return _val
                Case "cd,"
                    Dim CompilationError As String = ""
                    Dim _CodeID As String = ViewID & "_Filter"
                    _data = GlobalFunctions.SubstituteSpecialTags(WebObj, _data, FilterArgs)
                    If GlobalFunctions.CacheCode(_data, _CodeID, ZukamiLib.ZukamiCode.FORMULATYPES.FORMULATYPE_STRING, CompilationError) = False Then
                        ValidationError.Display(String.Format(DbResT("Script compilation Error: {0}"), CompilationError))
                        ErrorOccured = True
                    Else
                        Dim _valRet As String = GlobalFunctions.RunCode(_CodeID, GlobalFunctions.CreateScribe)
                        Return _valRet
                    End If
            End Select
        End If
        Return ""
    End Function

    Private Shared Sub ApplyFormatting(ByRef FIB As FormInfoBag, ByRef DSet As DataSet, ByRef webobj As ZukamiLib.WebSession)
        Dim i As Integer = 0

        Dim j As Integer = 0
        For j = 0 To DSet.Tables(0).Columns.Count - 1
            Dim _colname As String = DSet.Tables(0).Columns(j).ColumnName
            If FIB.DGColumns.Contains(_colname) = True Then
                Dim _dgcol As DataGridColumn = FIB.DGColumns.Item(_colname)
                For i = 0 To DSet.Tables(0).Rows.Count - 1
                    DSet.Tables(0).Rows(i).Item(j) = GetTypeFormattedData(FIB, DSet.Tables(0).Rows(i).Item(j), _dgcol, webobj)
                Next i
            End If
        Next j

        DSet.AcceptChanges()

    End Sub

    Private Shared Function CheckLookup(ByVal Data As String, ByRef Col As DataGridColumn) As String
        If Col.Lookup.Contains(Data) Then
            Return Col.Lookup.Item(Data)
        Else
            Return ""
        End If
    End Function

    Private Shared Function GetFromDDLookup(ByRef FIB As FormInfoBag, ByRef WebObj As ZukamiLib.WebSession, ByRef _column As DataGridColumn, ByVal Value As String) As String
        Dim _lookup As Collection = Nothing
        If FIB.BigLookups.Contains(_column.BoundColumn) = True Then
            _lookup = FIB.BigLookups.Item(_column.BoundColumn)
        Else
            'create the lookup
            Dim formname As String = ""
            Dim captionname As String = ""
            Dim valuename As String = ""
            Dim ordername As String = ""
            Dim _IsDistinct As Boolean = False
            Dim _filters As String = ""

            GlobalFunctions.GetDynamicArguments(_column.Arguments, formname, captionname, valuename, ordername, _IsDistinct, _filters)

            _filters = Trim(GlobalFunctions.SubstituteSpecialTags(WebObj, _filters, Nothing))
            Dim _set As DataSet = GlobalFunctions.LoadData(WebObj, formname, captionname, valuename, ordername, _filters, _IsDistinct)
            Dim _lkp As New Collection
            Dim _counter As Integer
            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(0))
                Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(1))
                If Len(_value) > 0 Then
                    If _lkp.Contains(_value) = False Then
                        Try
                            _lkp.Add(_caption, _value)
                        Catch ex As Exception

                        End Try
                    End If
                End If
            Next _counter
            FIB.BigLookups.Add(_lkp, _column.BoundColumn)
            _lookup = _lkp
        End If

        If _lookup.Contains(Value) = True Then
            Return _lookup.Item(Value)
        Else
            Return ""
        End If
    End Function

    Private Shared Function GetFromSQLLookup(ByRef FIB As FormInfoBag, ByRef WebObj As ZukamiLib.WebSession, ByRef _column As DataGridColumn, ByVal Value As String) As String
        Dim _lookup As Collection = Nothing


        If FIB.BigLookups.Contains(_column.BoundColumn) = True Then
            _lookup = FIB.BigLookups.Item(_column.BoundColumn)
        Else
            Dim _args As String = Right(_column.Arguments, Len(_column.Arguments) - 3)
            Dim arrSplits() As String = Split(_args, GlobalFunctions.GLOBSEPARATOR)
            Dim _dsourceID As String = GlobalFunctions.FormatData(arrSplits(0))
            Dim _SQL As String = GlobalFunctions.FormatData(arrSplits(1))

            _SQL = GlobalFunctions.SubstituteSpecialTags(WebObj, _SQL, Nothing)
            _lookup = New Collection
            Try
                Dim _data As DataSet = Nothing
                If Len(_dsourceID) > 0 Then
                    Dim _settings As ZukamiLib.ZukamiSettings = GlobalFunctions.GetDatasourceConnectionString(WebObj, FIB.AppID, _dsourceID)
                    Dim _webobj As New ZukamiLib.WebSession(_settings)
                    _webobj.OpenOLEDBConnection(_settings.PrimaryConnectionString)
                    If Len(_webobj.LastError) = 0 Then
                        _webobj.CustomOLEDBSQLCommand(_SQL)
                        _data = _webobj.CustomOLEDBSQLExecuteReturn
                    End If
                    _webobj.CloseOLEDBConnection()
                    _webobj = Nothing
                Else
                    Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
                    Dim _webobj As New ZukamiLib.WebSession(_settings)
                    _webobj.OpenConnection()
                    If Len(_webobj.LastError) = 0 Then
                        _webobj.CustomSQLCommand(_SQL)
                        _data = _webobj.CustomSQLExecuteReturn
                    End If
                    _webobj.CloseConnection()
                    _webobj = Nothing
                End If
                If _data Is Nothing = False Then
                    Dim _counterw As Integer
                    For _counterw = 0 To _data.Tables(0).Rows.Count - 1
                        Dim _caption As String = GlobalFunctions.FormatData(_data.Tables(0).Rows(_counterw).Item(0))
                        Dim _value As String = GlobalFunctions.FormatData(_data.Tables(0).Rows(_counterw).Item(1))
                        If _lookup.Contains(_value) = False Then
                            Try
                                _lookup.Add(_caption, _value)
                            Catch ex As Exception
                            End Try
                        End If
                    Next
                    FIB.BigLookups.Add(_lookup, _column.BoundColumn)
                End If

            Catch ex As Exception
            End Try
        End If
        If _lookup.Contains(Value) = True Then
            Return _lookup.Item(Value)
        Else
            Return ""
        End If
    End Function

    Private Shared Function GetFromUserLookup(ByRef FIB As FormInfoBag, ByRef WebObj As ZukamiLib.WebSession, ByRef _column As DataGridColumn, ByVal Value As String) As String
        Dim _lookup As Collection = Nothing
        If FIB.BigLookups.Contains(_column.BoundColumn) = True Then
            _lookup = FIB.BigLookups.Item(_column.BoundColumn)
        Else
            Dim _set As DataSet = Nothing
            Select Case Mid(_column.Arguments, 1, 6)
                Case "USRPKR"
                    _set = WebObj.Users_GetAllNames(Guid.Empty)
                Case "RLEPKR"
                    _set = WebObj.Roles_GetAllNames()
            End Select

            'create the lookup
            Dim _lkp As New Collection
            Dim _counter As Integer
            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(0))
                Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(1))
                If Len(_value) > 0 Then
                    If _lkp.Contains(_value) = False Then
                        Try
                            _lkp.Add(_caption, _value)
                        Catch ex As Exception

                        End Try
                    End If
                End If
            Next _counter
            FIB.BigLookups.Add(_lkp, _column.BoundColumn)
            _lookup = _lkp
        End If

        If _lookup.Contains(Value) = True Then
            Return _lookup.Item(Value)
        Else
            Return ""
        End If
    End Function

    Public Shared Sub CreateLog(LogEntry As String)
        Dim _logfile As String = GetLogsFolder().TrimEnd("\") & "\" & Format(Now, "ddMMyyyy") & ".log"
        System.IO.File.AppendAllText(_logfile, Format(Now, "dd/MMM/yyyy hh:mm tt") & " : " & LogEntry & vbCrLf & vbCrLf)
    End Sub


    Public Shared Function GetLogsFolder() As String
        Dim _logs As String = WebconfigSettings.BasePath.TrimEnd("\") & "\logs"
        If System.IO.File.Exists(_logs) = False Then
            Try
                System.IO.Directory.CreateDirectory(_logs)
            Catch ex As Exception

            End Try

        End If
        Return _logs
    End Function

    Public Shared Function loadViewDatasource(ByRef ViewID As Guid, ByRef FilterColl As Collection, Optional ByRef SQQuerystring As String = "") As DataSet
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim wb As New ZukamiLib.WebSession(_settings)
        wb.OpenConnection()
        Dim FIBArg As FormInfoBag = Nothing
        Dim _set As DataSet = GrabData(FilterColl, wb, ViewID, SQQuerystring, FIBArg)

        _set = ChangeDataTypes(FIBArg, _set, wb)
        ApplyFormatting(FIBArg, _set, wb)

        Return _set

    End Function

    Public Shared Sub SubstituteTagsmobile(ByVal ThemeTag As String, ByRef WebObj As ZukamiLib.WebSession, ByRef objects As GlobalFunctions.ThemeObjects, ByRef PlcMain As PlaceHolder, ByVal MainText As String, ByRef AppID As Guid, Optional ByVal ListName As String = "", Optional ByVal ListDescription As String = "")
        Dim _text As String = MainText
        PlcMain.Controls.Clear()
        _text = GlobalFunctions.SubstituteThemeKeywordsmobile(WebObj, _text, AppID, ListName, ListDescription, objects)
        Dim lang As String = "en-US"
        Dim zuk As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        If zuk Is Nothing = False Then
            lang = zuk.UICulture
        End If

        If Len(lang) = 0 Then lang = "en-US"
        Dim _allTags As Collection = GrabAllTags(_text)
        'If _allTags.Count > 0 Then

        '    'Add the subscriptions with language
        '    Dim tagwithlang As New Collection
        '    Dim i As Integer
        '    For i = 1 To _allTags.Count
        '        Dim _Tag As String = _allTags.Item(i)
        '        tagwithlang.Add(_Tag + "." + lang, _Tag + "." + lang)
        '    Next i
        '    For i = 1 To tagwithlang.Count
        '        Dim _tag As String = tagwithlang.Item(i)
        '        _allTags.Add(_tag, _tag)
        '    Next



        '    Dim _tagset As DataSet = GrabSubstitutionDataset(WebObj, _allTags, AppID)
        '    ResolveAndPopulateStrings(_text, WebObj, _tagset, AppID, lang)
        'End If


        Dim _done As Boolean = False
        Dim _position As Integer = 1
        Do While _done = False
            Dim _tag1 As Integer = InStr(_position, _text, "[$")
            If _tag1 = 0 Then GoTo Done
            Dim _tag2 As Integer = InStr(_tag1, _text, "]")
            If _tag2 = 0 Then GoTo Done

            Dim _tag As String = Mid(_text, _tag1, _tag2 - _tag1 + 1)
            Dim _HTML As String = Mid(_text, _position, _tag1 - _position)

            If GlobalFunctions.SubstituteThemeTags(ThemeTag, WebObj, objects, PlcMain, _tag, _HTML) = False Then
                'write everything up to this point
                Dim _all As String = Mid(_text, _position, _tag2 - _position + 1)
                If Len(_all) > 0 Then PlcMain.Controls.Add(New LiteralControl(_all))
            End If

            _position = _tag2 + 1
            If _position > Len(_text) Then _done = True
            GoTo ContinueLoop
Done:
            Dim _literal As String = Mid(_text, _position, Len(_text) - _position + 1)
            If Len(_literal) > 0 Then PlcMain.Controls.Add(New LiteralControl(_literal))
            _done = True
            Exit Do
ContinueLoop:
        Loop

    End Sub

    Private Shared Function GetTypeFormattedData(ByRef FIB As FormInfoBag, ByRef Data As Object, ByRef _column As DataGridColumn, ByRef WebObj As ZukamiLib.WebSession) As Object
        If _column.Lookup Is Nothing = False Then
            'Use lookup
            Return CheckLookup(GlobalFunctions.FormatData(Data), _column)
        Else
            Select Case _column.FType
                Case GlobalFunctions.FIELDTYPES.FT_DROPDOWN
                    If GlobalFunctions.IsLookup(_column.Arguments) = True Then
                        Return GetFromDDLookup(FIB, WebObj, _column, GlobalFunctions.FormatData(Data))
                    ElseIf GlobalFunctions.IsSQLSource(_column.Arguments) = True Then
                        Return GetFromSQLLookup(FIB, WebObj, _column, GlobalFunctions.FormatData(Data))
                    Else
                        Return GlobalFunctions.FormatData(Data)
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_USER

                    Return GetFromUserLookup(FIB, WebObj, _column, GlobalFunctions.FormatData(Data))
                Case GlobalFunctions.FIELDTYPES.FT_CHECKLIST
                    Return Replace(GlobalFunctions.FormatData(Data), GlobalFunctions.GLOBSEPARATOR, ", ")
                Case GlobalFunctions.FIELDTYPES.FT_FILE
                    Dim _filetag As String = GlobalFunctions.FormatData(Data)
                    Dim _docID As String = ""
                    Dim _filename As String = ""
                    GlobalFunctions.ExtractFromFileTag(_filetag, _docID, _filename)
                    Return _filename
                Case GlobalFunctions.FIELDTYPES.FT_TIFFVIEWER, GlobalFunctions.FIELDTYPES.FT_SIGNATURE, GlobalFunctions.FIELDTYPES.FT_CAMERA
                    Dim _filetag As String = GlobalFunctions.FormatData(Data)
                    Dim _docID As String = ""
                    Dim _filename As String = ""
                    GlobalFunctions.ExtractFromFileTag(_filetag, _docID, _filename)
                    Dim _attributes As DataGridColumn.TIFFAttributes = _column.Attribute

                    If System.IO.File.Exists(System.Web.HttpContext.Current.Server.MapPath("~\uploads\" & _docID.ToString & "\" & _filename)) Then
                        If _attributes Is Nothing Then
                            If GlobalFunctions.IsDisplayableImage(_filename) = True Then
                                'Return "<img border='0' src=""GetFile.aspx?a=" & _AppID.ToString & "&FileDesc=" + Server.UrlEncode(_filetag) + """></img>"
                                Return _filename
                            Else
                                Return ""
                            End If
                        Else
                            If _attributes.DisplayAsLink = True Then
                                Return _filename
                            Else
                                If _attributes.Resize = False Then
                                    If GlobalFunctions.IsDisplayableImage(_filename) = True Then
                                        Return _filename
                                        'Return "<img border='0' src=""GetFile.aspx?a=" & _AppID.ToString & "&FileDesc=" + Server.UrlEncode(_filetag) + """></img>"
                                    Else
                                        Return ""
                                    End If
                                Else
                                    Dim _resizeTag As String = ""
                                    If Len(_attributes.Width) > 0 Then _resizeTag += " Width='" & _attributes.Width & "'"
                                    If Len(_attributes.Height) > 0 Then _resizeTag += " Height='" & _attributes.Height & "'"

                                    If GlobalFunctions.IsDisplayableImage(_filename) = True Then
                                        Return _filename
                                        'Return "<img border='0'" & _resizeTag & " src=""GetFile.aspx?a=" & _AppID.ToString & "&FileDesc=" + Server.UrlEncode(_filetag) + """></img>"
                                    Else
                                        Return ""
                                    End If
                                End If
                            End If
                        End If
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_COUNTRY
                    Return GlobalFunctions.FormatCountry(FIB.CountryColl, Data)
                Case Else
                    Return Data
            End Select

        End If
        Return ""
    End Function



    Private Shared Function ChangeDataTypes(ByRef FIB As FormInfoBag, ByRef DSet As DataSet, ByRef webobj As ZukamiLib.WebSession) As DataSet
        If FIB Is Nothing Then
            Throw New Exception("FIB is nothing")
        End If
        If DSet Is Nothing Then
            Throw New Exception("DSet is nothing")
        End If

        Dim i As Integer = 0

        Dim _cloneSet As DataSet = DSet.Clone

        Dim j As Integer = 0
        For j = 0 To _cloneSet.Tables(0).Columns.Count - 1
            Dim _colname As String = _cloneSet.Tables(0).Columns(j).ColumnName
            If FIB.DGColumns.Contains(_colname) = True Then
                Dim _dgcol As DataGridColumn = FIB.DGColumns.Item(_colname)
                If _dgcol.FType = GlobalFunctions.FIELDTYPES.FT_USER Then
                    _cloneSet.Tables(0).Columns(j).DataType = GetType(String)
                End If
            End If
        Next j

        'import back rows
        For Each drow As DataRow In DSet.Tables(0).Rows
            _cloneSet.Tables(0).ImportRow(drow)
        Next
        _cloneSet.AcceptChanges()
        Return _cloneSet
    End Function

    Public Shared Function GetSelectedFormTableFromGUID(ByRef FormGUID As Guid) As String
        Try
            GetSelectedFormTableFromGUID = ""
            Dim _webobj As New ZukamiLib.WebSession(GetZukamiSettings)
            _webobj.OpenConnection()

            Dim _formset As DataSet = _webobj.forms_GetRecord(FormGUID, Nothing)
            If _formset.Tables(0).Rows.Count > 0 Then
                GetSelectedFormTableFromGUID = GlobalFunctions.FormatData(_formset.Tables(0).Rows(0).Item("TableBindSource"))
            End If

            _webobj.CloseConnection()
            _webobj = Nothing

        Catch ex As Exception
            Return ""
        End Try
    End Function

    Public Shared Function GrabData(ByRef FilterArg As Collection, ByRef WebObj As ZukamiLib.WebSession, ByRef ViewID As Guid, SQQuerystring As String, Optional ByRef FIBArg As FormInfoBag = Nothing) As DataSet
        Dim _dataset As DataSet
        Dim _viewfilters As DataSet
        Dim _ordersql As String = ""
        Dim _sort As String = ""

        Dim fib As FormInfoBag = GrabViewInfo(ViewID)
        fib.ViewID = ViewID
        FIBArg = fib


        'ordering
        Dim _direction As String = ""
        Dim _defaultsort As String = LoadViewDefaultOrdering(fib, WebObj)
        Dim _finalsort As String = ""
        Dim _groupingSort As String = ""

        If Len(_defaultsort) > 0 Then
            _finalsort = _defaultsort
        End If

        'if still no sorting whatsoever,
        If Len(_finalsort) = 0 Then
            _finalsort = "[" & GetIDField(fib.IDField) & "] ASC"
        End If


        _ordersql += " ORDER BY " & _finalsort
        Dim fieldList As String = fib.hfFieldList
        If OracleDBEnabled() Then
            fieldList = fieldList.Replace("*", fib.hfTableName + ".*")
        End If
        Dim _sql As String = "/* 33488690-1986-4CC6-A5FC-683845E655FB */ SELECT " & fieldList & ", ROW_NUMBER() OVER (" & _ordersql & ") AS [SqlRowNum] FROM " + fib.hfTableName

        'Assemble the WHERE clause
        Dim _FullWhere As String = ""
        Dim _Where As String = ""

        _FullWhere = _Where

        _viewfilters = WebObj.ViewFilters_Get(ViewID)

        Dim _Error As Boolean = False
        _Where = GetAutoFilters(FilterArg, WebObj, ViewID.ToString, _viewfilters, _Error)


        If Len(_Where) > 0 Then
            If Len(_FullWhere) > 0 Then _FullWhere += " AND "
            _FullWhere += _Where
        End If

        _Where = SQQuerystring
        If Len(_Where) > 0 Then
            If Len(_FullWhere) > 0 Then _FullWhere += " AND "
            _FullWhere += _Where
        End If

        If Len(_FullWhere) > 0 Then
            _sql += " WHERE " & _FullWhere
        End If


        _sql += _ordersql



        If GlobalFunctions.FormatInteger(fib.hfSourceType) = 2 Then
            _sql = fib.hfSourceData
            _sql = GlobalFunctions.SubstituteSpecialTags(WebObj, _sql, Nothing)
            _sql = Replace(_sql, "[$WhereClause]", IIf(Len(_FullWhere) > 0, " WHERE " & _FullWhere, ""))
            _sql = Replace(_sql, "[$WhereClauseAND]", IIf(Len(_FullWhere) > 0, " AND (" & _FullWhere & ")", ""))
        End If

        Dim lastErr As String = ""
        If (GlobalFunctions.FormatInteger(fib.hfSourceType) = 1 Or GlobalFunctions.FormatInteger(fib.hfSourceType) = 2) And Len(fib.hfSourceDSN) > 0 Then
            logger.Debug("route 1")
            Dim _Settings As ZukamiLib.ZukamiSettings = GlobalFunctions.GetDatasourceConnectionString(WebObj, GlobalFunctions.GetGUID(fib.hfAppID), fib.hfSourceDSN)
            Dim _newobject As New ZukamiLib.WebSession(_Settings)
            _newobject.OpenOLEDBConnection(_Settings.PrimaryConnectionString)
            _newobject.CustomOLEDBSQLCommand(_sql)
            _dataset = _newobject.CustomOLEDBSQLExecuteReturn()
            If Len(_newobject.LastError) > 0 Then
                lastErr = _newobject.LastError
                If ShowDetailedErrors = True Then
                    ValidationError.Display(String.Format(DbResT("<!-- D12EA42C-5A65-4CFD-BD55-F2340C059966 --> Sorry one of the fields on the base form used by this list view may have been changed or deleted. Please reconfigure your list view<br><br>SQL: {0}<br><br> {1}"), _sql, _newobject.LastError))
                Else
                    ValidationError.Display2("<!-- B539E1B2-8AB7-42C2-9710-E65E477AEFB4 --> Sorry one of the fields on the base form used by this list view may have been changed or deleted. Please reconfigure your list view<br><br>")
                End If
                _dataset = Nothing
            End If
            _newobject.CloseOLEDBConnection()
            _newobject = Nothing
        Else
            logger.Debug("route 2")
            If Not OracleDBEnabled() Then
                WebObj.CustomSQLCommand(_sql)
                _dataset = WebObj.CustomSQLExecuteReturn()
            Else
                _dataset = OracleGetDataSetBySql(OracleConvertToPLSQL(_sql), WebObj)
            End If
            If Len(WebObj.LastError) > 0 Then
                lastErr = WebObj.LastError
                If ShowDetailedErrors = True Then
                    ValidationError.Display(String.Format(DbResT("<!-- 2906A938-A560-4704-94F4-490F3DFE9AA2 --> Sorry one of the fields on the base form used by this list view may have been changed or deleted. Please reconfigure your list view<br><br>SQL: {0}<br><br>"), WebObj.LastError))
                Else
                    ValidationError.Display2("<!-- 971605B0-555B-4A8D-A70A-566FF525E461 --> Sorry one of the fields on the base form used by this list view may have been changed or deleted. Please reconfigure your list view<br><br>")
                End If

                _dataset = Nothing
            End If
        End If

        If _dataset Is Nothing Then
            Dim msg As String = "Failed to grab data, sql: " + _sql + ", lastErr: " + lastErr
            logger.Error(msg)
            Throw New Exception(msg)
        End If

        Return _dataset
    End Function

    Private Shared Function GetAvailName(ByRef Webobj As ZukamiLib.WebSession, TargetListID As String, FieldName As String) As String
        Dim _li As DataSet = Webobj.ListItems_GetByName(FieldName, New Guid(TargetListID))
        If _li.Tables(0).Rows.Count > 0 Then
            Dim _fname As String = GlobalFunctions.FormatData(_li.Tables(0).Rows(0).Item("FieldName"))
            If StrComp(_fname, FieldName, vbTextCompare) = 0 Then
                'name exists, so we add "1" to the name
                Return GetAvailName(Webobj, TargetListID, FieldName & "_1")
            Else
                Return FieldName
            End If
        Else
            Return FieldName
        End If
    End Function

    Public Shared Function CopyAndPaste(ByRef WebObj As ZukamiLib.WebSession, TargetFormID As String, SourceFormID As String, Optional ByRef FieldNameColl As Collection = Nothing, Optional InsertViewColumns As Boolean = False, Optional SourceViewID As String = "", Optional TargetViewID As String = "", Optional TargetTableBindSource As String = "") As Boolean
        Dim _fi As DataSet = WebObj.FormItems_Get(New Guid(SourceFormID))
        Dim _lastNumber As Integer = 0

        Dim _appID As Guid = Guid.Empty
        Dim _formset As DataSet = WebObj.forms_GetRecord(New Guid(TargetFormID), Nothing)
        If _formset.Tables(0).Rows.Count > 0 Then
            _appID = GlobalFunctions.GetGUID(_formset.Tables(0).Rows(0).Item("AppID"))
        Else
            Return False
        End If

        'first we get the last ordder number
        Dim _ofi As DataSet = WebObj.FormItems_Get(New Guid(TargetFormID))
        If _ofi.Tables(0).Rows.Count > 0 Then
            _lastNumber = GlobalFunctions.FormatInteger(_ofi.Tables(0).Rows(_ofi.Tables(0).Rows.Count - 1).Item("FieldOrder"))
        End If
        _lastNumber += 1

        Dim i As Integer
        For i = 0 To _fi.Tables(0).Rows.Count - 1
            Dim _newlistitemid As Guid = Guid.NewGuid
            Dim _dr As DataRow = _fi.Tables(0).Rows(i)
            Dim _foldID As String = GlobalFunctions.FormatData(_dr.Item("ListItemID"))

            If FieldNameColl Is Nothing = False Then
                If FieldNameColl.Contains(_foldID) = False Then
                    GoTo lblNextfield
                End If
            End If


            Dim _fname As String = GetAvailName(WebObj, TargetFormID, GlobalFunctions.FormatData(_dr.Item("FieldName")))
            Dim _fcap As String = GlobalFunctions.FormatData(_dr.Item("FieldCaption"))

            Dim _fbindsource As String = GlobalFunctions.FormatData(_dr.Item("FieldBindSource"))
            Dim _ftype As Integer = GlobalFunctions.FormatInteger(_dr.Item("FieldType"))
            Dim _fremarks As String = GlobalFunctions.FormatData(_dr.Item("FieldRemarks"))
            Dim _fargs As String = GlobalFunctions.FormatData(_dr.Item("FieldArguments"))
            Dim _fcompul As Boolean = GlobalFunctions.FormatBoolean(_dr.Item("IsCompulsory"))
            Dim _fhidden As Boolean = GlobalFunctions.FormatBoolean(_dr.Item("Invisible"))
            Dim _fadd As Boolean = GlobalFunctions.FormatBoolean(_dr.Item("AdditionalFlag"))
            Dim _fenabled As Boolean = GlobalFunctions.FormatBoolean(_dr.Item("Enabled"))
            Dim _fcss As String = GlobalFunctions.FormatData(_dr.Item("CSS"))
            Dim _flabelcss As String = GlobalFunctions.FormatData(_dr.Item("LabelCSS"))
            Dim _ffocuscss As String = GlobalFunctions.FormatData(_dr.Item("FocusCSS"))
            Dim _freadonlycss As String = GlobalFunctions.FormatData(_dr.Item("ReadOnlyCSS"))
            Dim _fcolumn As Integer = GlobalFunctions.FormatInteger(_dr.Item("FormColumn"), 0)
            Dim _fspancol As Integer = GlobalFunctions.FormatInteger(_dr.Item("SpanCols"), 0)
            Dim _fwidth As Integer = GlobalFunctions.FormatInteger(_dr.Item("Width"), 0)
            Dim _fsearchattr As String = GlobalFunctions.FormatData(_dr.Item("SearchAttributes"))
            Dim _fallowduplicates As Boolean = GlobalFunctions.FormatBoolean(_dr.Item("AllowDuplicates"), True)

            Dim _ftypemain As GlobalFunctions.FIELDTYPES = _ftype

            If _ftypemain = FIELDTYPES.FT_TABLE Then
                Dim _viewGUID As Guid = Guid.NewGuid
                'Additional insert needs to be done, create a new form, duplicate the view also.
                Dim _tblCreated As String = GlobalFunctions.CreateTable(_newlistitemid, _viewGUID, Trim(_fname), _fcap, _fremarks, New Guid(TargetFormID), _appID)
                'after creating the table, we loop through each field and create it

                Dim _fw As Boolean
                Dim _ire As Boolean
                Dim _popup As Boolean
                Dim _tvdata As String = ""
                GlobalFunctions.ExtractTableArgs(_fargs, _tvdata, _fw, _ire, _popup)

                CopyAndPaste(WebObj, _newlistitemid.ToString, _foldID, Nothing, True, _tvdata, _viewGUID.ToString, _tblCreated)
                'Then we need to also copy all the view columns over for that view.
                'CopyandPasteViewColumns(WebObj, _viewGUID, _oldviewGUID)

                _fargs = GlobalFunctions.CreateTableArgs(_viewGUID.ToString, _fw, _ire, _popup)

            End If
            ' WebObj.FormItems_Insert(_newlistitemid, _fname, _fcap, _ftype, _lastNumber + i, New Guid(TargetFormID), _fname, _fremarks, _fargs, _fcompul, _fadd, _fenabled, _fcss, _flabelcss, _ffocuscss, _freadonlycss, _fhidden, _fcolumn, _fspancol, _fsearchattr, _fallowduplicates, _fwidth)
            FormItems_Insert(_newlistitemid, _fname, _fcap, _ftype, _lastNumber + i, New Guid(TargetFormID), _fname, _fremarks, _fargs, _fcompul, _fadd, _fenabled, _fcss, _flabelcss, _ffocuscss, _freadonlycss, _fhidden, _fcolumn, _fspancol, _fsearchattr, _fallowduplicates, _fwidth, False, False, WebObj)

            'we now insert the viewcolumn too
            If InsertViewColumns = True And GlobalFunctions.IsGUID(SourceViewID) = True Then
                WebObj.ViewColumn_Duplicate(New Guid(SourceViewID), New Guid(SourceFormID), New Guid(_foldID), New Guid(TargetViewID), New Guid(TargetFormID), _newlistitemid, TargetTableBindSource)
            End If



lblNextfield:
        Next i
        Return True
    End Function

    Public Shared Sub CopyandPasteViewColumns(ByRef Webobj As ZukamiLib.WebSession, ByRef TargetViewID As Guid, ByRef SourceViewID As Guid)
        Dim _dset As DataSet = Webobj.ViewColumns_Get(SourceViewID)

    End Sub

    Public Shared Function CreateTable(ByRef SubFormID As Guid, ByRef SubViewID As Guid, ByVal FieldName As String, ByVal FieldCaption As String, ByVal FieldRemarks As String, ByVal ParentListID As Guid, ByRef AppID As Guid) As String
        'we create a new list with the same subformid
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()

        ' _web.Subforms_Insert(FieldName, FieldCaption, SubFormID, ParentListID, FieldRemarks, "", AppID)
        Subforms_Insert(FieldName, FieldCaption, SubFormID, ParentListID, FieldRemarks, "", AppID, _web)

        Dim _sf As DataSet = _web.forms_GetRecord(SubFormID, Nothing)
        If _sf.Tables(0).Rows.Count > 0 Then
            CreateTable = GlobalFunctions.FormatData(_sf.Tables(0).Rows(0).Item("TableBindSource"))
        End If



        'we also create a new view along with the subform
        _web.Views_Insert(0, FieldName, "Autogenerated view", AppID, SubViewID, "", "", False, "", 0, "", "", "", Guid.Empty, -1, -1, "", "", True)


        'we then attempt to create the viewsourceform binding automatically
        Dim _vsf As DataSet = _web.ViewSourceForms_Get(SubViewID)
        If _vsf.Tables(0).Rows.Count = 0 Then
            _web.ViewSourceForms_Insert(SubViewID, SubFormID)
        End If

        'we also need to create the default view filter (to tie the record to its parent form)
        If OracleDBEnabled() Then
            _web.ViewFilters_Insert("ParentID = '[$ParentFormID]'", "SS,UPPER(""ParentID"") = UPPER('[$ParentFormID]') /* 9A1AEDE6-BD67-40C1-86AD-F6C04FF0B4B7 */ ", SubViewID)
        Else
            _web.ViewFilters_Insert("ParentID = '[$ParentFormID]'", "SS,ParentID = '[$ParentFormID]'", SubViewID)
        End If




        _web.CloseConnection()
    End Function

    Private Shared Function GetIDField(IDField As String) As String
        Return IIf(Len(IDField) > 0, IDField, "ID")
    End Function

    Private Shared Function LoadViewDefaultOrdering(ByRef fib As FormInfoBag, ByRef WebObj As ZukamiLib.WebSession) As String
        If Len(fib.hfOrdering) > 0 Then
            Return GlobalFunctions.GetDynamicSQLString(WebObj, fib.ViewID.ToString & "_Ordering", fib.hfOrdering)
        Else
            Return ""
        End If
    End Function


    Private Shared Function GetDecimalPlaces(ByRef webobj As ZukamiLib.WebSession, ByRef ListItemID As Guid) As Integer
        Dim _lsSet As DataSet = webobj.ListItems_GetRecord(ListItemID)
        If _lsSet.Tables(0).Rows.Count = 0 Then
            Return 0
        Else
            Dim _fType As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_lsSet.Tables(0).Rows(0).Item("FieldType"))
            Dim _fieldArgs As Integer = GlobalFunctions.FormatInteger(_lsSet.Tables(0).Rows(0).Item("FieldArguments"), 0)
            Select Case _fType
                Case GlobalFunctions.FIELDTYPES.FT_CURRENCY
                    Return 2
                Case GlobalFunctions.FIELDTYPES.FT_FLOAT
                    Return _fieldArgs
                Case Else
                    Return 0
            End Select
        End If
    End Function

    Public Shared Function HasAdminGroup() As Boolean
        Dim _current As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _webobj As New ZukamiLib.WebSession(_current)
        _webobj.OpenConnection()
        HasAdminGroup = _webobj.UserHasRole_Get(_current.CurrentUserGUID, "SUPERADMIN")
        _webobj.CloseConnection()
        _webobj = Nothing
    End Function


    Public Shared Function GenerateViewFromForm(ByRef AppID As Guid, ByRef FormID As Guid) As String
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()

        Dim _formrec As DataSet = _web.forms_GetRecord(FormID, Nothing)
        Dim FormName As String = ""
        Dim BoundTableName As String = ""
        If _formrec Is Nothing = False Then
            FormName = GlobalFunctions.FormatData(_formrec.Tables(0).Rows(0).Item("Name"))
            BoundTableName = GlobalFunctions.FormatData(_formrec.Tables(0).Rows(0).Item("TableBindSource"))
        End If



        Dim _viewID As Guid = Guid.NewGuid
        _web.Views_Insert(0, FormName & " view", "Autogenerated default view", AppID, _viewID, "", "", False, "", 0, "", "", "", Guid.Empty, -1, -1, "", "", False)

        'Give everyone access rights to the view
        _web.Permissions_GiveEveryone(New Guid(ZukamiLib.WebSession.USER_EVERYONE), _viewID, "VER")

        'Generate all the necessary columns
        Dim _formItems As DataSet = _web.FormItems_Get(FormID)
        Dim _counter As Integer
        For _counter = 0 To _formItems.Tables(0).Rows.Count - 1
            Try


                Dim _row As DataRow = _formItems.Tables(0).Rows(_counter)
                Dim _listItemID As Guid = GlobalFunctions.GetGUID(_row.Item("ListItemID"))
                Dim _fieldcaption As String = GlobalFunctions.FormatData(_row.Item("FieldCaption"))
                Dim _fieldargs As String = GlobalFunctions.FormatData(_row.Item("FieldArguments"))
                Dim _fieldBindSource As String = GlobalFunctions.FormatData(_row.Item("FieldBindSource"))
                Dim _fieldType As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_row.Item("FieldType"))
                Dim _showFilter As Boolean = False

                If GlobalFunctions.ColumnFilterAvailable(_fieldType) = True Then
                    _showFilter = True
                End If

                If _fieldType = FIELDTYPES.FT_TIFFVIEWER Or _fieldType = FIELDTYPES.FT_CAMERA Or _fieldType = FIELDTYPES.FT_SIGNATURE Then
                    _fieldargs = "false,true,100px,100px"
                End If

                If StrComp(_fieldBindSource, "Created by", CompareMethod.Binary) <> 0 And StrComp(_fieldBindSource, "Date created", CompareMethod.Binary) <> 0 Then
                    _web.ViewColumns_Insert(Guid.NewGuid, FormID, _listItemID, _fieldcaption, _viewID, _counter, 0, _fieldBindSource, BoundTableName, _showFilter, True, _fieldType, _fieldargs, "", "")
                End If


            Catch ex As Exception

            End Try
        Next
        _web.ViewSourceForms_Insert(_viewID, FormID)
        _web.Forms_UpdateDefaultView(FormID, _viewID)
        _web.Lists_UpdateSearchView(FormID, _viewID)



        _web.CloseConnection()
        _web = Nothing
        Return _viewID.ToString
    End Function

    Public Shared Sub SaveJavascript(ByRef webobj As ZukamiLib.WebSession, ByVal JSFormula As String, ByVal ListItemID As String, ByVal ListID As String)
        'Here we introduce javascript
        If Len(JSFormula) > 0 Then

            Dim _variableDeclarations As String = ""
            Dim _variableDeclarecoll As New Collection
            Dim _done As Boolean = False
            Dim _text As String = JSFormula
            Dim _formatted As String = ""
            Dim _position As Integer = 1
            Dim _varIdx As Integer = 1


            Dim _decimalplaces As Integer = GetDecimalPlaces(webobj, New Guid(ListItemID))

            'we add the main variable
            Dim _targetassgtvar As String = "dest.value"
            Dim _rotargetassgtvar As String = "rodest.innerHTML"
            If Len(_variableDeclarations) > 0 Then _variableDeclarations += vbCrLf
            _variableDeclarations += "var dest = document.getElementById('[$Formengine]_mf_" & ListItemID & "');" & vbCrLf
            _variableDeclarations += "var rodest = document.getElementById('[$Formengine]_romf_" & ListItemID & "');"

            Do While _done = False
                Dim _tag1 As Integer = InStr(_position, _text, "[$")
                If _tag1 = 0 Then GoTo Done
                Dim _tag2 As Integer = InStr(_tag1, _text, "]")
                If _tag2 = 0 Then GoTo Done

                Dim _tag As String = Mid(_text, _tag1 + 2, _tag2 - (_tag1 + 2))
                Dim _HTML As String = Mid(_text, _position, _tag1 - _position)
                If Len(_HTML) > 0 Then _formatted += _HTML

                Dim _jscripttag As String = ""
                Dim FType As GlobalFunctions.FIELDTYPES
                If FindField(webobj, _tag, _jscripttag, FType, ListItemID, ListID) = False Then
                    'write everything up to this point
                    Dim _all As String = Mid(_text, _position, _tag2 - _position + 1)
                    _formatted += _all
                Else
                    If _variableDeclarecoll.Contains(_jscripttag) = False Then
                        Dim _fieldmap As String = ""
                        Select Case FType
                            Case GlobalFunctions.FIELDTYPES.FT_INT
                                _fieldmap = "getInt(var" & _varIdx & ".value)"
                            Case GlobalFunctions.FIELDTYPES.FT_FLOAT, GlobalFunctions.FIELDTYPES.FT_CURRENCY
                                _fieldmap = "getFloat(var" & _varIdx & ".value)"
                            Case Else
                                _fieldmap = "var" & _varIdx & ".value"
                        End Select

                        If Len(_variableDeclarations) > 0 Then _variableDeclarations += vbCrLf
                        _variableDeclarations += "var var" & _varIdx & " = document.getElementById('" & _jscripttag & "');"
                        _variableDeclarecoll.Add(_fieldmap, _jscripttag)
                        _varIdx += 1
                    End If
                    _formatted += _variableDeclarecoll.Item(_jscripttag)
                End If

                _position = _tag2 + 1
                If _position > Len(_text) Then _done = True
                GoTo ContinueLoop
Done:
                Dim _literal As String = Mid(_text, _position, Len(_text) - _position + 1)
                _formatted += _literal
                _done = True
                Exit Do
ContinueLoop:
            Loop

            Dim _tempvarname As String = GlobalFunctions.FormatJSID("tv_" & ListItemID)
            Dim _rotempvarname As String = GlobalFunctions.FormatJSID("tvro_" & ListItemID)

            'now we put the declarations at the top
            Dim _valueformatted As String = _formatted
            _formatted = "try {var " & _tempvarname & "=" & _valueformatted
            If Right(Trim(Trim(_formatted).Trim(vbCrLf.ToCharArray)), 1) <> ";" Then _formatted += ";"
            _formatted += vbCrLf
            _formatted += _targetassgtvar & "=addCommas(" & _tempvarname & ".toFixed(" & _decimalplaces & "))"
            If Right(Trim(Trim(_formatted).Trim(vbCrLf.ToCharArray)), 1) <> ";" Then _formatted += ";"
            _formatted += "} catch(err) {}"

            _formatted += vbCrLf


            _formatted += "try {var " & _rotempvarname & "=" & _valueformatted
            If Right(Trim(Trim(_formatted).Trim(vbCrLf.ToCharArray)), 1) <> ";" Then _formatted += ";"
            _formatted += vbCrLf
            _formatted += _rotargetassgtvar & "=addCommas(" & _tempvarname & ".toFixed(" & _decimalplaces & "))"
            If Right(Trim(Trim(_formatted).Trim(vbCrLf.ToCharArray)), 1) <> ";" Then _formatted += ";"
            _formatted += "} catch(err) {}"


            _formatted = _variableDeclarations & vbCrLf & _formatted
            CreateDynamicCalcFunction(webobj, _formatted, ListItemID, ListID)
        End If
    End Sub

    Private Shared Function FindField(ByRef webobj As ZukamiLib.WebSession, ByVal Tag As String, ByRef JScriptTag As String, ByRef FType As GlobalFunctions.FIELDTYPES, ByVal ListItemID As String, ByVal ListID As String) As Boolean
        Dim _listItemset As DataSet = webobj.ListItems_GetByName(Tag, New Guid(ListID))
        If _listItemset.Tables(0).Rows.Count > 0 Then
            Dim _jscript As String = GlobalFunctions.FormatData(_listItemset.Tables(0).Rows(0).Item("JavascriptAttr"))
            Dim _listItemID As Guid = GlobalFunctions.GetGUID(_listItemset.Tables(0).Rows(0).Item("ListItemID"))
            FType = GlobalFunctions.FormatInteger(_listItemset.Tables(0).Rows(0).Item("FieldType"))
            Dim _coll As Collection = GlobalFunctions.LoadJavascript(_jscript)
            Dim _funcCallName As String = "DynamicCalc_" & GlobalFunctions.MakePresentableGUID(ListItemID) & "();"

            Dim _vp As ValuePair = Nothing
            If _coll.Contains("onkeyup") = True Then
                _vp = _coll.Item("onkeyup")
            Else
                _vp = New ValuePair
                _vp.Value = Guid.NewGuid.ToString
                _vp.Value2 = ""
                _vp.Caption = "onkeyup"
                _coll.Add(_vp, _vp.Caption)
            End If

            If InStr(_vp.Value2, _funcCallName, CompareMethod.Text) = 0 Then
                _vp.Value2 = _funcCallName & _vp.Value2
            End If
            _jscript = GlobalFunctions.SaveJavascript(_coll)

            webobj.JavascriptAttr_Update(_jscript, _listItemID)

            'we must also change the tag to a javascript one

            JScriptTag = "[$Formengine]_mf_" & _listItemID.ToString

            Return True
        Else
            Return False
        End If


    End Function

    Private Shared Sub CreateDynamicCalcFunction(ByRef webobj As ZukamiLib.WebSession, ByVal Formatted As String, ByVal ListItemID As String, ByVal ListID As String)
        Dim _funcCallName As String = "DynamicCalc_" & GlobalFunctions.MakePresentableGUID(ListItemID)
        Dim _funcname As String = "function " & _funcCallName
        Dim _javascript As String = _funcname & "()" & vbCrLf & "{" & vbCrLf
        _javascript += Formatted
        _javascript += vbCrLf & "}" & vbCrLf

        Dim _set As DataSet = webobj.Lists_GetRecord(New Guid(ListID), Nothing)
        If _set.Tables(0).Rows.Count > 0 Then
            Dim _header As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("HiddenHeaders"))
            Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(_header)
            If _coll Is Nothing Then _coll = New Collection

            Dim _counter As Integer
            'we go through the collection object
            For _counter = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(_counter)
                If StrComp(_vp.Caption, _funcCallName, CompareMethod.Text) = 0 Then
                    _coll.Remove(_counter)
                    Exit For
                End If
            Next _counter

            Dim _vp2 As New ValuePair
            _vp2.Caption = _funcCallName
            _vp2.Value = _javascript
            _coll.Add(_vp2)


            'add the jscript libraries if it doesnt exist
            Dim _found As Boolean = False
            For _counter = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(_counter)
                If StrComp(_vp.Caption, "jscriptlib", CompareMethod.Text) = 0 Then
                    _found = True
                    Exit For
                End If
            Next _counter
            If _found = False Then
                Dim _vp3 As New ValuePair
                _vp3.Caption = "jscriptlib"
                _vp3.Value = "function getInt(value) { var parsedVal = parseInt(value.replace(/,/g,'')); if (isNaN(parsedVal)) {return '';} else {return parsedVal;}}" & vbCrLf &
                            "function getFloat(value) { var parsedVal = parseFloat(value.replace(/,/g,'')); if (isNaN(parsedVal)) {return '';} else {return parsedVal;}}"
                _coll.Add(_vp3)
            End If

            webobj.Lists_UpdateHiddenHeaders(New Guid(ListID), GlobalFunctions.ValuePairCollToXML(_coll))
        End If


    End Sub

    Public Shared Sub GrabViewHeaders(ByRef WebObj As ZukamiLib.WebSession, ByRef ViewID As Guid, ByRef FHeader As String, ByRef FBody As String, ByRef FFooter As String, ByRef ListName As String, ByRef ListDescription As String, ByRef Inherit As Boolean)
        Dim _Set As DataSet = WebObj.Views_GetRecord(ViewID)
        If _Set.Tables(0).Rows.Count > 0 Then
            FHeader = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Header"))
            FBody = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Body"))
            FFooter = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Footer"))
            ListName = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Caption"))
            ListDescription = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item("Desc"))
            Inherit = GlobalFunctions.FormatBoolean(_Set.Tables(0).Rows(0).Item("Inherit"))
        End If
    End Sub


    Public Shared Function ResolveRowTemplate(ByRef WebObj As ZukamiLib.WebSession, ByVal RowTemplate As String) As String
        Dim _rowdata As String = RowTemplate
        Dim _current As Long = 1
        Dim _dSets As New Collection
        Dim _sqlStart As Long = 1



        'make the first pass, execute all SQL and collect their results
        Do While _sqlStart > 0
            _sqlStart = InStr(_current, _rowdata, "{$SQL:", CompareMethod.Text)
            If _sqlStart > 0 Then
                _current = _sqlStart + Len("{$SQL:")
                Dim _sqlEnd As Long = InStr(_sqlStart, _rowdata, "}", CompareMethod.Text)
                If _sqlEnd > 0 Then
                    Dim _tag As String = Mid(_rowdata, _current, _sqlEnd - _current)
                    _current = _sqlEnd + Len("}")

                    Dim arrSplits() As String = Split(_tag, ":")
                    If UBound(arrSplits) >= 1 Then
                        Dim _dSetName As String = arrSplits(0)
                        Dim _dSQL As String = arrSplits(1)

                        If Len(_dSetName) > 0 Then
                            WebObj.CustomSQLCommand(_dSQL)
                            WebObj.CustomClearParameters()
                            If _dSets.Contains(_dSetName) = False Then
                                Dim _vp As New ValuePair
                                _vp.MainObject = WebObj.CustomSQLExecuteReturn
                                _vp.Caption = _dSetName
                                _vp.Value = "{$SQL:" & _tag & "}"
                                If _vp.MainObject Is Nothing = False Then
                                    _dSets.Add(_vp, _dSetName)
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Loop

        Dim _rtstart As Long
        Dim _rt1 As Long
        Dim _rt2 As Long

        If InStr(_rowdata, "{$MainRowStart:", CompareMethod.Text) > 0 Then
            'If it is repeating main row

            _current = 1
            _sqlStart = 1
            Do While _sqlStart > 0
                _sqlStart = InStr(_current, _rowdata, "{$MainRowStart:", CompareMethod.Text)
                If _sqlStart > 0 Then
                    _rt1 = _sqlStart
                    _current = _sqlStart + Len("{$MainRowStart:")
                    Dim _sqlEnd As Long = InStr(_sqlStart, _rowdata, "}", CompareMethod.Text)
                    If _sqlEnd > 0 Then
                        Dim _tag As String = Mid(_rowdata, _current, _sqlEnd - _current)
                        _current = _sqlEnd + Len("}")
                        _rtstart = _current
                        Dim _rowEnd As Long = InStr(_current, _rowdata, "{$MainRowEnd}", CompareMethod.Text)
                        If _rowEnd > 0 Then
                            _current = _rowEnd + Len("{$MainRowEnd}")
                            _rt2 = _current
                            Dim _rowTemplate As String = Mid(_rowdata, _rtstart, _rowEnd - _rtstart)

                            Dim _expandedRow As String = ""
                            'we repeat rowtemplate as mnay times necessary
                            If _dSets.Contains(_tag) Then
                                Dim _vp As ValuePair = _dSets.Item(_tag)

                                Dim _set As DataSet = _vp.MainObject
                                Dim _Counter3 As Integer
                                For _Counter3 = 0 To _set.Tables(0).Rows.Count - 1
                                    Dim _tmpl As String = _rowTemplate

                                    Dim _counter2 As Integer
                                    For _counter2 = 0 To _set.Tables(0).Columns.Count - 1
                                        Dim _colName As String = _set.Tables(0).Columns(_counter2).ColumnName
                                        If _set.Tables(0).Rows.Count > 0 Then
                                            'Dim _value As String = FormatForHTML(GlobalFunctions.FormatData(_set.Tables(0).Rows(_Counter3).Item(_colName)))
                                            Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_Counter3).Item(_colName))
                                            Dim _FieldTag As String = "[$" & _vp.Caption & ":" & _colName & "]"

                                            _tmpl = Replace(_tmpl, _FieldTag, _value, , , CompareMethod.Text)
                                        End If
                                    Next
                                    _expandedRow += _tmpl
                                Next _Counter3

                                'now we replace it INSIDE the html itself and set the _current to wherever it should be
                                _rowdata = Mid(_rowdata, 1, _rt1 - 1) + _expandedRow + Mid(_rowdata, _rt2, Len(_rowdata) - _rt2 + 1)
                                _current = _rt1 + Len(_expandedRow)
                            End If
                        End If
                    End If
                End If
            Loop

            'replace rowdata
            For _Counter = 1 To _dSets.Count
                Dim _vp As ValuePair = _dSets.Item(_Counter)
                _rowdata = Replace(_rowdata, _vp.Value, "", , , CompareMethod.Text)
                CType(_vp.MainObject, DataSet).Dispose()
            Next _Counter
        Else

            'For backward compatibility (non-repeating mainrow)

            Dim _Counter As Integer
            For _Counter = 1 To _dSets.Count
                Dim _vp As ValuePair = _dSets.Item(_Counter)
                _rowdata = Replace(_rowdata, _vp.Value, "", , , CompareMethod.Text)

                Dim _set As DataSet = _vp.MainObject
                Dim _counter2 As Integer
                For _counter2 = 0 To _set.Tables(0).Columns.Count - 1
                    Dim _colName As String = _set.Tables(0).Columns(_counter2).ColumnName
                    If _set.Tables(0).Rows.Count > 0 Then
                        'Dim _value As String = FormatForHTML(GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item(_colName)))
                        Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item(_colName))

                        'TO REMOVE AFTER ATC================
                        '_value = Replace(_value, ";", "\")
                        '==================================

                        Dim _Tag As String = "[$" & _vp.Caption & ":" & _colName & "]"

                        _rowdata = Replace(_rowdata, _Tag, _value, , , CompareMethod.Text)
                    End If
                Next
                CType(_vp.MainObject, DataSet).Dispose()
            Next _Counter

        End If



        'search for tablerows
        _dSets.Clear()
        _current = 1
        _sqlStart = 1
        Do While _sqlStart > 0
            _sqlStart = InStr(_current, _rowdata, "{$SUBSQL:", CompareMethod.Text)
            If _sqlStart > 0 Then
                _current = _sqlStart + Len("{$SUBSQL:")
                Dim _sqlEnd As Long = InStr(_sqlStart, _rowdata, "}", CompareMethod.Text)
                If _sqlEnd > 0 Then
                    Dim _tag As String = Mid(_rowdata, _current, _sqlEnd - _current)
                    _current = _sqlEnd + Len("}")

                    Dim arrSplits() As String = Split(_tag, ":")
                    If UBound(arrSplits) >= 1 Then
                        Dim _dSetName As String = arrSplits(0)
                        Dim _dSQL As String = arrSplits(1)

                        If Len(_dSetName) > 0 Then
                            WebObj.CustomSQLCommand(_dSQL)
                            WebObj.CustomClearParameters()
                            If _dSets.Contains(_dSetName) = False Then
                                Dim _vp As New ValuePair
                                _vp.MainObject = WebObj.CustomSQLExecuteReturn
                                _vp.Caption = _dSetName
                                _vp.Value = "{$SUBSQL:" & _tag & "}"
                                If _vp.MainObject Is Nothing = False Then
                                    _dSets.Add(_vp, _dSetName)
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Loop

        'Search for the appropriate row templates to place the data
        _current = 1
        _sqlStart = 1


        Do While _sqlStart > 0
            _sqlStart = InStr(_current, _rowdata, "{$RowStart:", CompareMethod.Text)
            If _sqlStart > 0 Then
                _rt1 = _sqlStart
                _current = _sqlStart + Len("{$RowStart:")
                Dim _sqlEnd As Long = InStr(_sqlStart, _rowdata, "}", CompareMethod.Text)
                If _sqlEnd > 0 Then
                    Dim _tag As String = Mid(_rowdata, _current, _sqlEnd - _current)
                    _current = _sqlEnd + Len("}")
                    _rtstart = _current
                    Dim _rowEnd As Long = InStr(_current, _rowdata, "{$RowEnd}", CompareMethod.Text)
                    If _rowEnd > 0 Then
                        _current = _rowEnd + Len("{$RowEnd}")
                        _rt2 = _current
                        Dim _rowTemplate As String = Mid(_rowdata, _rtstart, _rowEnd - _rtstart)

                        Dim _expandedRow As String = ""
                        'we repeat rowtemplate as mnay times necessary
                        If _dSets.Contains(_tag) Then
                            Dim _vp As ValuePair = _dSets.Item(_tag)

                            Dim _set As DataSet = _vp.MainObject
                            Dim _Counter3 As Integer
                            For _Counter3 = 0 To _set.Tables(0).Rows.Count - 1
                                'support a third level
                                Dim _tmpl As String = _rowTemplate
                                Dim _counter2 As Integer
                                For _counter2 = 0 To _set.Tables(0).Columns.Count - 1
                                    Dim _colName As String = _set.Tables(0).Columns(_counter2).ColumnName
                                    If _set.Tables(0).Rows.Count > 0 Then
                                        'Dim _value As String = FormatForHTML(GlobalFunctions.FormatData(_set.Tables(0).Rows(_Counter3).Item(_colName)))
                                        Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_Counter3).Item(_colName))
                                        Dim _FieldTag As String = "[$" & _vp.Caption & ":" & _colName & "]"

                                        _tmpl = Replace(_tmpl, _FieldTag, _value, , , CompareMethod.Text)
                                    End If
                                Next
                                _tmpl = Reresolve(WebObj, _tmpl)
                                _expandedRow += _tmpl
                            Next _Counter3

                            'now we replace it INSIDE the html itself and set the _current to wherever it should be
                            _rowdata = Mid(_rowdata, 1, _rt1 - 1) + _expandedRow + Mid(_rowdata, _rt2, Len(_rowdata) - _rt2 + 1)
                            _current = _rt1 + Len(_expandedRow)
                        End If
                    End If
                End If
            End If
        Loop

        'replace rowdata
        For _Counter = 1 To _dSets.Count
            Dim _vp As ValuePair = _dSets.Item(_Counter)
            _rowdata = Replace(_rowdata, _vp.Value, "", , , CompareMethod.Text)
            CType(_vp.MainObject, DataSet).Dispose()
        Next _Counter

        Return _rowdata

    End Function

    Public Shared Function Reresolve(ByRef Webobj As ZukamiLib.WebSession, ByVal Value As String) As String
        Dim _current As Integer
        Dim _sqlstart As Integer
        Dim _rowdata As String = Value
        Dim _dSets As New Collection


        _dSets.Clear()
        _current = 1
        _sqlstart = 1
        Do While _sqlstart > 0
            _sqlstart = InStr(_current, _rowdata, "{$SUBSUBSQL:", CompareMethod.Text)
            If _sqlstart > 0 Then
                _current = _sqlstart + Len("{$SUBSUBSQL:")
                Dim _sqlEnd As Long = InStr(_sqlstart, _rowdata, "}", CompareMethod.Text)
                If _sqlEnd > 0 Then
                    Dim _tag As String = Mid(_rowdata, _current, _sqlEnd - _current)
                    _current = _sqlEnd + Len("}")

                    Dim arrSplits() As String = Split(_tag, ":")
                    If UBound(arrSplits) >= 1 Then
                        Dim _dSetName As String = arrSplits(0)
                        Dim _dSQL As String = arrSplits(1)

                        If Len(_dSetName) > 0 Then
                            Webobj.CustomSQLCommand(_dSQL)
                            Webobj.CustomClearParameters()
                            If _dSets.Contains(_dSetName) = False Then
                                Dim _vp As New ValuePair
                                _vp.MainObject = Webobj.CustomSQLExecuteReturn
                                _vp.Caption = _dSetName
                                _vp.Value = "{$SUBSUBSQL:" & _tag & "}"
                                If _vp.MainObject Is Nothing = False Then
                                    _dSets.Add(_vp, _dSetName)
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Loop





        _current = 1
        _sqlstart = 1
        Dim _rtstart As Long
        Dim _rt1 As Long
        Dim _rt2 As Long

        Do While _sqlstart > 0
            _sqlstart = InStr(_current, _rowdata, "{$RowStart2:", CompareMethod.Text)
            If _sqlstart > 0 Then
                _rt1 = _sqlstart
                _current = _sqlstart + Len("{$RowStart2:")
                Dim _sqlEnd As Long = InStr(_sqlstart, _rowdata, "}", CompareMethod.Text)
                If _sqlEnd > 0 Then
                    Dim _tag As String = Mid(_rowdata, _current, _sqlEnd - _current)
                    _current = _sqlEnd + Len("}")
                    _rtstart = _current
                    Dim _rowEnd As Long = InStr(_current, _rowdata, "{$RowEnd2}", CompareMethod.Text)
                    If _rowEnd > 0 Then
                        _current = _rowEnd + Len("{$RowEnd2}")
                        _rt2 = _current
                        Dim _rowTemplate As String = Mid(_rowdata, _rtstart, _rowEnd - _rtstart)

                        Dim _expandedRow As String = ""
                        'we repeat rowtemplate as mnay times necessary
                        If _dSets.Contains(_tag) Then
                            Dim _vp As ValuePair = _dSets.Item(_tag)

                            Dim _set As DataSet = _vp.MainObject
                            Dim _Counter3 As Integer
                            For _Counter3 = 0 To _set.Tables(0).Rows.Count - 1
                                'support a third level
                                Dim _tmpl As String = _rowTemplate
                                Dim _counter2 As Integer
                                For _counter2 = 0 To _set.Tables(0).Columns.Count - 1
                                    Dim _colName As String = _set.Tables(0).Columns(_counter2).ColumnName
                                    If _set.Tables(0).Rows.Count > 0 Then
                                        'Dim _value As String = FormatForHTML(GlobalFunctions.FormatData(_set.Tables(0).Rows(_Counter3).Item(_colName)))
                                        Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_Counter3).Item(_colName))
                                        Dim _FieldTag As String = "[$" & _vp.Caption & ":" & _colName & "]"

                                        _tmpl = Replace(_tmpl, _FieldTag, _value, , , CompareMethod.Text)
                                    End If
                                Next
                                _expandedRow += _tmpl
                            Next _Counter3

                            'now we replace it INSIDE the html itself and set the _current to wherever it should be
                            _rowdata = Mid(_rowdata, 1, _rt1 - 1) + _expandedRow + Mid(_rowdata, _rt2, Len(_rowdata) - _rt2 + 1)
                            _current = _rt1 + Len(_expandedRow)
                        End If
                    End If
                End If
            End If
        Loop

        'replace all the SUBSUBSQLs
        For _Counter = 1 To _dSets.Count
            Dim _vp As ValuePair = _dSets.Item(_Counter)
            _rowdata = Replace(_rowdata, _vp.Value, "", , , CompareMethod.Text)
            CType(_vp.MainObject, DataSet).Dispose()
        Next _Counter

        Return _rowdata
    End Function

    Public Shared Function FormatForHTML(ByVal Data As String) As String
        Dim _data As String = Data
        _data = Replace(_data, vbCrLf, "<br>")
        _data = Replace(_data, vbCr, "<br>")
        _data = Replace(_data, vbLf, "<br>")
        Return _data

    End Function

    Public Shared Sub CSSShow(ByRef control As Object, ByVal Show As Boolean, Optional fieldType As FIELDTYPES = Nothing)
        control.visible = True
        Try


            If Show = False Then
                control.Style.item("visibility") = "hidden"
                control.Style.item("display") = "none"
            Else
                Try
                    control.Style.Remove("visibility")
                Catch ex As Exception

                End Try
                Try
                    control.Style.Remove("display")
                Catch ex As Exception

                End Try

            End If
        Catch ex As Exception

        End Try
    End Sub

    Public Shared Sub DeleteDynamicCalcFunction(ByRef webobj As ZukamiLib.WebSession, ByRef ListID As Guid, ByRef ListItemID As Guid)
        Dim _funcCallName As String = "DynamicCalc_" & GlobalFunctions.MakePresentableGUID(ListItemID.ToString)
        Dim _funcname As String = "function " & _funcCallName


        Dim _set As DataSet = webobj.Lists_GetRecord(ListID, Nothing)
        If _set.Tables(0).Rows.Count > 0 Then
            Dim _header As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("HiddenHeaders"))
            Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(_header)
            If _coll Is Nothing Then _coll = New Collection

            Dim _counter As Integer
            'we go through the collection object
            For _counter = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(_counter)
                If StrComp(_vp.Caption, _funcCallName, CompareMethod.Text) = 0 Then
                    _coll.Remove(_counter)
                    Exit For
                End If
            Next _counter


            webobj.Lists_UpdateHiddenHeaders(ListID, GlobalFunctions.ValuePairCollToXML(_coll))
        End If


    End Sub

    Public Shared Function CheckButtonExists(FormID As String, ButtonName As String) As Boolean
        Dim webobj As New ZukamiLib.WebSession(GetZukamiSettings)
        webobj.OpenConnection()
        Dim _li As DataSet = webobj.ListItems_Get(New Guid(FormID))
        Dim i As Integer
        For i = 0 To _li.Tables(0).Rows.Count - 1
            Dim _butlist As String = GlobalFunctions.FormatData(_li.Tables(0).Rows(i).Item("ButtonList"))

            Dim _coll As Collection = GlobalFunctions.LoadButtonList(_butlist)
            Dim _counter As Integer
            For _counter = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(_counter)
                If StrComp(_vp.Value3, ButtonName, vbTextCompare) = 0 Then
                    Return True
                End If
            Next _counter
        Next

        webobj.CloseConnection()
        webobj = Nothing
        Return False
    End Function

    Public Shared Function FormatSQLField(ByVal Data As Object, ByVal IsCustomField As Boolean) As String
        Dim result As String = Data
        If IsCustomField = True Then
            result = Data

            ' regardless of IsCustomField or not, [ is required for a valid sql string
            If Not result.Contains("[") AndAlso result.Contains(" ") Then
                result = "[" & result & "]"
            End If
        Else
            result = "[" & Data & "]"
        End If

        Return result
    End Function

    Public Shared Function FormatJSID(ByVal Data As Object) As String
        Return Replace(Data, "-", "")
    End Function

    Public Shared Function GetAppResourceTypeName(ByVal AppResourceType As ZukamiLib.WebSession.APPRESOURCETYPES) As String
        Select Case AppResourceType
            Case ZukamiLib.WebSession.APPRESOURCETYPES.CALVIEW
                Return "Calendar view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.CHARTVIEW
                Return "Chart view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.SCHEDULERVIEW
                Return "Calendar view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.COMPOSITEVIEW
                Return "Webpage"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.CUSTOM
                Return "Custom URL"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.DASHBOARDVIEW
                Return "Dashboard view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.FORM
                Return "Data-entry form"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.MYSUBMISSIONSVIEW
                Return "My submissions"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHFORM
                Return "Search form"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHVIEW
                Return "Search view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.SETTINGSVIEW
                Return "Settings"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.SUBMISSIONSEARCHVIEW
                Return "Submission search"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.TABULARVIEW
                Return "Tabular view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.TASKINBOXVIEW
                Return "Task Inbox"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.IMAGEMAPVIEW
                Return "Imagemap view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.TREEVIEW
                Return "Tree view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.MAPVIEW
                Return "Map view"
            Case ZukamiLib.WebSession.APPRESOURCETYPES.REPORTVIEW
                Return "Report view"
            Case Else
                Return "Unknown"
        End Select
    End Function

    Public Shared Function FormatLargeInteger(ByVal Data As Integer) As String
        Return Format(Data, "###,###,###,##0")
    End Function



    Public Shared Function MakePresentableGUID(ByVal GUID As String) As String
        Dim _id As String = Replace(GUID, "-", "")
        _id = UCase(_id)
        Return _id
    End Function

    Public Shared Function CreateLabelArgs(ByVal LabelText As String, ByVal Size As Integer, ByVal Bold As Boolean, ByVal Italic As Boolean) As String
        Return LabelText & "\,\" & CStr(Size) & "\,\" & CStr(Bold) & "\,\" & CStr(Italic)
    End Function

    Public Shared Function DressUpSQLField(ByVal Fieldname As String) As String
        If InStr(Fieldname, ".", CompareMethod.Text) > 0 Then
            Return Fieldname
        Else
            Return "[" & Fieldname & "]"
        End If
    End Function

    Public Shared Sub SendEmail(ByRef WebSessionObj As ZukamiLib.WebSession, ByVal ToList As String, ByVal CCList As String, ByVal BCCList As String, ByVal Subject As String, ByVal Content As String, Optional ByVal Attachments As String = "")
        'Send action e-mail
        Try
            Dim _template As DataSet = WebSessionObj.EmailTemplate_Get(New Guid(ZukamiLib.WebSession.TEMPLATE_GENERIC))
            If _template.Tables(0).Rows.Count > 0 Then
                Dim strContent As String = GlobalFunctions.FormatData(_template.Tables(0).Rows(0).Item("Content"))
                'Now we replace the content with various tags
                strContent = Replace(strContent, "{$BODY}", Content)
                WebSessionObj.OutgoingMails_Insert(ToList, CCList, BCCList, Subject, strContent, Attachments, 0)
            End If
        Catch ex As Exception

        End Try
    End Sub

    Private Shared Function GetFieldJScriptTag(ByRef webobj As ZukamiLib.WebSession, ByRef ListID As Guid, ByRef FType As GlobalFunctions.FIELDTYPES, ByVal Tag As String) As String
        Dim _listItemset As DataSet = webobj.ListItems_GetByName(Tag, ListID)
        If _listItemset.Tables(0).Rows.Count > 0 Then
            Dim _listItemID As Guid = GlobalFunctions.GetGUID(_listItemset.Tables(0).Rows(0).Item("ListItemID"))
            FType = GlobalFunctions.FormatInteger(_listItemset.Tables(0).Rows(0).Item("FieldType"))
            Select Case FType
                Case GlobalFunctions.FIELDTYPES.FT_DROPDOWN
                    Return "[$Formengine]_mf_" & _listItemID.ToString & "_ddlGroup"
                Case Else
                    Return "[$Formengine]_mf_" & _listItemID.ToString
            End Select

        Else
            FType = FIELDTYPES.FT_SHORTTEXT
            Return ""
        End If
    End Function

    Public Shared Function SubstituteJScriptTags(ByRef WebObj As ZukamiLib.WebSession, ByVal JScript As String, ByRef ListID As Guid) As String
        Dim _done As Boolean = False
        Dim _position As Integer = 1
        Dim _varIdx As Integer = 1
        Dim _formatted As String = ""
        Dim _text As String = JScript

        Do While _done = False
            Dim _tag1 As Integer = InStr(_position, _text, "[$")
            If _tag1 = 0 Then GoTo Done
            Dim _tag2 As Integer = InStr(_tag1, _text, "]")
            If _tag2 = 0 Then GoTo Done

            Dim _tag As String = Mid(_text, _tag1 + 2, _tag2 - (_tag1 + 2))
            Dim _HTML As String = Mid(_text, _position, _tag1 - _position)
            If Len(_HTML) > 0 Then _formatted += _HTML

            Dim _jscripttag As String = ""
            Dim FType As GlobalFunctions.FIELDTYPES

            _jscripttag = GetFieldJScriptTag(WebObj, ListID, FType, _tag)

            Dim _fieldmap As String = ""
            _fieldmap = _jscripttag
            _formatted += _fieldmap


            _position = _tag2 + 1
            If _position > Len(_text) Then _done = True
            GoTo ContinueLoop
Done:
            Dim _literal As String = Mid(_text, _position, Len(_text) - _position + 1)
            _formatted += _literal
            _done = True
            Exit Do
ContinueLoop:
        Loop
        Return _formatted
    End Function

    Public Shared Sub LoadMonths(ByRef ddlMonths As DropDownList)
        Dim lngcounter As Integer
        For lngcounter = 1 To 12
            Dim _item As New System.Web.UI.WebControls.ListItem(MonthName(lngcounter), lngcounter)
            ddlMonths.Items.Add(_item)
        Next lngcounter
    End Sub

    Public Shared Sub ReloadDatasources(ByRef ddDatasources As DropDownList, ByVal AppID As Guid)
        Dim _webobj As New ZukamiLib.WebSession(GetZukamiSettings)
        _webobj.OpenConnection()

        ddDatasources.Items.Clear()
        Dim _item2 As New System.Web.UI.WebControls.ListItem("[Default Database]", "")
        ddDatasources.Items.Add(_item2)
        Dim _set As DataSet = _webobj.Datasources_GetAll(AppID)
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _zdsn As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("ZDSN"))
            Dim _item As New System.Web.UI.WebControls.ListItem(_zdsn, _zdsn)
            ddDatasources.Items.Add(_item)
        Next _counter


        _webobj.CloseConnection()
        _webobj = Nothing
    End Sub

    Public Shared Function GetDatasourceConnectionString(ByRef WebObj As ZukamiLib.WebSession, ByRef AppID As Guid, ByVal ZDSN As String) As ZukamiLib.ZukamiSettings
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        If Len(ZDSN) > 0 Then
            Dim _set As DataSet = WebObj.Datasources_GetRecord(AppID, ZDSN)
            If _set.Tables(0).Rows.Count > 0 Then
                _settings.PrimaryConnectionString = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Connectionstring"))
            End If
        End If
        Return _settings
    End Function


    Public Shared Function GetDynamicSQLString(ByRef Webobj As ZukamiLib.WebSession, ByVal CodeID As String, ByVal DynamicValue As String) As String
        If Len(DynamicValue) = 0 Then Return ""

        If Len(DynamicValue) >= 3 Then
            Dim _key As String = LCase(Mid(DynamicValue, 1, 3))
            Dim _data As String = Mid(DynamicValue, 4, Len(DynamicValue) - 3)
            Select Case _key
                Case "ss,"
                    Return _data
                Case "sq,"
                    Return _data
                Case "cd,"
                    Dim CompilationError As String = ""
                    If GlobalFunctions.CacheCode(_data, CodeID, ZukamiLib.ZukamiCode.FORMULATYPES.FORMULATYPE_STRING, CompilationError) = False Then
                        ValidationError.Display(String.Format(DbResT("Script compilation error: {0}"), CompilationError))
                    Else
                        Dim _valRet As String = GlobalFunctions.RunCode(CodeID, GlobalFunctions.CreateScribe)
                        Return _valRet
                    End If
            End Select
        End If
        Return ""
    End Function

    Public Shared Function IsDynamicLinkTag(ByVal LinkData As String) As Boolean
        If Len(LinkData) >= 3 Then
            Dim _key As String = LCase(Mid(LinkData, 1, 3))
            Select Case _key
                Case "ss,", "sq,", "cd,", "rs,"
                    Return True
            End Select
        End If
        Return False
    End Function

    Public Shared Function LaunchWorkflow(ByVal FormID As String, ByVal RecordID As String, ByVal Remarks As String, Optional ByVal TargetUserID As String = "", Optional ByVal TargetUserFullName As String = "") As Guid
        LaunchWorkflow = Guid.Empty
        Dim _Settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim webObj As ZukamiLib.WebSession = Nothing

        webObj = New ZukamiLib.WebSession(_Settings)
        webObj.OpenConnection()
        Dim _formset As DataSet = webObj.forms_GetRecord(New Guid(FormID), Nothing)
        If _formset.Tables(0).Rows.Count > 0 Then
            Dim _wflowguid As Guid = GlobalFunctions.GetGUID(_formset.Tables(0).Rows(0).Item("WorkflowID"))
            If _wflowguid <> Guid.Empty Then
                Dim InitiateWorkflowSession As DataSet = webObj.InitiateFormWorkflowSession(_wflowguid, New Guid(FormID), New Guid(RecordID), Remarks, TargetUserID, TargetUserFullName)
                Dim _instanceID As Guid = Guid.Empty
                If InitiateWorkflowSession.Tables(0).Rows.Count > 0 Then
                    _instanceID = GlobalFunctions.GetGUID(InitiateWorkflowSession.Tables(0).Rows(0).Item("InstanceID"))

                    Dim oriItem As New MSMQMessage(_Settings.Queue)
                    oriItem.MessageType = MSMQMessage.MessageTypes.MT_NEWSESSION
                    oriItem.SessionGUID = GlobalFunctions.FormatData(_instanceID)
                    oriItem.SendMessage()
                    LaunchWorkflow = _instanceID
                End If
            End If
        End If
        webObj.CloseConnection()
        webObj = Nothing

    End Function

    Public Shared Function ResolveLink(ByRef Webobj As ZukamiLib.WebSession, ByVal ViewID As String, ByVal LinkType As String, ByVal LinkData As String, ByVal GoParent As Boolean, ByRef AppID As Guid, Optional ByRef JScript As String = "") As String
        JScript = ""
        If Len(LinkData) = 0 Then Return ""

        LinkData = SubstituteSpecialTags(Webobj, LinkData, Nothing)

        If Len(LinkData) >= 3 Then
            Dim _key As String = LCase(Mid(LinkData, 1, 3))
            Dim _data As String = Mid(LinkData, 4, Len(LinkData) - 3)
            Select Case _key
                Case "js,"
                    JScript = _data
                    Return ""
                Case "ss,"
                    Return _data
                Case "sq,"
                    Webobj.CustomSQLCommand(_data)
                    Dim _val As String = ""
                    Dim _data2 As DataSet = Webobj.CustomSQLExecuteReturn
                    If _data2.Tables(0).Rows.Count > 0 Then
                        _val = GlobalFunctions.FormatData(_data2.Tables(0).Rows(0).Item(0))
                    End If
                    Return _val
                Case "cd,"
                    Dim CompilationError As String = ""
                    Dim _CodeID As String = ViewID & "_" & LinkType
                    If GlobalFunctions.CacheCode(_data, _CodeID, ZukamiLib.ZukamiCode.FORMULATYPES.FORMULATYPE_STRING, CompilationError) = False Then
                        ValidationError.Display(String.Format(DbResT("Script compilation error: {0}"), CompilationError))
                    Else
                        Dim _valRet As String = GlobalFunctions.RunCode(_CodeID, GlobalFunctions.CreateScribe)
                        Return _valRet
                    End If
                Case "rs,"
                    Dim arrValues() As String = Split(_data, GlobalFunctions.JSCRIPTSEPARATOR)
                    If UBound(arrValues) = 1 Then
                        'now we will divide
                        Dim _tabType As Integer = GlobalFunctions.FormatInteger(arrValues(0))
                        Dim _resID As String = arrValues(1)
                        Dim _go As String = IIf(GoParent, "../", "")
                        Select Case _tabType
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.FORM
                                Return _go & Navigator.GetJScriptURL("FillForm", _resID, AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.TABULARVIEW
                                Return _go & Navigator.GetJScriptURL("LaunchView", _resID, AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.CALVIEW
                                Return _go & Navigator.GetJScriptURL("LaunchCalView", _resID, AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.CHARTVIEW
                                Return _go & Navigator.GetJScriptURL("LaunchChartView", _resID, AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.COMPOSITEVIEW
                                Return _go & Navigator.GetJScriptURL("LaunchCompositeView", _resID, AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHFORM
                                Return _go & Navigator.GetJScriptURL("SearchForm", , _resID, AppID.ToString, System.Web.HttpContext.Current.Request.QueryString.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHVIEW
                                Return _go & Navigator.GetJScriptURL("SearchView", ViewID, _resID, AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.DASHBOARDVIEW
                                Return _go & Navigator.GetJScriptURL("Dashboard", AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.MAPVIEW
                                Return _go & Navigator.GetJScriptURL("MapViewer", AppID.ToString, _resID)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.REPORTVIEW
                                Return _go & Navigator.GetJScriptURL("ReportViewer", AppID.ToString, _resID)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.MYSUBMISSIONSVIEW
                                Return _go & Navigator.GetJScriptURL("MySubmissions", AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.SETTINGSVIEW
                                Return _go & Navigator.GetJScriptURL("Settings", AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.TASKINBOXVIEW
                                Return _go & Navigator.GetJScriptURL("Inbox", AppID.ToString)
                            Case ZukamiLib.WebSession.APPRESOURCETYPES.SUBMISSIONSEARCHVIEW
                                Return _go & Navigator.GetJScriptURL("Search", , , AppID.ToString)
                        End Select
                    End If
                Case Else
                    Return LinkData
            End Select
        Else
            'treat as static
            Return LinkData
        End If
        Return ""
    End Function
    Public Shared Function CreateAppTab(ByRef WebObj As ZukamiLib.WebSession, ByRef AppID As Guid) As Table
        Dim _set As DataSet = WebObj.AppTabs_Get(AppID)
        Dim _tbl As New Table
        _tbl.ID = "AppTabTable"
        _tbl.BorderStyle = BorderStyle.None
        _tbl.CellSpacing = 0
        _tbl.CellPadding = 0

        If GlobalFunctions.ISSPRING = True Then
            _tbl.CssClass = "task_inbox_nav"
        End If

        _tbl.Height = New Unit(27, UnitType.Pixel)
        Dim _row As New TableRow
        _tbl.Rows.Add(_row)

        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1




            Dim _lbl As New HyperLink

            If GlobalFunctions.ISSPRING = True Then
                _lbl.CssClass = "ti_nav_TabLink"
            Else
                _lbl.CssClass = "app_TabLink"
            End If


            _lbl.Text = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("TabCaption"))

            Dim _tabType As ZukamiLib.WebSession.APPRESOURCETYPES = GlobalFunctions.FormatInteger(_set.Tables(0).Rows(_counter).Item("TabResourceType"))
            Dim _resID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("TabResourceID"))

            Dim _currentUser As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Select Case _tabType
                Case ZukamiLib.WebSession.APPRESOURCETYPES.FORM
                    If GlobalFunctions.HasFormPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("FillForm", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.TABULARVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("LaunchView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.CALVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("LaunchCalView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SCHEDULERVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("LaunchScheduleView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.IMAGEMAPVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("LaunchImageMapView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.MAPVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("MapViewer", AppID.ToString, _resID)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.REPORTVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("ReportViewer", AppID.ToString, _resID)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.CHARTVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("LaunchChartView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.TREEVIEW
                    If GlobalFunctions.HasViewPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("LaunchTreeView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.COMPOSITEVIEW
                    If GlobalFunctions.HasCompositePagePermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("LaunchCompositeView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHFORM
                    If GlobalFunctions.HasFormPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "S") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("SearchForm", , _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHVIEW
                    If GlobalFunctions.HasFormPermissions(WebObj, _currentUser.CurrentUserGUID, New Guid(_resID), "S") = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("SearchForm", , _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.DASHBOARDVIEW
                    If GlobalFunctions.CanViewDashboard(_currentUser) = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("Dashboard", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.MYSUBMISSIONSVIEW
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("MySubmissions", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SETTINGSVIEW
                    If GlobalFunctions.CanManageSettings(_currentUser) = False Then GoTo NextTab
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("Settings", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.TASKINBOXVIEW
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("Inbox", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SUBMISSIONSEARCHVIEW
                    _lbl.NavigateUrl = Navigator.GetJScriptURL("Search", , , AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.CUSTOM
                    Dim _customLink As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("TabCustomLink"))
                    _lbl.NavigateUrl = _customLink
            End Select


            If GlobalFunctions.ISSPRING = True Then
                Dim _cell As New TableCell
                _cell.CssClass = "nav_box"
                _cell.Controls.Add(_lbl)
                _row.Cells.Add(_cell)

                Dim _cell2 As New TableCell
                _cell2.CssClass = "nav_sep"
                Dim _lbl2 As New Label
                _lbl2.Text = "&nbsp;"
                _cell2.Controls.Add(_lbl2)
                _row.Cells.Add(_cell2)
            Else
                Dim _cell As New TableCell
                _cell.Width = New Unit(5, UnitType.Pixel)
                Dim _img As New Image
                _img.BorderStyle = BorderStyle.None
                _img.ImageUrl = "images/icoAppTabLeftBar.gif"
                _cell.Controls.Add(_img)
                _row.Cells.Add(_cell)

                _cell = New TableCell
                _cell.HorizontalAlign = HorizontalAlign.Center
                _cell.Attributes.Add("background", "images/icoAppTabFiller.png")
                _cell.Controls.Add(_lbl)
                _cell.Wrap = False
                _row.Cells.Add(_cell)


                _cell = New TableCell
                _cell.Width = New Unit(5, UnitType.Pixel)
                _img = New Image
                _img.BorderStyle = BorderStyle.None
                _img.ImageUrl = "images/icoapptabrightBar.gif"
                _cell.Controls.Add(_img)
                _row.Cells.Add(_cell)

                _cell = New TableCell
                _cell.Width = New Unit(10, UnitType.Pixel)
                _row.Cells.Add(_cell)
            End If


NextTab:
        Next


        Return _tbl
    End Function

    Public Shared Function IsDisplayableImage(ByVal Filename As String) As Boolean
        Dim _ext As String = System.IO.Path.GetExtension(Filename)
        Select Case LCase(_ext)
            Case ".jpg", ".jpeg", ".gif", ".png"
                Return True
            Case Else
                Return False
        End Select
    End Function

    Public Shared Function SubstituteSpecialTags(ByRef WebObj As ZukamiLib.WebSession, ByVal Data As String, ByRef FilterArgs As Collection) As String
        Try
            'logger.Debug("..., Data: " + FormatData(Data) + ", ...")

            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()


            Dim _temp As String = Data
            _temp = Replace(_temp, "[$CurrentUser.UserID]", "'" + _settings.CurrentUserGUID.ToString + "'", vbTextCompare)
            _temp = Replace(_temp, "[$CurrentUser.ADCredential]", GlobalFunctions.GetWinADName, vbTextCompare)
            _temp = Replace(_temp, "[$CurrentUser.ADCredential.URLEncoded]", System.Web.HttpContext.Current.Server.UrlEncode(GlobalFunctions.GetWinADName), vbTextCompare)

            If InStr(1, _temp, "[$CurrentUser.DepartmentID]", CompareMethod.Text) > 0 Then
                'we will replace departmentid
                Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
                If _set.Tables(0).Rows.Count > 0 Then
                    _temp = Replace(_temp, "[$CurrentUser.DepartmentID]", "'" + GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("DepartmentID")) + "'", vbTextCompare)
                End If
            ElseIf InStr(1, _temp, "[$CurrentUser.Username]", CompareMethod.Text) > 0 Then
                Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
                If _set.Tables(0).Rows.Count > 0 Then
                    _temp = Replace(_temp, "[$CurrentUser.Username]", "'" + GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Username")) + "'", vbTextCompare)
                End If
            ElseIf InStr(1, _temp, "[$CurrentUser.DirectSuboordinates]", CompareMethod.Text) > 0 Then
                'we will replace directsuboordinates
                Dim _set As DataSet = WebObj.Suboordinates_Get()
                If _set.Tables(0).Rows.Count > 0 Then
                    Dim _list As String = ""
                    Dim _counter As Integer = 0
                    For _counter = 0 To _set.Tables(0).Rows.Count - 1
                        Dim _userid As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("UserID"))
                        _list += ",'" + _userid + "'"
                    Next _counter
                    _temp = Replace(_temp, "[$CurrentUser.DirectSuboordinates]", "('" + _settings.CurrentUserGUID.ToString + "'" + _list + ")", vbTextCompare)
                Else
                    'no suboordinates
                    _temp = Replace(_temp, "[$CurrentUser.DirectSuboordinates]", "('" + _settings.CurrentUserGUID.ToString + "')", vbTextCompare)
                End If
            ElseIf InStr(1, _temp, "[$CurrentUser.AllSuboordinates]", CompareMethod.Text) > 0 Then
                'we will replace directsuboordinates
                Dim _list As String = GetSuboordList(WebObj)
                _temp = Replace(_temp, "[$CurrentUser.AllSuboordinates]", "('" + _settings.CurrentUserGUID.ToString + "'" + _list + ")", vbTextCompare)
            ElseIf InStr(1, _temp, "[$CurrentUser.RoleUsers]", CompareMethod.Text) > 0 Then
                'we will replace directsuboordinates
                Dim _list As String = GetRoleUsers(WebObj)
                _temp = Replace(_temp, "[$CurrentUser.RoleUsers]", "('" + _settings.CurrentUserGUID.ToString + "'" + _list + ")", vbTextCompare)
            ElseIf InStr(1, _temp, "[$CurrentUser.Roles]", CompareMethod.Text) > 0 Then
                'we will replace directsuboordinates
                Dim _list As String = GetRoles(WebObj)
                _temp = Replace(_temp, "[$CurrentUser.Roles]", "(NULL" & _list & ")", vbTextCompare)
            ElseIf InStr(1, _temp, "[$CurrentUser.Supervisor]", CompareMethod.Text) > 0 Then
                'we will replace directsuboordinates
                Dim _list As Guid = GlobalFunctions.Supervisor(_settings.CurrentUserGUID)
                _temp = Replace(_temp, "[$CurrentUser.Supervisor]", "'" & _list.ToString & "'", vbTextCompare)
            ElseIf InStr(1, _temp, "[$CurrentUser.HOD]", CompareMethod.Text) > 0 Then
                'we will replace directsuboordinates
                Dim _list As Guid = GlobalFunctions.HOD(_settings.CurrentUserGUID, 1)
                _temp = Replace(_temp, "[$CurrentUser.HOD]", "'" & _list.ToString & "'", vbTextCompare)
            ElseIf InStr(1, _temp, "[$CurrentUser.AsstHOD]", CompareMethod.Text) > 0 Then
                'we will replace directsuboordinates
                Dim _list As Guid = GlobalFunctions.HOD(_settings.CurrentUserGUID, 2)
                _temp = Replace(_temp, "[$CurrentUser.AsstHOD]", "'" & _list.ToString & "'", vbTextCompare)
            End If


            'we go through the rest to collect thevalues

            Dim _nomore As Boolean = False
            Dim _position As Long = 1
            Dim _othertags As New Collection
            Do While _nomore = False
                Dim lngStart As Long = InStr(_position, _temp, "[$", CompareMethod.Text)
                If lngStart > 0 Then
                    Dim lngEnd As Long = InStr(lngStart, _temp, "]", CompareMethod.Text)
                    If lngEnd > 0 Then
                        Dim _tag As String = Mid(_temp, lngStart, lngEnd - lngStart + 1)
                        If _othertags.Contains(_tag) = False Then
                            _othertags.Add(_tag, _tag)
                        End If
                        _position = lngEnd + 1
                    Else
                        _nomore = True
                    End If
                Else
                    _nomore = True
                End If
            Loop

            For _counter = 1 To _othertags.Count
                Dim _tagname As String = _othertags.Item(_counter)


                If StrComp(Left(_tagname, Len("[$Querystring:")), "[$Querystring:", CompareMethod.Text) = 0 Then
                    Dim _qsTag As String = Mid(_tagname, Len("[$Querystring:") + 1, Len(_tagname) - 1 - Len("[$Querystring:"))
                    _temp = Replace(_temp, _tagname, System.Web.HttpContext.Current.Request.QueryString(_qsTag), , , CompareMethod.Text)
                ElseIf StrComp(Left(_tagname, Len("[$Session:")), "[$Session:", CompareMethod.Text) = 0 Then
                    Dim _qsTag As String = Mid(_tagname, Len("[$Session:") + 1, Len(_tagname) - 1 - Len("[$Session:"))
                    _temp = Replace(_temp, _tagname, FormatData(System.Web.HttpContext.Current.Session(_qsTag)), , , CompareMethod.Text)
                Else
                    If FilterArgs Is Nothing = False Then
                        If FilterArgs.Contains(_tagname) Then
                            _temp = Replace(_temp, _tagname, FilterArgs.Item(_tagname), , , CompareMethod.Text)
                        End If
                    End If
                End If
            Next
            'logger.Debug("_temp: " + FormatData(_temp))
            Return _temp
        Catch ex As Exception
            logger.Error(ex)
            Return Data
        End Try
    End Function

    Public Shared Function Supervisor(ByRef Submitter As Guid) As Guid
        '=============================================================
        'Open database connection
        '=============================================================
        Dim _webObject As New ZukamiLib.WebSession(GetZukamiSettings)
        _webObject.OpenConnection()

        Dim _set As DataSet = _webObject.Users_GetRecord(Submitter)
        If _set.Tables(0).Rows.Count = 0 Then
            Supervisor = Guid.Empty
        Else
            Dim _guid As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(0).Item("Supervisor"))
            If _guid = Guid.Empty Then
                Supervisor = Guid.Empty
            Else
                Supervisor = _guid
            End If
        End If
        _set.Dispose()
        _set = Nothing
        '=============================================================
        'Close database connection
        '=============================================================
        _webObject.CloseConnection()
        _webObject = Nothing
    End Function

    Public Shared Function HOD(ByRef Submitter As Guid, ByVal Level As Integer) As Guid
        '=============================================================
        'Open database connection
        '=============================================================
        Dim _webObject As New ZukamiLib.WebSession(GetZukamiSettings)
        _webObject.OpenConnection()

        HOD = _webObject.HeadOfDepartment_Get(Submitter, Level)

        '=============================================================
        'Close database connection
        '=============================================================
        _webObject.CloseConnection()
        _webObject = Nothing
    End Function

    Private Shared Sub GetSuboord(ByRef WebObj As ZukamiLib.WebSession, ByRef FullColl As Collection, ByRef UserID As Guid)
        Dim _set As DataSet = WebObj.Suboordinates_Get(UserID)
        If _set.Tables(0).Rows.Count > 0 Then
            'Dim _counter As Integer
            'loop through all users
            Dim _count As Integer
            For _count = 0 To _set.Tables(0).Rows.Count - 1
                Dim _userid As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_count).Item("UserID"))
                If Len(_userid.ToString) > 0 Then
                    If _userid <> Guid.Empty Then
                        If FullColl.Contains(_userid.ToString) = False Then
                            FullColl.Add(_userid.ToString, _userid.ToString)
                            GetSuboord(WebObj, FullColl, _userid)
                        End If
                    End If
                End If
            Next
        End If
    End Sub

    Private Shared Function GetSuboordList(ByRef WebObj As ZukamiLib.WebSession) As String
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _users As New Collection
        Dim _currentuser As Guid = _settings.CurrentUserGUID

        GetSuboord(WebObj, _users, _currentuser)

        Dim _list As String = ""
        Dim _counter As Integer = 0
        For _counter = 1 To _users.Count
            _list += ",'" & _users.Item(_counter) & "'"
        Next _counter
        Return _list

    End Function

    Private Shared Function GetRoles(ByRef WebObj As ZukamiLib.WebSession) As String
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _users As New Collection
        Dim _currentuser As Guid = _settings.CurrentUserGUID

        Dim _list As String = ""
        Dim _set As DataSet = WebObj.Groups_GetByUser(_currentuser)
        Dim _counter As Integer = 0
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _groupID As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("GroupID"))
            _list += ",'" & _groupID.ToString & "'"
        Next _counter
        Return _list

    End Function

    Private Shared Function GetRoleUsers(ByRef WebObj As ZukamiLib.WebSession) As String
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _users As New Collection
        Dim _currentuser As Guid = _settings.CurrentUserGUID

        Dim _set As DataSet = WebObj.Groups_GetByUser(_currentuser)
        Dim _counter As Integer = 0
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _groupID As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("GroupID"))
            Dim _uSet As DataSet = WebObj.GroupUsers_Get(_groupID)

            Dim _counter2 As Integer = 0
            For _counter2 = 0 To _uSet.Tables(0).Rows.Count - 1
                Dim _uID As Guid = GlobalFunctions.GetGUID(_uSet.Tables(0).Rows(_counter2).Item("UserID"))
                If _uID <> Guid.Empty Then
                    If Len(_uID.ToString) > 0 Then
                        If _users.Contains(_uID.ToString) = False Then
                            _users.Add(_uID.ToString, _uID.ToString)
                        End If
                    End If
                End If

            Next _counter2
        Next _counter


        Dim _list As String = ""
        For _counter = 1 To _users.Count
            _list += ",'" & _users.Item(_counter) & "'"
        Next _counter
        Return _list

    End Function

    Public Shared Sub AddTag(ByRef tblReference As Table, ByVal TagName As String, ByVal Description As String)
        Dim _row As New TableRow
        _row.CssClass = "label_normal"
        tblReference.Rows.Add(_row)
        Dim _cell As New TableCell
        Dim _lbl As New Label()
        _lbl.Text = TagName
        _lbl.Font.Bold = True
        _cell.Controls.Add(_lbl)
        _row.Cells.Add(_cell)

        _cell = New TableCell
        _lbl = New Label
        _lbl.Text = Description
        _cell.Controls.Add(_lbl)
        _row.Cells.Add(_cell)
    End Sub

    Public Shared Sub LoadAllTags(ByRef tblReference As Table, ByRef AppID As Guid)
        Dim _webobj As New ZukamiLib.WebSession(GetZukamiSettings)
        _webobj.OpenConnection()

        Dim _set As DataSet = _webobj.SubstitutionStrings_Get(AppID)
        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            AddTag(tblReference, "<$" & GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("StringName")) & ">", GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Description")))
        Next _counter

        _webobj.CloseConnection()
        _webobj = Nothing
    End Sub

    Public Shared Function CanViewDashboard(ByRef PermissionsSettings As ZukamiLib.ZukamiSettings) As Boolean
        If PermissionsSettings.PermVD = True Or PermissionsSettings.InAdminGroup = True Then
            Return True
        Else
            Return False
        End If
    End Function

    Public Shared Function CanManageSettings(ByRef PermissionsSettings As ZukamiLib.ZukamiSettings) As Boolean
        If PermissionsSettings.PermMS = True Or PermissionsSettings.InAdminGroup = True Then
            Return True
        Else
            Return False
        End If
    End Function

    Public Shared Function GetUniqueRunningNumber(ByRef webobj As ZukamiLib.WebSession, ByVal Tag As String) As Long
        Dim _set As DataSet = webobj.Autonumbers_Get(Tag)
        If _set.Tables(0).Rows.Count > 0 Then
            Return GlobalFunctions.FormatInteger(_set.Tables(0).Rows(0).Item(0))
        Else
            Return 1
        End If
    End Function

    Public Shared Function CreateDynamicFilterTag(ByVal Field As String, ByVal OperatorSymbol As String, ByVal Value As String) As String
        Return "DV" & Field & "\,\" & OperatorSymbol & "\,\" & Value
    End Function

    Public Shared Function CreateDynamicAssignmentTag(ByVal Field As String, ByVal OperatorSymbol As String, ByVal Value As String, Optional Subformid As String = "") As String
        Return "DA" & Field & "\,\" & OperatorSymbol & "\,\" & Value & IIf(Len(Subformid) > 0, "\,\", "") & Subformid
    End Function

    Public Shared Function CreateCustomFieldAssignmentTag(ByVal Field As String, ByVal OperatorSymbol As String, ByVal Value As String, Optional Subformid As String = "") As String
        Return "CA" & Field & "\,\" & OperatorSymbol & "\,\" & Value & IIf(Len(Subformid) > 0, "\,\", "") & Subformid
    End Function

    Public Shared Function CreateFormFieldFilterTag(ByVal Field As String, ByVal OperatorSymbol As String, ByVal Value As String) As String
        Return "FF" & Field & "\,\" & OperatorSymbol & "\,\" & Value
    End Function

    Public Shared Sub SplitFilterTags(ByVal FullTag As String, ByRef FilterTag As String, ByRef Field As String, ByRef OperatorSymbol As String, ByRef Value As String)
        FilterTag = Mid(FullTag, 1, 2)
        Dim _Remainder As String = Mid(FullTag, 3, Len(FullTag) - 2)

        Dim arrRemainders() As String = Split(_Remainder, "\,\")
        If UBound(arrRemainders) >= 2 Then
            Field = arrRemainders(0)
            OperatorSymbol = arrRemainders(1)
            Value = arrRemainders(2)
        End If
    End Sub

    Public Shared Sub SplitFormatting(ByRef Full As String, ByRef Formatting As String, ByRef Args As String)
        Dim arrsplits() As String = Split(Full, GlobalFunctions.GLOBSTGSSEPARATOR)
        Formatting = arrsplits(0)
        If UBound(arrsplits) >= 1 Then
            Args = arrsplits(1)
        End If

    End Sub

    Public Shared Sub SplitArgumentTags(ByVal FullTag As String, ByRef FilterTag As String, ByRef Field As String, ByRef OperatorSymbol As String, ByRef Value As String, Optional ByRef SubformID As String = "")
        FilterTag = Mid(FullTag, 1, 2)
        Dim _Remainder As String = Mid(FullTag, 3, Len(FullTag) - 2)

        Dim arrRemainders() As String = Split(_Remainder, "\,\")
        If UBound(arrRemainders) >= 2 Then
            Field = arrRemainders(0)
            OperatorSymbol = arrRemainders(1)
            Value = arrRemainders(2)
            If UBound(arrRemainders) >= 3 Then
                SubformID = arrRemainders(3)
            End If
        End If
    End Sub


    Public Shared Function CreateStaticFilterTag(ByVal Field As String, ByVal OperatorSymbol As String, ByVal Value As String) As String
        Return "FV" & Field & "\,\" & OperatorSymbol & "\,\" & Value
    End Function

    Public Shared Function GetNameCounter(ByRef WebObj As ZukamiLib.WebSession, ByVal ItemID As Guid) As Integer
        Dim _set As DataSet = WebObj.Namecounters_Get(ItemID)
        If _set.Tables(0).Rows.Count > 0 Then
            Return GlobalFunctions.FormatInteger(_set.Tables(0).Rows.Item(0).Item("Counter")) + 1
        Else
            Return 1
        End If
    End Function

    Public Shared Function ColumnShowAvailable(ByVal FieldType As GlobalFunctions.FIELDTYPES) As Boolean
        Select Case FieldType
            Case FIELDTYPES.FT_BUTTON, FIELDTYPES.FT_FRAME, FIELDTYPES.FT_HEADER, FIELDTYPES.FT_LABEL, FIELDTYPES.FT_TABLE
                Return False
            Case Else
                Return True
        End Select
    End Function

    Public Shared Sub DisplayError(ByVal ErrorType As GlobalFunctions.ERRORTYPES, ByVal CustomError As String)
        'Dim CurrentUICulture As CultureInfo = Thread.CurrentThread.CurrentUICulture
        logger.Debug("CurrentUICulture: " + Newtonsoft.Json.JsonConvert.SerializeObject(CultureInfo.CurrentUICulture))


        Select Case ErrorType
            Case GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD
                'ValidationError.Display("You have left the " & CustomError & " field empty. Please fill in all the compulsory fields (marked *)")
                ValidationError.Display(String.Format(DbResT("You have left the {0} field empty. Please fill in all the compulsory fields (marked *)"), CustomError))
            Case GlobalFunctions.ERRORTYPES.ERROR_PROHIBITEDTAGFOUND
                ValidationError.Display(String.Format(DbResT("Prohibited tags (eg: &lt;xxxx&gt;) were found in the [{0}] field. Please remove any such tags in your data"), CustomError))
            Case GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, GlobalFunctions.ERRORTYPES.ERROR_INPUTMASKFAILED, GlobalFunctions.ERRORTYPES.ERROR_TOOLONG
                ValidationError.Display(CustomError)
        End Select
    End Sub

    Public Shared localizations As DataTable = Nothing
    Public Shared Function DbResT(resId As String) As String
        Dim result As String = resId

        If localizations Is Nothing Then
            Dim sql As String = "select * from Localizations"
            localizations = GetDataTableBySql(sql)
        End If

        Dim selector As String = String.Format("ResourceId = '{0}' and LocaleId = '{1}'",
                                                resId.Replace("'", "''"),
                                                CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.Replace("'", "''"))
        logger.Trace(selector)
        Dim rows() As DataRow = localizations.Select(selector)
        If rows.Count > 0 Then
            result = FormatData(rows(0).Item("Value"))
        End If
        logger.Trace(result)

        Return result ' DbRes.T(resId, resourceSet:="Resources")
    End Function

    Private Shared Function ProhibitedTagsFound(ByVal InputData As String) As Boolean
        Dim lngTagStart As Long = InStr(1, InputData, "<", CompareMethod.Text)
        If lngTagStart = 0 Then Return False
        Dim lngtagend As Long = InStr(lngTagStart, InputData, ">", CompareMethod.Text)
        If lngtagend = 0 Then Return False
        Return True
    End Function


    Public Shared Function CommitZFieldToDataRow(ByRef ZFieldObj As ZField, ByRef DataRow As DataRow, Optional ByVal DoValidate As Boolean = True) As Boolean
        If ZFieldObj.UpdateDB = True Then
            logger.Trace("ZFieldObj.FieldType: " + ZFieldObj.FieldType.ToString())
            Select Case ZFieldObj.FieldType
                Case GlobalFunctions.FIELDTYPES.FT_SHORTTEXT, GlobalFunctions.FIELDTYPES.FT_BARCODE, GlobalFunctions.FIELDTYPES.FT_RATING
                    'If ProhibitedTagsFound(CType(ZFieldObj.FieldControl, TextBox).Text) = True Then
                    '    DisplayError(GlobalFunctions.ERRORTYPES.ERROR_PROHIBITEDTAGFOUND, ZFieldObj.FieldCaption)
                    '    Return False
                    'End If

                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, Object).Text) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    If Len(ZFieldObj.InputMask) > 0 And DoValidate = True Then
                        If Regex.Match(CType(ZFieldObj.FieldControl, Object).Text, ZFieldObj.InputMask).Success = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INPUTMASKFAILED, String.Format(DbResT("Sorry, you have entered an invalid format for the {0} field"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    Dim htmlTagFound As String = ""
                    If PassedHTMLTagChecking(CType(ZFieldObj.FieldControl, Object).Text, htmlTagFound) = False Then
                        DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT(FromConfig("XSSErrorMessage")), ZFieldObj.FieldCaption, htmlTagFound))
                        Return False
                    End If
                    Dim CSVTagFound As String = ""
                    If PassedCSVTagChecking(CType(ZFieldObj.FieldControl, Object).Text, CSVTagFound) = False Then
                        DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT(FromConfig("CSVInjectionErrorMessage")), ZFieldObj.FieldCaption))
                        Return False
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, Object).Text
                Case GlobalFunctions.FIELDTYPES.FT_GPS
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, Object).Text) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    If Len(ZFieldObj.InputMask) > 0 And DoValidate = True Then
                        If Regex.Match(CType(ZFieldObj.FieldControl, Object).Text, ZFieldObj.InputMask).Success = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INPUTMASKFAILED, String.Format(DbResT("Sorry, you have entered an invalid format for the {0} field"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, Object).Text
                Case GlobalFunctions.FIELDTYPES.FT_HIDDENFIELD
                    'If ProhibitedTagsFound(CType(ZFieldObj.FieldControl, HiddenField).Value) = True Then
                    '    DisplayError(GlobalFunctions.ERRORTYPES.ERROR_PROHIBITEDTAGFOUND, ZFieldObj.FieldCaption)
                    '    Return False
                    'End If
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, HiddenField).Value) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("The {0} hidden field cannot be empty"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, HiddenField).Value
                Case GlobalFunctions.FIELDTYPES.FT_DBLABEL
                    'If ProhibitedTagsFound(CType(ZFieldObj.FieldControl, Label).Text) = True Then
                    '    DisplayError(GlobalFunctions.ERRORTYPES.ERROR_PROHIBITEDTAGFOUND, ZFieldObj.FieldCaption)
                    '    Return False
                    'End If
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, Label).Text) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("The {0} field must not be empty"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, Label).Text

                Case GlobalFunctions.FIELDTYPES.FT_LABEL

                Case GlobalFunctions.FIELDTYPES.FT_LONGTEXT
                    'If ProhibitedTagsFound(CType(ZFieldObj.FieldControl, TextBox).Text) = True Then
                    '    DisplayError(GlobalFunctions.ERRORTYPES.ERROR_PROHIBITEDTAGFOUND, ZFieldObj.FieldCaption)
                    '    Return False
                    'End If
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, TextBox).Text) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    If Len(ZFieldObj.InputMask) > 0 And DoValidate = True Then
                        If Regex.Match(CType(ZFieldObj.FieldControl, TextBox).Text, ZFieldObj.InputMask).Success = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INPUTMASKFAILED, String.Format(DbResT("Sorry, you have entered an invalid format for the {0} field"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    If ZFieldObj.MaxChars > 0 And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, TextBox).Text) > ZFieldObj.MaxChars Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_TOOLONG, String.Format(DbResT("Sorry, you have entered more than the maximum amount of characters ({0} chars) for the {1} field"), FormatData(ZFieldObj.MaxChars), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    Dim htmlTagFound As String = ""
                    If PassedHTMLTagChecking(CType(ZFieldObj.FieldControl, TextBox).Text, htmlTagFound) = False Then
                        DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT(FromConfig("XSSErrorMessage")), ZFieldObj.FieldCaption, htmlTagFound))
                        Return False
                    End If
                    Dim CSVTagFound As String = ""
                    If PassedCSVTagChecking(CType(ZFieldObj.FieldControl, TextBox).Text, CSVTagFound) = False Then
                        DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT(FromConfig("CSVInjectionErrorMessage")), ZFieldObj.FieldCaption))
                        Return False
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, TextBox).Text
                Case GlobalFunctions.FIELDTYPES.FT_HTML
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(ZFieldObj.FieldControl.value) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    If Len(ZFieldObj.InputMask) > 0 And DoValidate = True Then
                        If Regex.Match(ZFieldObj.FieldControl.value, ZFieldObj.InputMask).Success = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INPUTMASKFAILED, String.Format(DbResT("Sorry, you have entered an invalid format for the {0} field"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    If ZFieldObj.MaxChars > 0 And DoValidate = True Then
                        If Len(ZFieldObj.FieldControl.value) > ZFieldObj.MaxChars Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_TOOLONG, String.Format(DbResT("Sorry, you have entered more than the maximum amount of characters ({0} chars) for the {1} field"), FormatData(ZFieldObj.MaxChars), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = ZFieldObj.FieldControl.value
                Case GlobalFunctions.FIELDTYPES.FT_RADIO
                    Dim _value As String = GlobalFunctions.GetRadioListValue(ZFieldObj.FieldControl)
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(_value) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = _value
                Case GlobalFunctions.FIELDTYPES.FT_CHECKLIST
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If GlobalFunctions.CheckListEmpty(ZFieldObj.FieldControl) = True Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("Sorry, please select at least one item from the {0} checklist"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = GlobalFunctions.GetCheckListValue(ZFieldObj.FieldControl)
                Case GlobalFunctions.FIELDTYPES.FT_AUTOID
                    'AutoID is only autogenerated upon commit
                    DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl2, HiddenField).Value
                Case GlobalFunctions.FIELDTYPES.FT_INT
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, TextBox).Text) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If

                    If Len(CType(ZFieldObj.FieldControl, TextBox).Text) > 0 And DoValidate = True Then
                        If IsNumeric(CType(ZFieldObj.FieldControl, TextBox).Text) = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a numeric value"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                        If Len(ZFieldObj.BottomLimit) > 0 And IsNumeric(ZFieldObj.BottomLimit) Then
                            If CLng(CType(ZFieldObj.FieldControl, TextBox).Text) < CLng(ZFieldObj.BottomLimit) Then
                                DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a value larger than {1}"), ZFieldObj.FieldCaption, ZFieldObj.BottomLimit))
                                Return False
                            End If
                        End If
                        If Len(ZFieldObj.TopLimit) > 0 And IsNumeric(ZFieldObj.TopLimit) Then
                            If CLng(CType(ZFieldObj.FieldControl, TextBox).Text) > CLng(ZFieldObj.TopLimit) Then
                                DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a value smaller than {1}"), ZFieldObj.FieldCaption, ZFieldObj.TopLimit))
                                Return False
                            End If
                        End If
                    End If
                    If DoValidate = True Then
                        DataRow.Item(ZFieldObj.BoundField) = GlobalFunctions.GetNumber(CType(ZFieldObj.FieldControl, TextBox).Text)
                    Else
                        DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, TextBox).Text
                    End If

                Case GlobalFunctions.FIELDTYPES.FT_FLOAT, GlobalFunctions.FIELDTYPES.FT_CURRENCY
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, TextBox).Text) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If

                    If Len(CType(ZFieldObj.FieldControl, TextBox).Text) > 0 And DoValidate = True Then
                        If IsNumeric(CType(ZFieldObj.FieldControl, TextBox).Text) = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a numeric value"), ZFieldObj.FieldCaption))
                            Return False
                        End If

                        If IsNumeric(CType(ZFieldObj.FieldControl, TextBox).Text) = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a numeric value"), ZFieldObj.FieldCaption))
                            Return False
                        End If

                        If Len(ZFieldObj.BottomLimit) > 0 And IsNumeric(ZFieldObj.BottomLimit) Then
                            If CLng(CType(ZFieldObj.FieldControl, TextBox).Text) < CLng(ZFieldObj.BottomLimit) Then
                                DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a value larger than {1}"), ZFieldObj.FieldCaption, ZFieldObj.BottomLimit))
                                Return False
                            End If
                        End If
                        If Len(ZFieldObj.TopLimit) > 0 And IsNumeric(ZFieldObj.TopLimit) Then
                            If CLng(CType(ZFieldObj.FieldControl, TextBox).Text) > CLng(ZFieldObj.TopLimit) Then
                                DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a value smaller than {1}"), ZFieldObj.FieldCaption, ZFieldObj.TopLimit))
                                Return False
                            End If
                        End If
                    End If

                    Dim _args As String = ""
                    If ZFieldObj.FieldType = FIELDTYPES.FT_FLOAT Then
                        _args = ZFieldObj.Arguments
                    ElseIf ZFieldObj.FieldType = FIELDTYPES.FT_CURRENCY Then
                        _args = FromConfig("MoneyPrecision", "2")
                    End If

                    If DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, TextBox).Text) > 0 Then
                            Dim _Num As Double = GlobalFunctions.FormatDouble(CType(ZFieldObj.FieldControl, TextBox).Text)
                            If IsNumeric(_args) Then
                                'Dim _multiplied As Double = _Num * Math.Pow(10, CInt(_args))
                                'If _multiplied <> Math.Floor(_multiplied) Then
                                '    DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, ZFieldObj.FieldCaption + " can only have a maximum of " & CInt(_args) & " decimal place(s)")
                                '    Return False
                                'End If

                                Dim arrsplits() As String = Split(CType(ZFieldObj.FieldControl, TextBox).Text, ".")
                                If UBound(arrsplits) > 0 Then
                                    Dim _last As String = arrsplits(UBound(arrsplits))
                                    If Len(_last) > CInt(_args) Then
                                        DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} can only have a maximum of {1} decimal place(s)"), ZFieldObj.FieldCaption, CInt(_args).ToString()))
                                        Return False
                                    End If
                                End If




                                '_Num = Math.Round(_Num, CInt(_args))
                            End If
                            DataRow.Item(ZFieldObj.BoundField) = _Num
                        Else
                            DataRow.Item(ZFieldObj.BoundField) = DBNull.Value
                        End If
                    Else
                        DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, TextBox).Text
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_DATETIME, GlobalFunctions.FIELDTYPES.FT_DATE
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, Object).value) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If

                        If CType(ZFieldObj.FieldControl, Object).IsEmpty = True Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must not be empty and must be a date value"), ZFieldObj.FieldCaption))
                            Return False
                        End If

                        If IsDate(CType(ZFieldObj.FieldControl, Object).value) = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a date value"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
                    If Len(CType(ZFieldObj.FieldControl, Object).value) > 0 And DoValidate = True Then
                        If IsDate(CType(ZFieldObj.FieldControl, Object).value) = False Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a date value"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                        If Len(ZFieldObj.BottomLimit) > 0 And IsDate(ZFieldObj.BottomLimit) Then
                            If CDate(CType(ZFieldObj.FieldControl, Object).value) < CDate(ZFieldObj.BottomLimit) Then
                                DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a date later than {1}"), ZFieldObj.FieldCaption, ZFieldObj.BottomLimit))
                                Return False
                            End If
                        End If
                        If Len(ZFieldObj.TopLimit) > 0 And IsDate(ZFieldObj.TopLimit) Then
                            If CDate(CType(ZFieldObj.FieldControl, Object).value) > CDate(ZFieldObj.TopLimit) Then
                                DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("{0} must be a date earlier than {1}"), ZFieldObj.FieldCaption, ZFieldObj.TopLimit))
                                Return False
                            End If
                        End If
                    End If

                    If CType(ZFieldObj.FieldControl, Object).isempty = True Then
                        DataRow.Item(ZFieldObj.BoundField) = DBNull.Value
                    Else
                        DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, Object).value
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_YESNO
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, Object).SelectedValue) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = CType(ZFieldObj.FieldControl, Object).SelectedValue
                Case GlobalFunctions.FIELDTYPES.FT_USER
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, Object).text) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = GlobalFunctions.FormatData(CType(ZFieldObj.FieldControl, Object).text)
                Case GlobalFunctions.FIELDTYPES.FT_COUNTRY
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, DropDownList).SelectedValue) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = GlobalFunctions.FormatData(CStr(CType(ZFieldObj.FieldControl, DropDownList).SelectedValue))
                Case GlobalFunctions.FIELDTYPES.FT_DROPDOWN
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(CType(ZFieldObj.FieldControl, Object).SelectedValue) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If
                    DataRow.Item(ZFieldObj.BoundField) = GlobalFunctions.FormatData(CStr(CType(ZFieldObj.FieldControl, Object).SelectedValue))
                Case GlobalFunctions.FIELDTYPES.FT_FILE
                    Dim filepath As String = CType(ZFieldObj.FieldControl, Object).getInternalPath
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(filepath) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If

                    If Not String.IsNullOrWhiteSpace(filepath) Then
                        Dim fullpath As String = GetFullUploadedFilePath(filepath)
                        Dim msg As String = ""
                        If Not FileExtensionAllowed(fullpath, msg, "AllowedExtensionsForFileUpload") Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INPUTMASKFAILED, ZFieldObj.FieldCaption + ": " + msg)
                            DeleteFile(fullpath)
                            Return False
                        End If
                    End If

                    DataRow.Item(ZFieldObj.BoundField) = CStr(filepath)
                Case GlobalFunctions.FIELDTYPES.FT_TIFFVIEWER, FIELDTYPES.FT_CAMERA, FIELDTYPES.FT_SIGNATURE
                    Dim filepath As String = CType(ZFieldObj.FieldControl, Object).getInternalPath
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If Len(filepath) = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                    End If

                    If ZFieldObj.FieldType = GlobalFunctions.FIELDTYPES.FT_TIFFVIEWER Then
                        If Not String.IsNullOrWhiteSpace(filepath) Then
                            Dim fullpath As String = GetFullUploadedFilePath(filepath)
                            Dim msg As String = ""
                            If Not FileExtensionAllowed(fullpath, msg, "AllowedExtensionsForImageUpload") Then
                                DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INPUTMASKFAILED, ZFieldObj.FieldCaption + ": " + msg)
                                DeleteFile(fullpath)
                                Return False
                            End If
                        End If
                    End If

                    DataRow.Item(ZFieldObj.BoundField) = CStr(filepath)
            End Select
        Else
            'Regardless enabled or not, we save the table
            Select Case ZFieldObj.FieldType
                Case GlobalFunctions.FIELDTYPES.FT_TABLE
                    CType(ZFieldObj.FieldControl, Object).SaveIRETable()
                    If ZFieldObj.IsCompulsory = True And DoValidate = True Then
                        If CType(ZFieldObj.FieldControl, Object).datasource Is Nothing Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_MISSINGFIELD, ZFieldObj.FieldCaption)
                            Return False
                        End If
                        If CType(ZFieldObj.FieldControl, Object).datasource.rows.count = 0 Then
                            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("Please key in at least one entry in the {0} table"), ZFieldObj.FieldCaption))
                            Return False
                        End If
                    End If
            End Select
        End If
        Return True
    End Function

    Private Shared Sub DeleteFile(filepath As String)
        If File.Exists(filepath) Then
            Try
                File.Delete(filepath)
            Catch ex As Exception
                logger.Error(ex, "failed to delete file: " + filepath)
            End Try
        End If
    End Sub

    Private Shared htmlTags As Newtonsoft.Json.Linq.JObject = GetHtmlTags()

    Private Shared Function GetHtmlTags() As JObject
        Dim tags As JObject = Nothing
        Dim s As String = HttpUtility.HtmlDecode(FromConfig("HTMLTags").ToLower())
        Try
            tags = Newtonsoft.Json.Linq.JObject.Parse(s)
        Catch ex As Exception
            logger.Error(ex, "s: " + s)
        End Try
        Return tags
    End Function

    Private Shared Function PassedHTMLTagChecking(s1 As String, ByRef htmlTagFound As String) As Boolean
        Dim passed As Boolean = True
        Try
            If FromConfig("EnableFormXSSChecking") = "true" Then
                If s1 Is Nothing Then
                    s1 = ""
                End If
                s1 = s1.ToLower()
                If s1.Length > 0 Then

                    If s1.Contains("<") Then

                        passed = False
                        htmlTagFound = s1.Replace("<", "&lt;")
                    ElseIf s1.Contains(">") Or s1.Trim().Contains("/>") Then

                        passed = False
                        htmlTagFound = s1.Replace(">", "&gt;")
                    End If
                    For Each x As String In htmlTags.Item("tags").ToObject(Of JArray)()
                        Dim tag As String = x
                        Dim tag1 As String = "<" + x
                        Dim tag2 As String = "</" + x + ">"
                        'If s1.Contains(tag) Then
                        '    htmlTagFound = tag
                        '    passed = False
                        'Else
                        If s1.Contains(tag1) Then
                            htmlTagFound = tag1.Replace("<", "&lt;") + "&gt;"
                            passed = False
                        ElseIf s1.Contains(tag2) Then
                            htmlTagFound = tag2.Replace("<", "&lt;").Replace(">", "&gt;")
                            passed = False
                        End If
                        If Not passed Then
                            logger.Debug("didn't pass, s1: " + s1 + ", htmlTagFound: " + htmlTagFound)
                            Exit For
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            logger.Error(ex)
        End Try
        Return passed
    End Function
    Private Shared Function PassedCSVTagChecking(s1 As String, ByRef csvTagFound As String) As Boolean
        Dim passed As Boolean = True
        Try
            If FromConfig("EnableFormXSSChecking") = "true" Then

                If s1 Is Nothing Then
                    s1 = ""
                End If
                s1 = s1.ToLower()
                If s1.Length > 0 Then
                    Dim _csvChars() As String = FromConfig("CSVInjectionChars").Split(",")
                    If _csvChars.Contains(s1.Substring(0, 1)) Then
                        passed = False
                        csvTagFound = "CSV Injection character found. Please remove =, +, - and @ at begin of the input,"
                    End If

                End If
            End If
        Catch ex As Exception
            logger.Error(ex)
        End Try
        Return passed
    End Function
    Public Shared Function FileExtensionAllowed(filepath As String, ByRef msg As String, configItemName As String) As Boolean
        Dim allowed As Boolean = True
        msg = ""
        Try
            logger.Debug("filepath: " + filepath)
            Dim ext As String = Path.GetExtension(filepath)
            Dim allowedExts As String = FromConfig(configItemName)
            If Not String.IsNullOrWhiteSpace(allowedExts) Then
                If allowedExts.ToLower().Contains(ext.ToLower()) Then
                    allowed = True
                Else
                    allowed = False
                    msg = GetRegularExpressValidatorMessage(GetExtensionsFromConfig(configItemName))
                End If
            End If
        Catch ex As Exception
            logger.Error(ex)
        End Try
        Return allowed
    End Function

    Public Shared Sub SetupFileUploadValidation(f As FileUpload, configItemName As String)
        Try
            If IsCurrentRequestMobileVersion() Then
                f.Attributes.Add("accept", "image/*")
            Else
                Dim exts As List(Of String) = GetExtensionsFromConfig(configItemName)
                If exts.Count > 0 Then
                    'v.ValidationExpression = GetRegularExpressValidatorExpression(exts)
                    'v.ErrorMessage = GetRegularExpressValidatorMessage(exts)
                    f.Attributes.Add("accept", GetMimeListForHtmlControl(exts))
                    'v.Visible = False
                Else
                    'v.Enabled = False
                End If
            End If
        Catch ex As Exception
            logger.Error(ex)
        End Try
    End Sub

    ' .gif .jpeg .jpg .png -> image/gif,image/jpeg,image/png
    Private Shared Function GetMimeListForHtmlControl(exts As List(Of String)) As String
        Dim result As String = ""
        Dim mimes As New List(Of String)
        For Each ext As String In exts
            Dim mime As String = GetMimeTypeByExtension(ext)
            If Not mimes.Contains(mime) Then
                mimes.Add(mime)
            End If
        Next
        For Each mime As String In mimes
            If result <> "" Then
                result += ","
            End If
            result += mime
        Next
        logger.Debug("result: " + result)
        Return result
    End Function

    ' .gif .jpeg .jpg .png -> only .gif, .jpeg, .jpg, .png formats are allowed
    Private Shared Function GetRegularExpressValidatorMessage(exts As List(Of String)) As String
        Dim result As String = ""
        For Each ext As String In exts
            If result <> "" Then
                result += ", "
            End If
            result += ext
        Next
        result = String.Format(DbResT("only {0} formats are allowed"), result)
        Return result
    End Function

    Private Shared Function GetExtensionsFromConfig(configItem As String) As List(Of String)
        Dim all As String = GlobalFunctions.FromConfig(configItem)
        Dim arr As Array = all.Split(" ")
        Dim result As New List(Of String)
        For Each item As String In arr
            If Not String.IsNullOrWhiteSpace(item) Then
                result.Add(item.Trim())
            End If
        Next
        Return result
    End Function
    Private Shared Function GetMimeTypeByExtension(ext As String) As String
        Dim sampleFileName As String = "xxx" + ext
        Dim mimeType As String = MimeMapping.GetMimeMapping(sampleFileName)
        logger.Trace(sampleFileName + " -> " + mimeType)
        Return mimeType
    End Function

    ' .gif -> .+\.([Gg][iI][Ff])
    Private Shared Function GetRegularExpressValidatorForExtension(ext As String) As String
        Dim result As String = ""
        ext = ext.Replace(".", "") ' .gif -> gif
        For i As Integer = 0 To ext.Length - 1
            Dim c As String = ext.Substring(i, 1)
            result += "[" + c.ToUpper() + c.ToLower() + "]"
        Next
        result = ".+\.(" + result + ")"
        Return result
    End Function
    ' .gif .jpeg .jpg .png -> (.+\.([Gg][iI][Ff])|.+\.([Jj][Pp][Gg])|.+\.([Jj][Pp][Ee][Gg])|.+\.([Pp][Nn][Gg]))
    Private Shared Function GetRegularExpressValidatorExpression(exts As List(Of String)) As String
        Dim result As String = ""
        For Each ext As String In exts
            If result <> "" Then
                result += "|"
            End If
            result += GetRegularExpressValidatorForExtension(ext)
        Next
        result = "(" + result + ")"
        logger.Debug("result: " + result)
        Return result
    End Function

    Public Shared Function CheckDuplicates(ByVal TableName As String, ByRef ZFieldItem As ZField, ByRef Row As DataRow) As Boolean



        CheckDuplicates = True

        If ZFieldItem.AllowDuplicates = False Then

            Dim strValue As String = ""
            Try
                Select Case ZFieldItem.FieldType
                    Case FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME
                        strValue = CType(ZFieldItem.FieldControl, Object).value
                    Case FIELDTYPES.FT_RADIO
                        strValue = GlobalFunctions.GetRadioListValue(ZFieldItem.FieldControl)
                    Case FIELDTYPES.FT_CHECKLIST
                        strValue = GlobalFunctions.GetCheckListValue(ZFieldItem.FieldControl)
                    Case FIELDTYPES.FT_YESNO
                        strValue = CType(ZFieldItem.FieldControl, DropDownList).SelectedValue
                    Case FIELDTYPES.FT_USER
                        strValue = CType(ZFieldItem.FieldControl, Object).text
                    Case FIELDTYPES.FT_COUNTRY
                        strValue = CType(ZFieldItem.FieldControl, DropDownList).SelectedValue
                    Case FIELDTYPES.FT_DROPDOWN
                        strValue = CType(ZFieldItem.FieldControl, Object).SelectedValue
                    Case FIELDTYPES.FT_FILE
                        strValue = CType(ZFieldItem.FieldControl, Object).getInternalPath
                    Case FIELDTYPES.FT_LONGTEXT, FIELDTYPES.FT_HTML
                        'for long text, we cannot do SQL comparison, so we just skip
                        Return True
                    Case Else
                        strValue = CType(ZFieldItem.FieldControl, TextBox).Text
                End Select
            Catch ex As Exception
            End Try
            If Len(strValue) = 0 Then Return True


            Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
            _web.OpenConnection()

            Dim _primkey As Guid = GlobalFunctions.GetGUID(Row.Item("ID"))
            Dim _Sql As String = "SELECT ID FROM [" & TableName & "] WHERE [" & ZFieldItem.BoundField & "]='" & strValue & "' AND [ID]<>'" & _primkey.ToString & "'"
            _web.CustomSQLCommand(_Sql)

            Dim _set As DataSet = _web.CustomSQLExecuteReturn
            _web.CloseConnection()

            If _set Is Nothing = False Then
                If _set.Tables(0).Rows.Count > 0 Then
                    DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, String.Format(DbResT("'{0}' already exists in the {1} field. This field cannot contain duplicates"), strValue, ZFieldItem.FieldCaption))
                    Return False
                End If
            Else
                Return True
            End If

        End If
    End Function

    Public Shared Function CommitToSessionDatarow(ByVal TableName As String, ByRef ZFields As Collection, ByRef WebObj As ZukamiLib.WebSession, ByRef DataRow As DataRow, Optional ByVal DoValidate As Boolean = True) As Boolean

        Try
            Dim _errFound As Boolean = False
            For _counter = 1 To ZFields.Count
                Dim _zfield As ZField = ZFields.Item(_counter)

                If DoValidate = True Then
                    If CheckDuplicates(TableName, _zfield, DataRow) = False Then Return False
                End If
                If CommitZFieldToDataRow(_zfield, DataRow, DoValidate) = False Then _errFound = True

            Next _counter
            If _errFound = True Then
                Return False
            Else
                Return True
            End If

        Catch ex As Exception
            DisplayError(GlobalFunctions.ERRORTYPES.ERROR_INVALIDFIELD, ex.ToString)
        End Try
    End Function

    Public Shared Function FormatJavascript2(ByVal Javascript As String) As String

        Dim _js As String = Replace(Javascript, "\", "\\")
        Return _js
    End Function

    Public Shared Function FormatJavascript(ByVal Javascript As String) As String

        Dim _js As String = Replace(Javascript, "'", "\'")
        _js = Replace(_js, vbCrLf, "\n")
        _js = Replace(_js, vbCr, "\n")
        _js = Replace(_js, vbLf, "\n")
        _js = Replace(_js, vbTab, "\t")
        _js = Replace(_js, "\", "\\")
        _js = Replace(_js, """", "\""")

        Return _js
    End Function

    Public Shared Function ColumnFilterAvailable(ByVal FieldType As GlobalFunctions.FIELDTYPES) As Boolean
        Select Case FieldType
            Case FIELDTYPES.FT_COUNTRY, FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME, FIELDTYPES.FT_DROPDOWN, FIELDTYPES.FT_RADIO, FIELDTYPES.FT_USER, FIELDTYPES.FT_YESNO, FIELDTYPES.FT_SHORTTEXT, FIELDTYPES.FT_BARCODE, FIELDTYPES.FT_GPS, FIELDTYPES.FT_RATING
                Return True
            Case Else
                Return False
        End Select
    End Function

    Public Shared Sub SetNameCounter(ByRef WebObj As ZukamiLib.WebSession, ByVal ItemID As Guid, ByVal Counter As Integer)
        WebObj.Namecounters_Set(ItemID, Counter)
    End Sub

    Public Class ThemeObjects
        Private _TaskInbox As Object
        Private _FormEngine As Object
        Private _ValSummary As ValidationSummary
        Private _AppID As Guid
        Private _ListRow As DataRow
        Private _Loginpanel As Object
        Private _MainObject As Object
        Private _SecondaryObject As Object
        Private _Page As System.Web.UI.Page

        Public Property MainObject() As Object
            Get
                Return _MainObject
            End Get
            Set(ByVal value As Object)
                _MainObject = value
            End Set
        End Property

        Public Property SecondaryObject() As Object
            Get
                Return _SecondaryObject
            End Get
            Set(ByVal value As Object)
                _SecondaryObject = value
            End Set
        End Property

        Public Property LoginPanel() As Object
            Get
                Return _Loginpanel
            End Get
            Set(ByVal value As Object)
                _Loginpanel = value
            End Set
        End Property

        Public Property TaskInbox() As Object
            Get
                Return _TaskInbox
            End Get
            Set(ByVal value As Object)
                _TaskInbox = value
            End Set
        End Property

        Public Property FormEngine() As Object
            Get
                Return _FormEngine
            End Get
            Set(ByVal value As Object)
                _FormEngine = value
            End Set
        End Property

        Public Property ListRow() As DataRow
            Get
                Return _ListRow
            End Get
            Set(ByVal value As DataRow)
                _ListRow = value
            End Set
        End Property

        Public Property Page() As System.Web.UI.Page
            Get
                Return _Page
            End Get
            Set(ByVal value As System.Web.UI.Page)
                _Page = value
            End Set
        End Property

        Public Property AppID() As Guid
            Get
                Return _AppID
            End Get
            Set(ByVal value As Guid)
                _AppID = value
            End Set
        End Property



        Public Property ValSummary() As ValidationSummary
            Get
                Return _ValSummary
            End Get
            Set(ByVal value As ValidationSummary)
                _ValSummary = value
            End Set
        End Property

    End Class

    Public Shared Function CanModifyDataInView(ByRef webobj As ZukamiLib.WebSession, ByRef Settings As ZukamiLib.ZukamiSettings, ByVal ViewID As Guid, ByVal PermLetter As String) As Boolean
        Dim _fRec As DataSet = webobj.Views_GetRecord(ViewID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(Settings.CurrentUserGUID, "SUPERADMIN") = True Then
            Return True
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = Settings.CurrentUserGUID Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(Settings.CurrentUserGUID, ViewID, PermLetter) = True Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function CanModifyCreateViewDesign(ByRef webobj As ZukamiLib.WebSession, ByVal CanModifyApp As Boolean, ByRef Settings As ZukamiLib.ZukamiSettings, ByVal ViewID As Guid, ByVal PermLetter As String) As Boolean
        Dim _fRec As DataSet = webobj.Views_GetRecord(ViewID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(Settings.CurrentUserGUID, "SUPERADMIN") = True Then
            Return True
        End If

        If CanModifyApp = False Then
            Return False
        End If

        If Settings.PermMCV = False Then
            Return False
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = Settings.CurrentUserGUID Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(Settings.CurrentUserGUID, ViewID, PermLetter) = True Then
            Return True
        End If
        Return False
    End Function

    Private Shared Function GrabAllTags(ByVal FullText As String) As Collection
        Dim _text As String = FullText
        Dim _done As Boolean = False
        Dim _position As Integer = 1

        Dim _undoneTags As New Collection
        Do While _done = False
            Dim _tag1 As Integer = InStr(_position, _text, "<$")
            If _tag1 = 0 Then GoTo Done
            Dim _tag2 As Integer = InStr(_tag1, _text, ">")
            If _tag2 = 0 Then GoTo Done

            Dim _tag As String = Mid(_text, _tag1 + 2, _tag2 - (_tag1 + 2))

            'add the tag
            If _undoneTags.Contains(_tag) = False Then _undoneTags.Add(_tag, _tag)

            _position = _tag2 + 1
            If _position > Len(_text) Then _done = True
            GoTo ContinueLoop
Done:
            _done = True
            Exit Do
ContinueLoop:
        Loop
        Return _undoneTags
    End Function

    Private Shared Function GrabSubstitutionDataset(ByRef WebObj As ZukamiLib.WebSession, ByVal Tags As Collection, ByRef AppID As Guid) As DataSet
        Dim _Sql As String = "SELECT [StringName],[Value] FROM [SubstitutionStrings] WHERE [AppID]='" & AppID.ToString & "' AND [StringName] IN ("
        Dim _strings As String = ""
        Dim _counter As Integer
        For _counter = 1 To Tags.Count
            If Len(_strings) > 0 Then _strings += ","
            _strings += "'" + Tags.Item(_counter) + "'"
        Next _counter
        _Sql += _strings & ")"
        WebObj.CustomSQLCommand(_Sql)
        GrabSubstitutionDataset = WebObj.CustomSQLExecuteReturn()
    End Function

    Private Shared Function ReplaceSubsLang(MainText As String, Subs As String, Data As String, Lang As String) As String



        If InStr(Subs, ".") > 0 Then
            Dim lngLastDot As Integer = InStrRev(Subs, ".")
            Dim leftside As String = Mid(Subs, 1, lngLastDot - 1)
            Dim rightside As String = Mid(Subs, lngLastDot + 1, Len(Subs) - lngLastDot)

            If StrComp(rightside, Lang, CompareMethod.Text) = 0 Then
                Return Replace(MainText, "<$" & leftside & ">", Data,,, CompareMethod.Text)

            Else
                Return MainText
            End If
        Else
            Return Replace(MainText, "<$" & Subs & ">", Data,,, CompareMethod.Text)

        End If

    End Function

    Public Shared Sub ResolveAndPopulateStrings(ByRef MainText As String, ByRef webobj As ZukamiLib.WebSession, ByRef StringSet As DataSet, ByRef AppID As Guid, Lang As String)
        Dim _counter As Integer

        Dim _lang As String = Lang
        For _counter = 0 To StringSet.Tables(0).Rows.Count - 1
            Dim _value As String = GlobalFunctions.FormatData(StringSet.Tables(0).Rows(_counter).Item("Value"))
            Dim _stringName As String = GlobalFunctions.FormatData(StringSet.Tables(0).Rows(_counter).Item("StringName"))

            If Len(_value) >= 3 Then
                Dim _key As String = LCase(Mid(_value, 1, 3))
                Dim _data As String = Mid(_value, 4, Len(_value) - 3)
                Select Case _key
                    Case "ss,"
                        MainText = ReplaceSubsLang(MainText, _stringName, _data, _lang)
                    Case "sq,"
                        webobj.CustomSQLCommand(_data)
                        Dim _val As String = ""
                        Dim _data2 As DataSet = webobj.CustomSQLExecuteReturn
                        If _data2.Tables(0).Rows.Count > 0 Then
                            _val = GlobalFunctions.FormatData(_data2.Tables(0).Rows(0).Item(0))
                        End If
                        MainText = ReplaceSubsLang(MainText, _stringName, _val, _lang)
                    Case "cd,"
                        Dim CompilationError As String = ""
                        Dim _CodeID As String = AppID.ToString & "_" & _stringName
                        If GlobalFunctions.CacheCode(_data, _CodeID, ZukamiLib.ZukamiCode.FORMULATYPES.FORMULATYPE_STRING, CompilationError) = False Then
                            ValidationError.Display(String.Format(DbResT("Script compilation error: {0}"), CompilationError))
                        Else
                            Dim _valRet As String = GlobalFunctions.RunCode(_CodeID, CreateScribe)
                            MainText = ReplaceSubsLang(MainText, _stringName, _valRet, _lang)
                        End If

                End Select
            End If
        Next _counter
    End Sub

    Public Shared Function CreateScribe(Optional ByRef FilterArgs As Collection = Nothing) As InstanceScribe
        Dim _scribe As New InstanceScribe
        _scribe.DataBag = Nothing
        '_scribe.AddTableDataBag(Session(_zfield.FieldGUID.ToString), _zfield.FieldCaption)
        '_scribe.SubmissionDetails.RecordID = New Guid(RecordID)
        '_scribe.Zfields = _ZFields
        _scribe.SetFilterArgs(FilterArgs)
        _scribe.CurrentForm = Nothing



        Return _scribe
    End Function

    Public Shared Sub SubstituteTags(ByVal ThemeTag As String, ByRef WebObj As ZukamiLib.WebSession, ByRef objects As GlobalFunctions.ThemeObjects, ByRef PlcMain As PlaceHolder, ByVal MainText As String, ByRef AppID As Guid, Optional ByVal ListName As String = "", Optional ByVal ListDescription As String = "")
        Dim _text As String = MainText
        PlcMain.Controls.Clear()
        _text = GlobalFunctions.SubstituteThemeKeywords(WebObj, _text, AppID, ListName, ListDescription, objects)
        Dim lang As String = "en-US"
        Dim zuk As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        If zuk Is Nothing = False Then
            lang = zuk.UICulture
        End If

        If Len(lang) = 0 Then lang = "en-US"
        Dim _allTags As Collection = GrabAllTags(_text)
        If _allTags.Count > 0 Then

            'Add the subscriptions with language
            Dim tagwithlang As New Collection
            Dim i As Integer
            For i = 1 To _allTags.Count
                Dim _Tag As String = _allTags.Item(i)
                tagwithlang.Add(_Tag + "." + lang, _Tag + "." + lang)
            Next i
            For i = 1 To tagwithlang.Count
                Dim _tag As String = tagwithlang.Item(i)
                _allTags.Add(_tag, _tag)
            Next



            Dim _tagset As DataSet = GrabSubstitutionDataset(WebObj, _allTags, AppID)
            ResolveAndPopulateStrings(_text, WebObj, _tagset, AppID, lang)
        End If


        Dim _done As Boolean = False
        Dim _position As Integer = 1
        Do While _done = False
            Dim _tag1 As Integer = InStr(_position, _text, "[$")
            If _tag1 = 0 Then GoTo Done
            Dim _tag2 As Integer = InStr(_tag1, _text, "]")
            If _tag2 = 0 Then GoTo Done

            Dim _tag As String = Mid(_text, _tag1, _tag2 - _tag1 + 1)
            Dim _HTML As String = Mid(_text, _position, _tag1 - _position)

            If GlobalFunctions.SubstituteThemeTags(ThemeTag, WebObj, objects, PlcMain, _tag, _HTML) = False Then
                'write everything up to this point
                Dim _all As String = Mid(_text, _position, _tag2 - _position + 1)
                If Len(_all) > 0 Then PlcMain.Controls.Add(New LiteralControl(_all))
            End If

            _position = _tag2 + 1
            If _position > Len(_text) Then _done = True
            GoTo ContinueLoop
Done:
            Dim _literal As String = Mid(_text, _position, Len(_text) - _position + 1)
            If Len(_literal) > 0 Then PlcMain.Controls.Add(New LiteralControl(_literal))
            _done = True
            Exit Do
ContinueLoop:
        Loop

    End Sub

    Private Shared Sub LoadTableRowSet(ByRef AppID As Guid, ByRef DSet As DataSet, ByRef Tbl As Table, ByVal Type As Integer)
        Dim _counter As Integer
        For _counter = 0 To DSet.Tables(0).Rows.Count - 1
            Dim _caption As String = ""
            Dim _viewID As String = ""

            If Type = 6 Then
                _caption = GlobalFunctions.FormatData(DSet.Tables(0).Rows(_counter).Item("PageName"))
                _viewID = GlobalFunctions.FormatData(DSet.Tables(0).Rows(_counter).Item("ID"))
            Else
                _caption = GlobalFunctions.FormatData(DSet.Tables(0).Rows(_counter).Item("Caption"))
                _viewID = GlobalFunctions.FormatData(DSet.Tables(0).Rows(_counter).Item("ID"))
            End If



            Dim _row As New TableRow
            Tbl.Rows.Add(_row)

            Dim _cell As New TableCell
            _cell.Width = New Unit(20, UnitType.Pixel)
            Dim _img As New Image
            Select Case Type
                Case 0
                    _img.ImageUrl = "images/icoViewSmall.gif"
                Case 1
                    _img.ImageUrl = "images/icoCalView.gif"
                Case 2
                    _img.ImageUrl = "images/icoChartIcon.gif"
                Case 3
                    _img.ImageUrl = "images/icoSchedulerIcon.gif"
                Case 4
                    _img.ImageUrl = "images/icoimagemapIcon.gif"
                Case 5
                    _img.ImageUrl = "images/icoTreeviewIcon.gif"
                Case 6
                    _img.ImageUrl = "images/CompositePage.gif"
            End Select

            _cell.Controls.Add(_img)
            _row.Cells.Add(_cell)

            Dim _cell2 As New TableCell
            Dim _link As New HyperLink
            _link.CssClass = "hyperlink_normal"
            Select Case Type
                Case 0
                    _link.NavigateUrl = "FormList.aspx?a=" & AppID.ToString & "&ViewID=" & _viewID
                Case 1
                    _link.NavigateUrl = "CalList.aspx?a=" & AppID.ToString & "&ViewID=" & _viewID
                Case 2
                    _link.NavigateUrl = "ChartList.aspx?a=" & AppID.ToString & "&ViewID=" & _viewID
                Case 3
                    _link.NavigateUrl = "SchedulerList.aspx?a=" & AppID.ToString & "&ViewID=" & _viewID
                Case 4
                    _link.NavigateUrl = "ImagemapList.aspx?a=" & AppID.ToString & "&ViewID=" & _viewID
                Case 5
                    _link.NavigateUrl = "TreeViewList.aspx?a=" & AppID.ToString & "&ViewID=" & _viewID
                Case 6
                    _link.NavigateUrl = "CompositeView.aspx?a=" & AppID.ToString & "&ID=" & _viewID
            End Select


            _link.Text = _caption
            _cell2.Controls.Add(_link)
            _row.Cells.Add(_cell2)



        Next _counter

    End Sub

    Private Shared Function CreateViewsTable(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As Table
        Dim _tbl As New Table
        _tbl.Width = New Unit(100, UnitType.Percentage)
        _tbl.Height = New Unit(50, UnitType.Pixel)
        _tbl.CellPadding = 0
        _tbl.CellSpacing = 0

        Dim _set As DataSet = webobj.Views_GetAllPublishedMainByType(AppID, 0)
        LoadTableRowSet(AppID, _set, _tbl, 0)

        '_set = webobj.Views_GetPublishedByType(AppID, 1)
        'LoadTableRowSet(AppID, _set, _tbl, 1)

        _set = webobj.Views_GetPublishedByType(AppID, 2)
        LoadTableRowSet(AppID, _set, _tbl, 2)

        _set = webobj.Views_GetPublishedByType(AppID, 3)
        LoadTableRowSet(AppID, _set, _tbl, 3)

        _set = webobj.Views_GetPublishedByType(AppID, 4)
        LoadTableRowSet(AppID, _set, _tbl, 4)

        _set = webobj.Views_GetPublishedByType(AppID, 5)
        LoadTableRowSet(AppID, _set, _tbl, 5)

        _set = webobj.CompositePages_Get(AppID)
        LoadTableRowSet(AppID, _set, _tbl, 6)

        Return _tbl

    End Function

    Private Shared Function CreateSearchPanel(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As Table
        Dim _tbl As New Table
        _tbl.Width = New Unit(100, UnitType.Percentage)
        _tbl.Height = New Unit(50, UnitType.Pixel)
        _tbl.CellPadding = 0
        _tbl.CellSpacing = 0
        Dim _row As New TableRow
        _tbl.Rows.Add(_row)

        Dim _cell As New TableCell
        _cell.Width = New Unit(100, UnitType.Pixel)
        Dim _textbox As New TextBox
        _textbox.CssClass = "textbox_normal"
        _textbox.Width = New Unit(150, UnitType.Pixel)
        _cell.Controls.Add(_textbox)
        _row.Cells.Add(_cell)

        Dim _row2 As New TableRow
        _tbl.Rows.Add(_row2)

        Dim _cell2 As New TableCell
        _cell2.Width = New Unit(100, UnitType.Pixel)
        Dim _button As New Button
        _button.CssClass = "button_normal"
        _button.Text = "Search"
        _cell2.Controls.Add(_button)
        _row2.Cells.Add(_cell2)

        Return _tbl

    End Function

    Private Shared Function CreateFormSearchDropDown(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As DropDownList
        Dim _forms As DataSet = webobj.SearchForms_GetPublished(AppID, "")
        Dim _Dropdown As New DropDownList
        _Dropdown.ID = "AppFormSearchDD"
        _Dropdown.CssClass = "app_AppBarDropDown"
        _Dropdown.Attributes.Add("onchange", "window.location='searchform.aspx?a=" & AppID.ToString & "&Category=aecafa58-395f-42f5-99ad-f3fe3d26affe&Workflow=&ListID=' + this.value;return false;")

        _Dropdown.Items.Clear()
        Dim _item As New System.Web.UI.WebControls.ListItem("--Please select an item--", "")
        _Dropdown.Items.Add(_item)

        Dim _counter As Integer
        For _counter = 0 To _forms.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_forms.Tables(0).Rows(_counter).Item("Caption"))
            Dim _formID As String = GlobalFunctions.FormatData(_forms.Tables(0).Rows(_counter).Item("ListID"))
            Dim _item2 As New System.Web.UI.WebControls.ListItem(_caption, _formID)
            _Dropdown.Items.Add(_item2)
        Next _counter


        Return _Dropdown
    End Function

    Private Shared Function CreateFormCreateDropDown(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As DropDownList
        Dim _forms As DataSet = webobj.Forms_GetPublished(AppID, "")
        Dim _Dropdown As New DropDownList
        _Dropdown.ID = "AppCreateNewDD"
        _Dropdown.CssClass = "app_AppBarDropDown"
        _Dropdown.Attributes.Add("onchange", "window.location='FillForm.aspx?a=" & AppID.ToString & "&FT=1&ListID=' + this.value;return false;")

        _Dropdown.Items.Clear()
        Dim _item As New System.Web.UI.WebControls.ListItem("--Please select an item--", "")
        _Dropdown.Items.Add(_item)

        Dim _counter As Integer
        For _counter = 0 To _forms.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_forms.Tables(0).Rows(_counter).Item("Caption"))
            Dim _formID As String = GlobalFunctions.FormatData(_forms.Tables(0).Rows(_counter).Item("ListID"))
            Dim _item2 As New System.Web.UI.WebControls.ListItem(_caption, _formID)
            _Dropdown.Items.Add(_item2)
        Next _counter


        Return _Dropdown
    End Function

    Private Shared Function CreateTaskInboxLink(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As HyperLink
        Dim _hyperlink As New HyperLink
        _hyperlink.ID = "hlTaskInbox"
        _hyperlink.NavigateUrl = "taskinbox.aspx?a=" & AppID.ToString
        _hyperlink.CssClass = "app_GeneralLink"

        Dim _tasks As Integer = webobj.InboxItems_GetCountByApp(AppID)
        If _tasks > 0 Then
            _hyperlink.Text = "Inbox (" & _tasks & ")"
        Else
            _hyperlink.Text = "Inbox"
        End If
        Return _hyperlink
    End Function

    Private Shared Function CreateTaskInboxPureLink(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As Literal
        Dim _hyperlink As New Literal
        _hyperlink.Text = "taskinbox.aspx?a=" & AppID.ToString
        Return _hyperlink
    End Function
    Private Shared Function CreateRapid4Link(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As Literal
        Dim _hyperlink As New Literal
        _hyperlink.Text = "login.aspx"
        Return _hyperlink
    End Function

    Private Shared Function CreateMySubmissionsLink(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As HyperLink
        Dim _hyperlink As New HyperLink
        _hyperlink.ID = "hlMySubmissions"
        _hyperlink.NavigateUrl = "mysubmissions.aspx?a=" & AppID.ToString
        _hyperlink.CssClass = "app_GeneralLink"
        _hyperlink.Text = "My Submissions"
        Return _hyperlink
    End Function

    Private Shared Function CreateMySubmissionsPureLink(ByVal AppID As Guid, ByRef webobj As ZukamiLib.WebSession) As Literal
        Dim _lit As New Literal
        _lit.Text = "mysubmissions.aspx?a=" & AppID.ToString
        Return _lit
    End Function



    Private Shared Sub AddToPlcMain(ByRef Main As PlaceHolder, ByRef ObjToAdd As Object)
        If ObjToAdd Is Nothing = False Then
            Main.Controls.Add(ObjToAdd)
        End If
    End Sub

    Public Shared Function GetAllAppTabs(ByRef Webobj As ZukamiLib.WebSession, ByRef AppID As String, TabGroup As String) As String
        Dim _set As DataSet = Webobj.AppTabs_GetByGroup(New Guid(AppID), TabGroup)
        Dim _counter As Integer = 0
        Dim _HTML As String = ""
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _tcaption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("TabCaption"))
            Dim _thtml As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("TabHTML"))
            Dim _resourceURL As String = ""

            Dim _tabType As ZukamiLib.WebSession.APPRESOURCETYPES = GlobalFunctions.FormatInteger(_set.Tables(0).Rows(_counter).Item("TabResourceType"))
            Dim _resID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("TabResourceID"))

            Dim _currentUser As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Select Case _tabType
                Case ZukamiLib.WebSession.APPRESOURCETYPES.FORM
                    If GlobalFunctions.HasFormPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("FillForm", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.TABULARVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("LaunchView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.CALVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("LaunchCalView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SCHEDULERVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("LaunchScheduleView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.IMAGEMAPVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("LaunchImageMapView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.MAPVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("MapViewer", AppID.ToString, _resID)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.REPORTVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("ReportViewer", AppID.ToString, _resID)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.CHARTVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("LaunchChartView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.TREEVIEW
                    If GlobalFunctions.HasViewPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("LaunchTreeView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.COMPOSITEVIEW
                    If GlobalFunctions.HasCompositePagePermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "V") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("LaunchCompositeView", _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHFORM
                    If GlobalFunctions.HasFormPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "S") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("SearchForm", , _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SEARCHVIEW
                    If GlobalFunctions.HasFormPermissions(Webobj, _currentUser.CurrentUserGUID, New Guid(_resID), "S") = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("SearchForm", , _resID, AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.DASHBOARDVIEW
                    If GlobalFunctions.CanViewDashboard(_currentUser) = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("Dashboard", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.MYSUBMISSIONSVIEW
                    _resourceURL = Navigator.GetJScriptURL("MySubmissions", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SETTINGSVIEW
                    If GlobalFunctions.CanManageSettings(_currentUser) = False Then GoTo NextTab
                    _resourceURL = Navigator.GetJScriptURL("Settings", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.TASKINBOXVIEW
                    _resourceURL = Navigator.GetJScriptURL("Inbox", AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.SUBMISSIONSEARCHVIEW
                    _resourceURL = Navigator.GetJScriptURL("Search", , , AppID.ToString)
                Case ZukamiLib.WebSession.APPRESOURCETYPES.CUSTOM
                    Dim _customLink As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("TabCustomLink"))
                    _resourceURL = _customLink
            End Select

            'we add it now
            _thtml = Replace(_thtml, "[$LinkURL]", _resourceURL)
            _thtml = Replace(_thtml, "[$LinkCaption]", _tcaption)
            _HTML += _thtml & vbCrLf

NextTab:
        Next _counter

        Dim _uiculture As String = GetZukamiSettings.UICulture
        If Len(_uiculture) = 0 Then _uiculture = "en-US"
        Dim mysubs As New Collection
        GlobalFunctions.LoadAllMySubs(mysubs, Webobj, AppID.ToString)

        'now we replace with substitution string
        _HTML = GlobalFunctions.ReplaceSubstitution(_HTML, mysubs, _uiculture)



        Return _HTML

    End Function

    Public Shared Function SubstituteFixedTags(SubstitutionTag As String, DefaultValue As String) As String
        Dim lang As String = "en-US"
        Dim zuk As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        If zuk Is Nothing = False Then
            lang = zuk.UICulture
        End If
        If Len(lang) = 0 Then lang = "en-US"

        Dim subname As String = SubstitutionTag & "." & lang
        Dim _webobj As New ZukamiLib.WebSession(GetZukamiSettings)
        _webobj.OpenConnection()

        _webobj.CustomSQLCommand("SELECT [Value] FROM SubstitutionStrings WHERE [StringName] LIKE '" & subname & "'")
        _webobj.CustomClearParameters()
        Dim _set As DataSet = _webobj.CustomSQLExecuteReturn()
        Dim _Value As String = DefaultValue
        If _set.Tables(0).Rows.Count > 0 Then
            _Value = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Value"))
            If Len(_Value) > 3 Then
                _Value = Mid(_Value, 4, Len(_Value) - 3)
            End If
        End If

        _webobj.CloseConnection()
        Return _Value
    End Function

    Public Shared Function SubstituteThemeTags(ByVal ThemeTag As String, ByRef Webobj As ZukamiLib.WebSession, ByRef Objects As ThemeObjects, ByRef plcMain As PlaceHolder, ByVal Tag As String, ByVal HTML As String) As Boolean
        Select Case LCase(Tag)
            Case "[$form]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, Objects.FormEngine)
            Case "[$main]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                Select Case ThemeTag
                    Case "MASTP-SUB"
                        AddToPlcMain(plcMain, Objects.MainObject)
                        AddToPlcMain(plcMain, Objects.FormEngine)
                    Case "MASTP-PM"
                        AddToPlcMain(plcMain, Objects.ValSummary)
                        AddToPlcMain(plcMain, Objects.MainObject)
                    Case "MASTP-WS"
                        AddToPlcMain(plcMain, Objects.MainObject)
                    Case "MASTP-AS"
                        AddToPlcMain(plcMain, Objects.MainObject)
                        AddToPlcMain(plcMain, Objects.ValSummary)
                        AddToPlcMain(plcMain, Objects.FormEngine)
                    Case "MASTP-ACT"
                        AddToPlcMain(plcMain, Objects.ValSummary)
                        AddToPlcMain(plcMain, Objects.MainObject)
                    Case "MASTP-RSG"
                        AddToPlcMain(plcMain, Objects.ValSummary)
                        AddToPlcMain(plcMain, Objects.MainObject)
                    Case "SF"
                        AddToPlcMain(plcMain, Objects.MainObject)
                    Case Else
                        AddToPlcMain(plcMain, Objects.MainObject)
                End Select
            Case "[$taskinbox]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, Objects.TaskInbox)
            Case "[$taskinboxlink]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateTaskInboxLink(Objects.AppID, Webobj))
            Case "[$taskinboxpurelink]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateTaskInboxPureLink(Objects.AppID, Webobj))
            Case "[$rapid4link]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateRapid4Link(Objects.AppID, Webobj))
            Case "[$viewstable]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateViewsTable(Objects.AppID, Webobj))
            Case "[$mysubmissionslink]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateMySubmissionsLink(Objects.AppID, Webobj))
            Case "[$mysubmissionspurelink]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateMySubmissionsPureLink(Objects.AppID, Webobj))
            Case "[$apptab]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateAppTab(Webobj, Objects.AppID))
            Case "[$createnewdropdown]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateFormCreateDropDown(Objects.AppID, Webobj))
            Case "[$formsearchdropdown]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateFormSearchDropDown(Objects.AppID, Webobj))
            Case "[$keywordsearch]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, CreateSearchPanel(Objects.AppID, Webobj))
            Case "[$dashboard]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, Objects.MainObject)
            Case "[$loginpanel]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, Objects.LoginPanel)
            Case "[$view]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, Objects.MainObject)
            Case "[$mysubmissions]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, Objects.SecondaryObject)
                AddToPlcMain(plcMain, Objects.MainObject)
            Case "[$formerrormsg]", "[$viewerrormsg]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                AddToPlcMain(plcMain, Objects.ValSummary)
            Case "[$appicon]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                Dim _img As New Image
                _img.BorderStyle = BorderStyle.None
                _img.ImageUrl = GlobalFunctions.App_GetIcon(Webobj, Objects.AppID)
                AddToPlcMain(plcMain, _img)
            Case "[$lastlogintime]"
                If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                Dim _img As New Label
                _img.Text = Format(GetZukamiSettings.LastLoginTime, "dd/MMM/yyyy hh:mm tt")
                AddToPlcMain(plcMain, _img)
            Case "[$appiconrelurl]"
                AddToPlcMain(plcMain, New LiteralControl(GlobalFunctions.App_GetIcon(Webobj, Objects.AppID)))
            Case "[$blynkstart]"
                'Blynkstart
                AddToPlcMain(plcMain, New LiteralControl(Resources.Resource.BlynkHeader))
            Case "[$blynkend]"
                'Blynkstart
                AddToPlcMain(plcMain, New LiteralControl(Resources.Resource.BlynkFooter))
            Case "[$formicon]"
                If Objects Is Nothing = False Then
                    If Objects.ListRow Is Nothing = False Then
                        Dim _formicon As String = GlobalFunctions.FormatData(Objects.ListRow.Item("CustomIcon"))
                        If Len(_formicon) = 0 Then _formicon = "~\images\icoEformBigIcon.gif"

                        If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                        Dim _img As New Image
                        _img.ImageUrl = _formicon
                        _img.CssClass = "FormLogo"
                        AddToPlcMain(plcMain, _img)
                    End If
                End If
            Case Else
                If StrComp(Left(Tag, Len("[$Img:")), "[$Img:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the image name
                    Dim _imgName As String = Mid(Tag, Len("[$Img:") + 1, Len(Tag) - 1 - Len("[$Img:"))

                    Dim _img As New Image
                    _img.BorderStyle = BorderStyle.None
                    _img.ImageUrl = "~\resources\images\" & _imgName
                    AddToPlcMain(plcMain, _img)
                ElseIf StrComp(Left(Tag, Len("[$Imgpath:")), "[$Imgpath:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the image name
                    Dim _imgName As String = "resources\images\" & Mid(Tag, Len("[$Imgpath:") + 1, Len(Tag) - 1 - Len("[$Imgpath:"))
                    AddToPlcMain(plcMain, New LiteralControl(_imgName))
                ElseIf StrComp(Left(Tag, Len("[$Applinks:")), "[$Applinks:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the image name
                    Dim _TabGroup As String = Mid(Tag, Len("[$Applinks:") + 1, Len(Tag) - 1 - Len("[$Applinks:"))
                    AddToPlcMain(plcMain, New LiteralControl(GetAllAppTabs(Webobj, Objects.AppID.ToString, _TabGroup)))
                ElseIf StrComp(Left(Tag, Len("[$Querystring:")), "[$Querystring:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the querystring name
                    Dim _qsTag As String = Mid(Tag, Len("[$Querystring:") + 1, Len(Tag) - 1 - Len("[$Querystring:"))
                    AddToPlcMain(plcMain, New LiteralControl(System.Web.HttpContext.Current.Request.QueryString(_qsTag)))
                ElseIf StrComp(Left(Tag, Len("[$Form:")), "[$Form:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the querystring name
                    Dim _qsTag As String = Mid(Tag, Len("[$Form:") + 1, Len(Tag) - 1 - Len("[$Form:"))
                    AddToPlcMain(plcMain, New LiteralControl(System.Web.HttpContext.Current.Request.Form(_qsTag)))
                ElseIf StrComp(Left(Tag, Len("[$Session:")), "[$Session:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the querystring name
                    Dim _qsTag As String = Mid(Tag, Len("[$Session:") + 1, Len(Tag) - 1 - Len("[$Session:"))
                    AddToPlcMain(plcMain, New LiteralControl(System.Web.HttpContext.Current.Session(_qsTag)))
                ElseIf StrComp(Left(Tag, Len("[$Filerespath:")), "[$Filerespath:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the image name
                    Dim _imgName As String = "resources\files\" & Objects.AppID.ToString & "\" & Mid(Tag, Len("[$Filerespath:") + 1, Len(Tag) - 1 - Len("[$Filerespath:"))
                    AddToPlcMain(plcMain, New LiteralControl(_imgName))
                ElseIf StrComp(Left(Tag, Len("[$FormLink:")), "[$FormLink:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the form name
                    Dim _formName As String = Mid(Tag, Len("[$FormLink:") + 1, Len(Tag) - 1 - Len("[$FormLink:"))
                    Dim _set As DataSet = Webobj.Forms_GetByFormName(_formName)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Dim _listID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("ListID"))
                        AddToPlcMain(plcMain, New LiteralControl(Navigator.GetJScriptURL("FillForm", _listID, Objects.AppID.ToString)))
                    End If
                ElseIf StrComp(Left(Tag, Len("[$SearchLink:")), "[$SearchLink:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the form name
                    Dim _formName As String = Mid(Tag, Len("[$SearchLink:") + 1, Len(Tag) - 1 - Len("[$SearchLink:"))
                    Dim _set As DataSet = Webobj.Forms_GetByFormName(_formName)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Dim _listID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("ListID"))
                        Dim _workflowID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("WorkflowID"))
                        AddToPlcMain(plcMain, New LiteralControl(Navigator.GetJScriptURL("SearchForm", _workflowID, _listID, Objects.AppID.ToString)))
                    End If
                ElseIf StrComp(Left(Tag, Len("[$ViewLink:")), "[$ViewLink:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the view name
                    Dim _viewName As String = Mid(Tag, Len("[$ViewLink:") + 1, Len(Tag) - 1 - Len("[$ViewLink:"))
                    Dim _set As DataSet = Webobj.Views_GetByViewName(_viewName)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Dim _listID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("ID"))
                        AddToPlcMain(plcMain, New LiteralControl(Navigator.GetJScriptURL("LaunchView", _listID, Objects.AppID.ToString)))
                    End If
                ElseIf StrComp(Left(Tag, Len("[$CalendarViewLink:")), "[$CalendarViewLink:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the view name
                    Dim _viewName As String = Mid(Tag, Len("[$CalendarViewLink:") + 1, Len(Tag) - 1 - Len("[$CalendarViewLink:"))
                    Dim _set As DataSet = Webobj.Views_GetByViewName(_viewName)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Dim _listID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("ID"))
                        AddToPlcMain(plcMain, New LiteralControl(Navigator.GetJScriptURL("LaunchCalView", _listID, Objects.AppID.ToString)))
                    End If
                ElseIf StrComp(Left(Tag, Len("[$ChartViewLink:")), "[$ChartViewLink:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the view name
                    Dim _viewName As String = Mid(Tag, Len("[$ChartViewLink:") + 1, Len(Tag) - 1 - Len("[$ChartViewLink:"))
                    Dim _set As DataSet = Webobj.Views_GetByViewName(_viewName)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Dim _listID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("ID"))
                        AddToPlcMain(plcMain, New LiteralControl(Navigator.GetJScriptURL("LaunchChartView", _listID, Objects.AppID.ToString)))
                    End If
                ElseIf StrComp(Left(Tag, Len("[$TabularView:")), "[$TabularView:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the tabular view name
                    Dim _viewName As String = Mid(Tag, Len("[$TabularView:") + 1, Len(Tag) - 1 - Len("[$TabularView:"))
                    Dim _set As DataSet = Webobj.Views_GetByViewName(_viewName)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Dim _listID As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(0).Item("ID"))
                        Dim _tablist As Object = Nothing
                        If IsCurrentRequestMobileVersion() Then
                            _tablist = Objects.Page.LoadControl("usercontrols\TabularListMobile.ascx")
                        Else
                            _tablist = Objects.Page.LoadControl("usercontrols\TabularList.ascx")
                        End If

                        AddToPlcMain(plcMain, _tablist)
                        _tablist.setfullwidth()
                        _tablist.ID = "Tab" & _listID.ToString
                        _tablist.ViewID = _listID
                        _tablist.formid = GlobalFunctions.GetViewFormID(Webobj, _listID.ToString)
                        _tablist.Show()

                    End If
                ElseIf StrComp(Left(Tag, Len("[$SPRINGRemindersView:")), "[$SPRINGRemindersView:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the tabular view name
                    Dim _viewName As String = Mid(Tag, Len("[$SPRINGRemindersView:") + 1, Len(Tag) - 1 - Len("[$SPRINGRemindersView:"))

                    Webobj.CustomSQLCommand("SELECT * FROM [ReminderTasks] WHERE RecipientID='" & GetZukamiSettings.CurrentUserGUID.ToString & "' ORDER BY [DateSent] DESC")
                    Webobj.CustomClearParameters()
                    Dim _rems As DataSet = Webobj.CustomSQLExecuteReturn

                    Dim i As Integer
                    For i = 0 To _rems.Tables(0).Rows.Count - 1
                        Dim _subject As String = GlobalFunctions.FormatData(_rems.Tables(0).Rows(i).Item("Subject"))
                        Dim _link As String = GlobalFunctions.FormatData(_rems.Tables(0).Rows(i).Item("Link"))
                        Dim _datesent As String = Format(GlobalFunctions.GetDateTime(_rems.Tables(0).Rows(i).Item("DateSent")), "dd/MMM/yyyy")
                        Dim _detailedsubject As String = GlobalFunctions.FormatData(_rems.Tables(0).Rows(i).Item("DetailedSubject"))
                        Dim a As New LiteralControl
                        a.Visible = True
                        Dim _a As String = "<a href=""[$Link]"" style=""text-decoration: none;""><span style=""font-size: 7pt; font-weight: 700; font-family: arial; color: #808080;"">[$DateTag]</span><span style=""font-weight: 700; font-size: 7pt; font-family: arial; color: #018dc8;""><br />[$Subject]<br /></span><span style=""font-size: 7pt; font-weight: 700; font-family: arial; color: #808080;"">[$DetailedSubject]</span><br><br></a>"
                        _a = Replace(_a, "[$DateTag]", _datesent, , , CompareMethod.Text)
                        _a = Replace(_a, "[$Subject]", _subject, , , CompareMethod.Text)
                        _a = Replace(_a, "[$DetailedSubject]", _detailedsubject, , , CompareMethod.Text)
                        _a = Replace(_a, "[$Link]", _link, , , CompareMethod.Text)

                        a.Text = _a
                        AddToPlcMain(plcMain, a)
                    Next i


                ElseIf StrComp(Left(Tag, Len("[$ChatView:")), "[$ChatView:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the tabular view name
                    Dim _TagID As String = Mid(Tag, Len("[$ChatView:") + 1, Len(Tag) - 1 - Len("[$ChatView:"))
                    Dim _skip As Boolean = False
                    Dim aostring As String = ""
                    If InStr(1, _TagID, "querystring:", CompareMethod.Text) > 0 Then
                        Dim _QueryID As String = Mid(_TagID, Len("querystring:") + 1, Len(_TagID) - Len("querystring:"))
                        If Len(_QueryID) > 0 Then
                            If StrComp(_QueryID, "submissionid", CompareMethod.Text) = 0 Then
                                _TagID = System.Web.HttpContext.Current.Request.QueryString("ID")
                                If Len(_TagID) > 0 Then
                                    'we grab the ID of the listitem
                                    Webobj.CustomSQLCommand("SELECT ListItemID FROM [workflowinstances] WHERE InstanceID='" & _TagID & "'")
                                    Webobj.CustomClearParameters()
                                    Dim _Set As DataSet = Webobj.CustomSQLExecuteReturn()
                                    If _Set.Tables(0).Rows.Count > 0 Then
                                        _TagID = GlobalFunctions.FormatData(_Set.Tables(0).Rows(0).Item(0))
                                    End If
                                    _Set.Dispose()
                                    _Set = Nothing
                                Else
                                    _skip = True
                                End If
                            Else
                                _TagID = System.Web.HttpContext.Current.Request.QueryString(_QueryID)
                                If Len(Trim(_TagID)) = 0 Then
                                    _skip = True
                                End If
                            End If
                        Else
                            _skip = True
                        End If
                    ElseIf InStr(1, _TagID, "ao:", CompareMethod.Text) > 0 Then
                        Dim arrTags() As String = Split(_TagID, ":")
                        aostring = arrTags(0)
                        _TagID = arrTags(1)
                    End If

                    If _skip = False Then
                        Dim _tablist As Object = Objects.Page.LoadControl("usercontrols\RFForum.ascx")
                        _tablist.EnableViewState = False
                        AddToPlcMain(plcMain, _tablist)
                        _tablist.ID = "ChatMain"
                        If aostring = "ao" Then _tablist.setao()
                        _tablist.ChatThread = _TagID
                        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
                        _tablist.SetPostingUser(_settings.CurrentUserGUID)
                        _tablist.SetUploadFolder(_settings.UploadPath)
                        _tablist.SetThreadID(Guid.NewGuid)
                        _tablist.Loadall()
                    End If
                ElseIf StrComp(Left(Tag, Len("[$ChartView:")), "[$ChartView:", CompareMethod.Text) = 0 Then
                    If Len(HTML) > 0 Then AddToPlcMain(plcMain, New LiteralControl(HTML))
                    'we get the tabular view name
                    Dim _viewName As String = Mid(Tag, Len("[$ChartView:") + 1, Len(Tag) - 1 - Len("[$ChartView:"))
                    Dim _width As Integer = 800
                    Dim _height As Integer = 600
                    If InStr(_viewName, ":", CompareMethod.Text) > 0 Then
                        'width and height specified
                        Dim arrViews() As String = Split(_viewName, ":")
                        If UBound(arrViews) >= 1 Then
                            Dim strWidthHeight As String = arrViews(1)
                            Dim arrSizes() As String = Split(strWidthHeight, ",")
                            If UBound(arrSizes) = 1 Then
                                _width = GlobalFunctions.FormatInteger(arrSizes(0), 800)
                                _height = GlobalFunctions.FormatInteger(arrSizes(1), 600)
                                _viewName = arrViews(0)
                            End If
                        End If
                    End If

                    Dim _set As DataSet = Webobj.Views_GetByViewName(_viewName)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Dim _listID As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(0).Item("ID"))
                        Dim _tablist As Object = Objects.Page.LoadControl("usercontrols\ChartList.ascx")
                        AddToPlcMain(plcMain, _tablist)
                        _tablist.id = "Chart_" & _listID.ToString
                        _tablist.ViewID = _listID.ToString
                        _tablist.ChartWidth = _width
                        _tablist.ChartHeight = _height
                        _tablist.Show()
                    End If
                Else
                    Return False
                End If
        End Select
        Return True
    End Function

    Private Shared Function FormatForHTMLImageTag(ByVal Tag As String) As String
        Return Replace(Tag, "~\images", "images", vbTextCompare)
    End Function

    Private Shared Function GetViewFormID(ByRef webobj As ZukamiLib.WebSession, ViewID As String) As Guid
        GetViewFormID = Guid.Empty
        Dim _viewsources As DataSet = webobj.ViewSourceForms_Get(New Guid(ViewID))
        If _viewsources.Tables(0).Rows.Count > 0 Then
            GetViewFormID = GlobalFunctions.GetGUID(_viewsources.Tables(0).Rows(0).Item("SourceFormID"))
        End If
        _viewsources.Dispose()
    End Function

    Private Shared Function GetSideBarContent(ByRef webobj As ZukamiLib.WebSession, ByRef AppID As Guid) As String
        Dim _forms As DataSet = webobj.Forms_GetPublished(AppID, "")
        Dim _tableviews As DataSet = webobj.Views_GetAllPublishedMainByType(AppID, 0)
        Dim _calviews As DataSet = webobj.Views_GetAllPublishedMainByType(AppID, 3)
        Dim _mapviews As DataSet = webobj.Views_GetAllPublishedMainByType(AppID, 6)
        Dim _reportviews As DataSet = webobj.Views_GetAllPublishedMainByType(AppID, 7)
        Dim _chartviews As DataSet = webobj.Views_GetAllPublishedMainByType(AppID, 2)
        Dim _compositeviews As DataSet = webobj.CompositePages_GetForApp(AppID)



        Dim _strFull As String = ""


        Dim _counter As Integer


        'FORMS
        Dim _strPortion As String = ""
        If _forms.Tables(0).Rows.Count > 0 Then
            _strPortion = "<li>" &
        "<a href = ""#"" onclick=""$('#mnusub1').slideToggle(100);""><em Class=""fa fa-edit""></em><span> Create New...</span> <span Class=""indicator""></span></a>" &
        "<div id = ""mnusub1"" Class=""submenuindent"" style=""display: none;"">" &
        "[$MainContent]" &
        "</div>" &
        "</li>"
        End If

        Dim _content As String = ""
        For _counter = 0 To _forms.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_forms.Tables(0).Rows(_counter).Item("Caption"))
            Dim _formID As String = GlobalFunctions.FormatData(_forms.Tables(0).Rows(_counter).Item("ListID"))
            Dim _link As String = "FillForm.aspx?a=" & AppID.ToString & "&FT=1&ListID=" & _formID
            _content += "<div><a href=""" & _link & """><em class=""fa fa-edit""></em><span>" & _caption & "</span></a></div>"
        Next _counter

        _strPortion = Replace(_strPortion, "[$MainContent]", _content,,, CompareMethod.Text)
        _strFull += _strPortion


        'TABULAR VIEWS
        _strPortion = ""
        If _tableviews.Tables(0).Rows.Count > 0 Then
            _strPortion = "<li>" &
        "<a href = ""#"" onclick=""$('#mnusub2').slideToggle(100);""><em Class=""fa fa-search""></em><span> Enquiry</span> <span Class=""indicator""></span></a>" &
        "<div id = ""mnusub2"" Class=""submenuindent"" style=""display: none;"">" &
        "[$MainContent]" &
        "</div>" &
        "</li>"
        End If

        _content = ""
        For _counter = 0 To _tableviews.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_tableviews.Tables(0).Rows(_counter).Item("Caption"))
            Dim _viewID As String = GlobalFunctions.FormatData(_tableviews.Tables(0).Rows(_counter).Item("ID"))
            Dim _link As String = "FormList.aspx?a=" & AppID.ToString & "&FT=1&ViewID=" & _viewID
            _content += "<div><a href=""" & _link & """><em class=""fa fa-search""></em><span>" & _caption & "</span></a></div>"
        Next _counter

        _strPortion = Replace(_strPortion, "[$MainContent]", _content,,, CompareMethod.Text)
        _strFull += _strPortion

        'CHART VIEWS
        _strPortion = ""
        If _chartviews.Tables(0).Rows.Count > 0 Then
            _strPortion = "<li>" &
        "<a href = ""#"" onclick=""$('#mnusub3').slideToggle(100);""><em Class=""fa fa-dashboard""></em><span> Charts</span> <span Class=""indicator""></span></a>" &
        "<div id = ""mnusub3"" Class=""submenuindent"" style=""display: none;"">" &
        "[$MainContent]" &
        "</div>" &
        "</li>"
        End If

        _content = ""
        For _counter = 0 To _chartviews.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_chartviews.Tables(0).Rows(_counter).Item("Caption"))
            Dim _viewID As String = GlobalFunctions.FormatData(_chartviews.Tables(0).Rows(_counter).Item("ID"))
            Dim _link As String = "ChartList.aspx?a=" & AppID.ToString & "&FT=1&ViewID=" & _viewID
            _content += "<div><a href=""" & _link & """><em class=""fa fa-dashboard""></em><span>" & _caption & "</span></a></div>"
        Next _counter

        _strPortion = Replace(_strPortion, "[$MainContent]", _content,,, CompareMethod.Text)
        _strFull += _strPortion


        'CAL VIEWS
        _strPortion = ""
        If _calviews.Tables(0).Rows.Count > 0 Then
            _strPortion = "<li>" &
        "<a href = ""#"" onclick=""$('#mnusub5').slideToggle(100);""><em Class=""fa fa-calendar""></em><span> Calendars</span> <span Class=""indicator""></span></a>" &
        "<div id = ""mnusub5"" Class=""submenuindent"" style=""display: none;"">" &
        "[$MainContent]" &
        "</div>" &
        "</li>"
        End If

        _content = ""
        For _counter = 0 To _calviews.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_calviews.Tables(0).Rows(_counter).Item("Caption"))
            Dim _viewID As String = GlobalFunctions.FormatData(_calviews.Tables(0).Rows(_counter).Item("ID"))
            Dim _link As String = "SchedulerList.aspx?a=" & AppID.ToString & "&FT=1&ViewID=" & _viewID
            _content += "<div><a href=""" & _link & """><em class=""fa fa-calendar""></em><span>" & _caption & "</span></a></div>"
        Next _counter

        _strPortion = Replace(_strPortion, "[$MainContent]", _content,,, CompareMethod.Text)
        _strFull += _strPortion

        'MAP VIEWS
        _strPortion = ""
        If _mapviews.Tables(0).Rows.Count > 0 Then
            _strPortion = "<li>" &
        "<a href = ""#"" onclick=""$('#mnusub7').slideToggle(100);""><em Class=""fa fa-picture-o""></em><span> Maps</span> <span Class=""indicator""></span></a>" &
        "<div id = ""mnusub7"" Class=""submenuindent"" style=""display: none;"">" &
        "[$MainContent]" &
        "</div>" &
        "</li>"
        End If

        _content = ""
        For _counter = 0 To _mapviews.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_mapviews.Tables(0).Rows(_counter).Item("Caption"))
            Dim _viewID As String = GlobalFunctions.FormatData(_mapviews.Tables(0).Rows(_counter).Item("ID"))
            Dim _link As String = "MapList.aspx?a=" & AppID.ToString & "&FT=1&ViewID=" & _viewID
            _content += "<div><a href=""" & _link & """><em class=""fa fa-picture-o""></em><span>" & _caption & "</span></a></div>"
        Next _counter

        _strPortion = Replace(_strPortion, "[$MainContent]", _content,,, CompareMethod.Text)
        _strFull += _strPortion

        'REPORT VIEWS
        _strPortion = ""
        If _reportviews.Tables(0).Rows.Count > 0 Then
            _strPortion = "<li>" &
        "<a href = ""#"" onclick=""$('#mnusub8').slideToggle(100);""><em Class=""fa fa-file""></em><span> Reports</span> <span Class=""indicator""></span></a>" &
        "<div id = ""mnusub8"" Class=""submenuindent"" style=""display: none;"">" &
        "[$MainContent]" &
        "</div>" &
        "</li>"
        End If

        _content = ""
        For _counter = 0 To _reportviews.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_reportviews.Tables(0).Rows(_counter).Item("Caption"))
            Dim _viewID As String = GlobalFunctions.FormatData(_reportviews.Tables(0).Rows(_counter).Item("ID"))
            Dim _link As String = "ReportViewer.aspx?a=" & AppID.ToString & "&FT=1&ViewID=" & _viewID
            _content += "<div><a href=""" & _link & """><em class=""fa fa-file""></em><span>" & _caption & "</span></a></div>"
        Next _counter

        _strPortion = Replace(_strPortion, "[$MainContent]", _content,,, CompareMethod.Text)
        _strFull += _strPortion


        'OTHERS
        _strPortion = ""
        If WebconfigSettings.Hidesidemenuothers = False Then
            If _compositeviews.Tables(0).Rows.Count > 0 Then
                _strPortion = "<li>" &
        "<a href = ""#"" onclick=""$('#mnusub6').slideToggle(100);""><em Class=""fa fa-calendar""></em><span> Others</span> <span Class=""indicator""></span></a>" &
        "<div id = ""mnusub6"" Class=""submenuindent"" style=""display: none;"">" &
        "[$MainContent]" &
        "</div>" &
        "</li>"
            End If

            _content = ""

            For _counter = 0 To _compositeviews.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_compositeviews.Tables(0).Rows(_counter).Item("PageName"))
                Dim _viewID As String = GlobalFunctions.FormatData(_compositeviews.Tables(0).Rows(_counter).Item("ID"))
                Dim _link As String = "CompositeView.aspx?a=" & AppID.ToString & "&FT=1&ID=" & _viewID
                _content += "<div><a href=""" & _link & """><em class=""fa fa-calendar""></em><span>" & _caption & "</span></a></div>"
            Next _counter
        End If
        'For _counter = 0 To _compositeviews.Tables(0).Rows.Count - 1
        '    Dim _caption As String = GlobalFunctions.FormatData(_compositeviews.Tables(0).Rows(_counter).Item("PageName"))
        '    Dim _viewID As String = GlobalFunctions.FormatData(_compositeviews.Tables(0).Rows(_counter).Item("ID"))
        '    Dim _link As String = "CompositeView.aspx?a=" & AppID.ToString & "&FT=1&ID=" & _viewID
        '    _content += "<div><a href=""" & _link & """><em class=""fa fa-calendar""></em><span>" & _caption & "</span></a></div>"
        'Next _counter

        _strPortion = Replace(_strPortion, "[$MainContent]", _content,,, CompareMethod.Text)
        _strFull += _strPortion


        Return _strFull

    End Function

    Private Shared Function TaskToHTML(ByRef taskSet As DataSet, ByRef AppID As Guid, ByRef TaskCount As Integer) As String
        Dim i As Integer
        Dim _counter As Integer = 0
        Dim _html As String = ""
        For i = 0 To taskSet.Tables(0).Rows.Count - 1
            Dim _taskcaption As String = GlobalFunctions.FormatData(taskSet.Tables(0).Rows(i).Item("Subject"))
            Dim _taskID As String = GlobalFunctions.FormatData(taskSet.Tables(0).Rows(i).Item("TaskID"))
            Dim _InboxItemsID As String = GlobalFunctions.FormatData(taskSet.Tables(0).Rows(i).Item("InboxItemsID"))
            Dim _read As Boolean = GlobalFunctions.FormatBoolean(taskSet.Tables(0).Rows(i).Item("ReadCol"))


            Dim _DateReceived As DateTime = GlobalFunctions.GetDateTime(taskSet.Tables(0).Rows(i).Item("DateSent"))
            Dim _Senderfullname As String = GlobalFunctions.FormatData(taskSet.Tables(0).Rows(i).Item("SenderFullName"))
            Dim _link As String = "ActionScreen.aspx?FT=1&a=" & AppID.ToString & "&ID=" & _taskID & "&ID2=" & _InboxItemsID

            If _read = False Then
                TaskCount += 1
                _html += "<div Class=""tasksRow"" onclick=""$(location).attr('href', '" & _link & "');""><div Class=""taskImg"">&nbsp;</div><div Class=""taskDesc"">" & _taskcaption & "</div><div Class=""taskSubDesc"">" & Format(_DateReceived, "dd/MMM/yyyy hh:mm tt") & " By " & _Senderfullname & "</div><span Class=""label label-info taskBadgeLoc"">New</span></div>"
                _counter += 1

            End If
        Next
        Return _html
    End Function

    Public Shared Function SubstituteThemeKeywordsmobile(ByRef WebObj As ZukamiLib.WebSession, ByVal Body As String, ByRef AppID As Guid, Optional ByVal Listname As String = "", Optional ByVal ListDescription As String = "", Optional ByRef objects As GlobalFunctions.ThemeObjects = Nothing) As String
        Dim _body As String = Body
        'If InStr(1, _body, "[$ApplicationName]", CompareMethod.Text) > 0 Then
        '    Dim _set As DataSet = WebObj.App_GetRecord(AppID)
        '    Dim _appName As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("AppName"))
        _body = Replace(_body, "[$ApplicationName]", "", , , CompareMethod.Text)
        ' End If
        If InStr(1, _body, "[$bgimagecsspath]", CompareMethod.Text) > 0 Then
            Dim _imageURL As String = Replace(GlobalFunctions.FormatForHTMLImageTag(GlobalFunctions.App_GetBGImagemobile(WebObj, AppID)), "\", "/")
            _body = Replace(_body, "[$bgimagecsspath]", _imageURL, , , CompareMethod.Text)
        End If
        Return _body
    End Function
    Public Shared Function SubstituteThemeKeywords(ByRef WebObj As ZukamiLib.WebSession, ByVal Body As String, ByRef AppID As Guid, Optional ByVal Listname As String = "", Optional ByVal ListDescription As String = "", Optional ByRef objects As GlobalFunctions.ThemeObjects = Nothing) As String
        Dim _body As String = Body
        If InStr(1, _body, "[$ApplicationName]", CompareMethod.Text) > 0 Then
            Dim _set As DataSet = WebObj.App_GetRecord(AppID)
            Dim _appName As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("AppName"))
            _body = Replace(_body, "[$ApplicationName]", _appName, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$submissionscount]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$submissionscount]", "0", , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$formname]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$formname]", Listname, , , CompareMethod.Text)
        End If
        If InStr(1, _body, "[$formdesc]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$formdesc]", ListDescription, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$efficiencyrating]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$efficiencyrating]", "0", , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$taskscount]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$taskscount]", "0", , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$latetaskscount]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$latetaskscount]", "0", , , CompareMethod.Text)
        End If



        If InStr(1, _body, "[$TasksFullList]", CompareMethod.Text) > 0 Then
            Dim _ii As DataSet = WebObj.InboxItems_GetByApp(AppID)
            Dim _taskcount As Integer = 0
            _body = Replace(_body, "[$TasksFullList]", TaskToHTML(_ii, AppID, _taskcount),, , CompareMethod.Text)
            If InStr(1, _body, "[$NewTasks]", CompareMethod.Text) > 0 Then
                _body = Replace(_body, "[$NewTasks]", _taskcount, , , CompareMethod.Text)
            End If

        End If



        If InStr(1, _body, "[$WebFtILink]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            Dim ss As String = WebconfigSettings.lognpath + _settings.CurrentUserGUID.ToString
            _body = Replace(_body, "[$WebFtILink]", ss, , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$WorkflowKPILink]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$WorkflowKPILink]", "Dashboard.aspx?a=" & AppID.ToString, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$ApplicationDesc]", CompareMethod.Text) > 0 Then
            Dim _set As DataSet = WebObj.App_GetRecord(AppID)
            Dim _appName As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("AppDesc"))
            _body = Replace(_body, "[$ApplicationDesc]", _appName, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$SideBarPanel]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$SideBarPanel]", GetSideBarContent(WebObj, AppID), , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$AppIconPath]", CompareMethod.Text) > 0 Then
            Dim _imageURL As String = GlobalFunctions.FormatForHTMLImageTag(GlobalFunctions.App_GetIcon(WebObj, AppID))
            _body = Replace(_body, "[$AppIconPath]", _imageURL, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$AppIconCSSPath]", CompareMethod.Text) > 0 Then
            Dim _imageURL As String = Replace(GlobalFunctions.FormatForHTMLImageTag(GlobalFunctions.App_GetIcon(WebObj, AppID)), "\", "/")
            _body = Replace(_body, "[$AppIconCSSPath]", _imageURL, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$bgimagecsspath]", CompareMethod.Text) > 0 Then
            Dim _imageURL As String = Replace(GlobalFunctions.FormatForHTMLImageTag(GlobalFunctions.App_GetBGImage(WebObj, AppID)), "\", "/")
            _body = Replace(_body, "[$bgimagecsspath]", _imageURL, , , CompareMethod.Text)
        End If


        If InStr(1, _body, "[$Querystring]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$Querystring]", System.Web.HttpContext.Current.Request.QueryString.ToString, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$ListName]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$ListName]", Listname, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$DefaultCSS]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$DefaultCSS]", "css/zukamiportal.css", , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$HomeLink]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$HomeLink]", "Default.aspx?a=" & AppID.ToString, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$AppCSS]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$AppCSS]", "css/app.css", , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$AppUnicodeCSS]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$AppUnicodeCSS]", "css/app_unicode.css", , , CompareMethod.Text)
        End If



        If InStr(1, _body, "[$ListDescription]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$ListDescription]", ListDescription, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$LogoutLink]", CompareMethod.Text) > 0 Then
            If GlobalFunctions.ISSPRING = True Then
                _body = Replace(_body, "[$LogoutLink]", "AppLogout.aspx?Ptrl=" & System.Web.HttpContext.Current.Request.QueryString("Ptrl") & "&AppID=" & AppID.ToString, , , CompareMethod.Text)
            Else
                _body = Replace(_body, "[$LogoutLink]", "AppLogout.aspx?AppID=" & AppID.ToString, , , CompareMethod.Text)
            End If

        End If

        If InStr(1, _body, "[$DashboardLink]", CompareMethod.Text) > 0 Then
            _body = Replace(_body, "[$DashboardLink]", "Dashboard.aspx?a=" & AppID.ToString, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$EditProfileLink]", CompareMethod.Text) > 0 Then
            If ISBLYNK = True Then
                _body = Replace(_body, "[$EditProfileLink]", "selfsettings.aspx?a=" & AppID.ToString & "&acid=" & System.Web.HttpContext.Current.Request.QueryString("acid"), , , CompareMethod.Text)
            Else
                _body = Replace(_body, "[$EditProfileLink]", "selfsettings.aspx?a=" & AppID.ToString, , , CompareMethod.Text)
            End If

        End If

        If InStr(1, _body, "[$EditProfileCaption]", CompareMethod.Text) > 0 Then
            If GlobalFunctions.ISSPRING = True Then
                If WebObj.UserInGroup_Get(New Guid("B1F18455-D4AE-4DCD-B1B3-C6751B000194")) = True Or System.Web.HttpContext.Current.Request.QueryString("Ptrl") = "1" Then
                    _body = Replace(_body, "[$EditProfileCaption]", "", , , CompareMethod.Text)
                End If

            End If
            _body = Replace(_body, "[$EditProfileCaption]", "Edit Profile", , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$CurrentUser.Fullname]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            _body = Replace(_body, "[$CurrentUser.Fullname]", _settings.CurrentFullName, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$CurrentUser.Email]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                Dim _desc As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Email"))
                _body = Replace(_body, "[$CurrentUser.Email]", _desc, , , CompareMethod.Text)
            End If
        End If

        If InStr(1, _body, "[$CurrentUser.Description]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                Dim _desc As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Description"))
                _body = Replace(_body, "[$CurrentUser.Description]", _desc, , , CompareMethod.Text)
            End If
        End If

        If InStr(1, _body, "[$CurrentUser.UserID]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            _body = Replace(_body, "[$CurrentUser.UserID]", _settings.CurrentUserGUID.ToString, , , CompareMethod.Text)
        End If

        If InStr(1, _body, "[$CurrentUser.Username]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                _body = Replace(_body, "[$CurrentUser.Username]", GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Username")), vbTextCompare)
            End If
        End If


        If InStr(1, _body, "[$CurrentUser.DepartmentID]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                _body = Replace(_body, "[$CurrentUser.DepartmentID]", GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("DepartmentID")), vbTextCompare)
            End If
        End If


        If InStr(1, _body, "[$CurrentUser.Department]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                _body = Replace(_body, "[$CurrentUser.Department]", GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Department")), vbTextCompare)
            End If
        End If

        If InStr(1, _body, "[$CurrentUser.Title]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                _body = Replace(_body, "[$CurrentUser.Title]", GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Title")), vbTextCompare)
            End If
        End If

        If InStr(1, _body, "[$CurrentUser.Division]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                _body = Replace(_body, "[$CurrentUser.Division]", GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Division")), vbTextCompare)
            End If
        End If


        If InStr(1, _body, "[$CurrentUser.PhotoURL]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            Dim _set As DataSet = WebObj.Users_GetRecord(_settings.CurrentUserGUID)
            If _set.Tables(0).Rows.Count > 0 Then
                Dim _pic As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("picture"))
                Dim _URL As String = ""
                If Len(_pic) > 0 Then
                    _URL = "uploads/" & Replace(_pic, ";", "/")
                Else
                    _URL = "images/usericon.png"
                End If
                _body = Replace(_body, "[$CurrentUser.PhotoURL]", _URL, vbTextCompare)
            End If
        End If


        If InStr(1, _body, "[$Current.DateTime]", CompareMethod.Text) > 0 Then
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            _body = Replace(_body, "[$Current.DateTime]", GlobalFunctions.FormatDateTime(Now), , , CompareMethod.Text)
        End If

        Return _body
    End Function

    Public Shared Sub LoadRadioList(ByRef DDList As DropDownList, ByVal arguments As String)
        Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(arguments)
        Dim _counter2 As Integer
        For _counter2 = 1 To _coll.Count
            Dim _vp As ValuePair = _coll.Item(_counter2)
            Dim _li As New System.Web.UI.WebControls.ListItem(_vp.Caption, _vp.Value)
            DDList.Items.Add(_li)
        Next
    End Sub

    Public Shared Function MakeID(ByVal ID As String) As String
        Return Replace(ID, " ", "_")
    End Function

    Public Shared Function LoadJavascript(ByVal JScript As String) As Collection
        Dim arrSplits() As String = Split(JScript, GlobalFunctions.GLOBSEPARATOR)
        Dim _counter As Integer
        Dim _coll As New Collection

        For _counter = 0 To UBound(arrSplits)
            Dim _item As String = CStr(arrSplits(_counter))
            If Len(_item) > 0 Then
                Dim arrsplits2() As String = Split(_item, GlobalFunctions.GLOBSEPARATOR2)
                If UBound(arrsplits2) >= 2 Then
                    Dim _vp As New ValuePair
                    _vp.Caption = arrsplits2(0)
                    _vp.Value = arrsplits2(1)
                    _vp.Value2 = arrsplits2(2)

                    If UBound(arrsplits2) >= 3 Then
                        _vp.Value3 = arrsplits2(3)
                    End If

                    If _coll.Contains(_vp.Caption) = False Then
                        _coll.Add(_vp, _vp.Caption)
                    End If
                End If
            End If
        Next _counter
        Return _coll
    End Function

    Public Shared Function LoadButtonList(ByVal JScript As String) As Collection
        Dim arrSplits() As String = Split(JScript, GlobalFunctions.GLOBSEPARATOR)
        Dim _counter As Integer
        Dim _coll As New Collection

        For _counter = 0 To UBound(arrSplits)
            Dim _item As String = CStr(arrSplits(_counter))
            If Len(_item) > 0 Then
                Dim arrsplits2() As String = Split(_item, GlobalFunctions.GLOBSEPARATOR2)
                If UBound(arrsplits2) >= 2 Then
                    Dim _vp As New ValuePair
                    _vp.Caption = arrsplits2(0)
                    _vp.Value = arrsplits2(1)
                    _vp.Value2 = arrsplits2(2)
                    _vp.Value3 = arrsplits2(3)
                    _vp.Value4 = arrsplits2(4)
                    _vp.Value5 = arrsplits2(5)
                    _vp.Value6 = arrsplits2(6)

                    If _coll.Contains(_vp.Value) = False Then
                        _coll.Add(_vp, _vp.Value)
                    End If
                End If
            End If
        Next _counter
        Return _coll
    End Function

    Public Shared Function GetSelectedItem(ByRef DD As DropDownList) As String
        If DD.SelectedItem Is Nothing Then
            Return ""
        Else
            Return DD.SelectedItem.Value
        End If
    End Function

    Public Shared Function GetSelectedItemText(ByRef DD As DropDownList) As String
        If DD.SelectedItem Is Nothing Then
            Return ""
        Else
            Return DD.SelectedItem.Text
        End If
    End Function


    Public Shared Function SaveJavascript(ByRef MainColl As Collection) As String
        Dim _counter As Integer
        Dim _js As String = ""
        For _counter = 1 To MainColl.Count
            Dim _vp As ValuePair = MainColl.Item(_counter)
            If Len(_js) > 0 Then _js += GlobalFunctions.GLOBSEPARATOR
            _js += _vp.Caption & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value2 & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value3
        Next _counter
        Return _js
    End Function

    Public Shared Function SaveButtonList(ByRef MainColl As Collection) As String
        Dim _counter As Integer
        Dim _js As String = ""
        For _counter = 1 To MainColl.Count
            Dim _vp As ValuePair = MainColl.Item(_counter)
            If Len(_js) > 0 Then _js += GlobalFunctions.GLOBSEPARATOR
            _js += _vp.Caption & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value2 & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value3 & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value4 & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value5 & GlobalFunctions.GLOBSEPARATOR2 & _vp.Value6
        Next _counter
        Return _js
    End Function

    Public Shared Function FormatFullDateTime(ByVal DateValue As DateTime, ByVal IsDateOnly As Boolean) As String
        If IsDateOnly = True Then
            Return Format(DateValue, "dd/MMM/yyyy")
        Else
            Return Format(DateValue, "dd/MMM/yyyy hh:mm:ss tt")
        End If
    End Function

    Public Shared Sub LoadAppThemes(ByRef ddl As DropDownList, ByVal AppID As Guid)
        Dim _dataset As DataSet
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        If AppID = Guid.Empty Then
            _dataset = _web.Themes_GetAll()
        Else
            _dataset = _web.Themes_Get(AppID)
        End If

        _web.CloseConnection()

        Dim _item2 As New ListItem("--Please choose a theme--", "")
        ddl.Items.Add(_item2)

        For _counter = 0 To _dataset.Tables(0).Rows.Count - 1
            Dim _caption As String = GlobalFunctions.FormatData(_dataset.Tables(0).Rows(_counter).Item("Name"))
            Dim _fvalue As String = GlobalFunctions.FormatData(_dataset.Tables(0).Rows(_counter).Item("ID"))
            Dim _item As New ListItem(_caption, _fvalue)
            ddl.Items.Add(_item)
        Next _counter

    End Sub


    Public Shared Sub LoadCheckList(ByRef DDList As DropDownList, ByVal arguments As String)
        Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(arguments)
        Dim _counter2 As Integer
        For _counter2 = 1 To _coll.Count
            Dim _vp As ValuePair = _coll.Item(_counter2)
            Dim _li As New System.Web.UI.WebControls.ListItem(_vp.Caption, _vp.Value)
            DDList.Items.Add(_li)
        Next
    End Sub

    Public Shared Function CheckAlterable(ByVal ExistingFieldType As GlobalFunctions.FIELDTYPES, ByVal NewFieldType As GlobalFunctions.FIELDTYPES) As Boolean
        If IsDBMapped(ExistingFieldType) = True And IsDBMapped(NewFieldType) = False Then
            Return False
        ElseIf IsDBMapped(ExistingFieldType) = False And IsDBMapped(NewFieldType) = True Then
            Return False
        End If
        Return True
    End Function

    Public Shared Function GetValueForDisplay(ByRef Webobj As ZukamiLib.WebSession, ByVal FieldType As GlobalFunctions.FIELDTYPES, ByVal Arguments As String, ByVal Value As String) As String
        Select Case FieldType
            Case FIELDTYPES.FT_USER
                If GlobalFunctions.IsGUID(Value) = False Then Return ""
                Dim _set As DataSet = Webobj.Users_GetRecord(New Guid(Value))
                If _set.Tables(0).Rows.Count > 0 Then
                    Return GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("FullName"))
                Else
                    Return ""
                End If
            Case FIELDTYPES.FT_CHECKLIST
                Return Replace(Value, GLOBSEPARATOR, ",")
            Case FIELDTYPES.FT_FILE, FIELDTYPES.FT_TIFFVIEWER, FIELDTYPES.FT_CAMERA, FIELDTYPES.FT_SIGNATURE
                Dim fileguid As String = ""
                Dim filename As String = ""
                ExtractFromFileTag(Value, fileguid, filename)
                Return filename
            Case FIELDTYPES.FT_DROPDOWN
                If GlobalFunctions.IsLookup(Arguments) = True Then
                    Dim formname As String = ""
                    Dim captionname As String = ""
                    Dim valuename As String = ""
                    Dim ordername As String = ""
                    GlobalFunctions.GetDynamicArguments(Arguments, formname, captionname, valuename, ordername)
                    Try
                        If Len(Value) > 0 Then
                            Dim _set As DataSet = Webobj.FormItems_GrabFormDataWithWhere(formname, captionname, valuename, Value)
                            If _set.Tables(0).Rows.Count > 0 Then
                                Return GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item(captionname))
                            Else
                                Return Value
                            End If
                        Else
                            Return ""
                        End If
                    Catch ex As Exception
                        Return ""
                    End Try
                Else
                    Return Value
                End If
            Case Else
                Return Value
        End Select
    End Function

    Public Shared Function isCompulsoryAvailable(ByVal FieldType As GlobalFunctions.FIELDTYPES) As Boolean
        Select Case FieldType
            Case FIELDTYPES.FT_CHECKLIST, FIELDTYPES.FT_RADIO, FIELDTYPES.FT_HTML, FIELDTYPES.FT_YESNO, FIELDTYPES.FT_DROPDOWN, FIELDTYPES.FT_USER, FIELDTYPES.FT_COUNTRY, FIELDTYPES.FT_CURRENCY, FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME, FIELDTYPES.FT_FILE, FIELDTYPES.FT_FLOAT, FIELDTYPES.FT_IMAGE, FIELDTYPES.FT_INT, FIELDTYPES.FT_LONGTEXT, FIELDTYPES.FT_SHORTTEXT, FIELDTYPES.FT_TABLE, FIELDTYPES.FT_TIFFVIEWER, FIELDTYPES.FT_CAMERA, FIELDTYPES.FT_SIGNATURE, FIELDTYPES.FT_DBLABEL, FIELDTYPES.FT_HIDDENFIELD, FIELDTYPES.FT_BARCODE, FIELDTYPES.FT_GPS, FIELDTYPES.FT_RATING
                Return True
            Case Else
                Return False
        End Select
    End Function

    Public Shared Function isDBSourceAvailable(ByVal FieldType As GlobalFunctions.FIELDTYPES) As Boolean
        Select Case FieldType
            Case FIELDTYPES.FT_CHECKLIST, FIELDTYPES.FT_RADIO, FIELDTYPES.FT_HTML, FIELDTYPES.FT_YESNO, FIELDTYPES.FT_DROPDOWN, FIELDTYPES.FT_USER, FIELDTYPES.FT_COUNTRY, FIELDTYPES.FT_CURRENCY, FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME, FIELDTYPES.FT_FILE, FIELDTYPES.FT_FLOAT, FIELDTYPES.FT_IMAGE, FIELDTYPES.FT_INT, FIELDTYPES.FT_LONGTEXT, FIELDTYPES.FT_SHORTTEXT, FIELDTYPES.FT_TABLE, FIELDTYPES.FT_TIFFVIEWER, FIELDTYPES.FT_CAMERA, FIELDTYPES.FT_SIGNATURE, FIELDTYPES.FT_DBLABEL, FIELDTYPES.FT_HIDDENFIELD, FIELDTYPES.FT_BARCODE, FIELDTYPES.FT_GPS, FIELDTYPES.FT_RATING
                Return True
            Case Else
                Return False
        End Select
    End Function

    Public Shared Function ConvertIntoGUIDList(ByVal GUIDList As String) As Collection
        Dim _coll As New Collection
        Dim _temp As String = ""
        Dim arrsplits() As String = Split(GUIDList, ",")
        Dim _counter As Integer
        For _counter = 0 To UBound(arrsplits)
            _temp = Replace(arrsplits(_counter), "''", "\[]\")
            _temp = Replace(_temp, "'", "")
            _temp = Replace(_temp, "\[]\", "'")
            _coll.Add(_temp)
        Next _counter

        Return _coll
    End Function

    Public Shared Function GetExistingFieldType(ByRef WebObj As ZukamiLib.WebSession, ByVal ExistingListItemID As Guid) As GlobalFunctions.FIELDTYPES
        Dim _set As DataSet = WebObj.ListItems_GetRecord(ExistingListItemID)
        Return GlobalFunctions.FormatInteger(_set.Tables(0).Rows(0).Item("FieldType"))
    End Function

    Public Shared Function CreateDIVTag(ByVal TagID As String) As HtmlGenericControl
        Dim divtag As System.Web.UI.HtmlControls.HtmlGenericControl = New System.Web.UI.HtmlControls.HtmlGenericControl("div")
        divtag.ID = TagID
        Return divtag
    End Function

    Public Shared Sub SplitMonthYearFilter(ByVal Value As String, ByRef MonthFilter As String, ByRef YearFilter As String)
        MonthFilter = ""
        YearFilter = ""
        If Len(Value) = 0 Then Exit Sub
        Dim arrsplits() As String = Split(Value, GlobalFunctions.GLOBSEPARATOR2)
        If UBound(arrsplits) = 1 Then
            MonthFilter = arrsplits(0)
            YearFilter = arrsplits(1)
        End If
    End Sub

    Public Shared Sub LoadYears(ByRef ddList As DropDownList)
        Dim _li2 As New System.Web.UI.WebControls.ListItem("--All Items--", "")
        ddList.Items.Add(_li2)

        Dim lngstartYear As Long = 1900
        If IsDate(WebconfigSettings.DatefilterStart) = True Then
            lngstartYear = CDate(WebconfigSettings.DatefilterStart).Year
        End If
        If lngstartYear > Now.Year Then lngstartYear = 1900

        Dim _last As Long = Now.Year
        If IsNumeric(DatefilterEndYearsForward) = True Then
            If CInt(DatefilterEndYearsForward) <> 0 Then
                _last = Now.Year + CInt(DatefilterEndYearsForward)
            End If
        End If
        Dim _counter As Integer
        For _counter = lngstartYear To _last
            Dim _li3 As New System.Web.UI.WebControls.ListItem(CStr(_counter), CStr(_counter))
            ddList.Items.Add(_li3)
        Next _counter


    End Sub

    Public Shared Function GetTab() As String
        Return "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
    End Function

    Public Shared Function MultiTextToHTML(ByVal Text As String) As String
        Return Replace(Text, vbCrLf, "<br>")
    End Function

    Public Shared Function CreateLITag(ByVal TagID As String) As HtmlGenericControl
        Dim divtag As System.Web.UI.HtmlControls.HtmlGenericControl = New System.Web.UI.HtmlControls.HtmlGenericControl("li")
        divtag.ID = TagID
        Return divtag
    End Function

    Public Shared Sub UpdateFormBehaviors(ByRef WebObj As ZukamiLib.WebSession, ByVal ListID As String)
        Dim _dataset As DataSet = WebObj.FormBehaviors_GetItems(New Guid(ListID), False)
        Dim _counter As Integer
        Dim _totalCode As String = ""
        Dim _CodeColl As New Collection

        For _counter = 0 To _dataset.Tables(0).Rows.Count - 1
            Dim _fbehavior As String = GlobalFunctions.FormatData(_dataset.Tables(0).Rows(_counter).Item("FormBehavior"))
            Dim _whenToExecute As Integer = GlobalFunctions.FormatInteger(_dataset.Tables(0).Rows(_counter).Item("WhenToExecute"), 0)
            If Len(_fbehavior) > 0 Then
                If _CodeColl.Contains("Key" & _whenToExecute) Then
                    _totalCode = _CodeColl.Item("Key" & _whenToExecute)
                    If Len(_totalCode) > 0 Then _totalCode += vbCrLf
                    _totalCode += _fbehavior
                    _CodeColl.Remove("Key" & _whenToExecute)
                Else
                    _totalCode = _fbehavior
                End If
                _CodeColl.Add(_totalCode, "Key" & _whenToExecute)
            End If
        Next _counter

        'For ALL the behavior types
        For _counter = 0 To 10
            Dim _totalcode2 As String
            If _CodeColl.Contains("Key" & CStr(_counter)) Then
                _totalcode2 = _CodeColl.Item("Key" & CStr(_counter))
            Else
                _totalcode2 = ""
            End If
            WebObj.FormBehaviors_Update(New Guid(ListID), _totalcode2, _counter)

        Next _counter
    End Sub

    Public Shared Function GetFullLanguageColl() As Collection
        Dim _cultureName As String
        Dim _culture As CultureInfo
        Dim _coll As New Collection
        Dim _FullLanguage As New Collection
        _FullLanguage.Clear()
        Dim ci As CultureInfo() = CultureInfo.GetCultures(CultureTypes.SpecificCultures)
        Dim _sortedci As ArrayList = New ArrayList
        For Each _culture In ci
            _sortedci.Add(_culture.NativeName)
            If _coll.Contains(_culture.NativeName) = False Then
                _coll.Add(_culture, _culture.NativeName)
            End If
        Next
        _sortedci.Sort()
        For Each _cultureName In _sortedci
            Dim _cultureObject As CultureInfo = Nothing
            If _coll.Contains(_cultureName) = True Then
                _cultureObject = _coll.Item(_cultureName)
                If _FullLanguage.Contains(_cultureObject.ToString()) = False Then
                    _FullLanguage.Add(_cultureName, _cultureObject.ToString())
                End If

            End If
        Next
        Return _FullLanguage
    End Function

    Public Shared Function GetDifference(ByRef _web As ZukamiLib.WebSession, ByRef OlderRecordSet As DataSet, ByRef MainSet As DataSet, ByRef MainDataset As DataSet) As String
        Dim _counter As Integer
        Dim _diff As String = ""
        For _counter = 0 To OlderRecordSet.Tables(0).Columns.Count - 1
            Dim _leftSide As String = GlobalFunctions.FormatData(OlderRecordSet.Tables(0).Rows(0).Item(_counter))
            Dim _rightside As String = GlobalFunctions.FormatData(MainSet.Tables(0).Rows(0).Item(_counter))

            Dim _colName As String = GlobalFunctions.FormatData(OlderRecordSet.Tables(0).Columns.Item(_counter).ColumnName)
            Dim _found As Boolean = False
            Dim _fType As GlobalFunctions.FIELDTYPES
            Dim _arguments As String = ""

            'Get Caption
            Dim _counter2 As Integer
            Dim _caption As String = ""
            For _counter2 = 0 To MainDataset.Tables(0).Rows.Count - 1
                If StrComp(_colName, GlobalFunctions.FormatData(MainDataset.Tables(0).Rows(_counter2).Item("FieldBindSource")), CompareMethod.Text) = 0 Then
                    _caption = GlobalFunctions.FormatData(MainDataset.Tables(0).Rows(_counter2).Item("FieldCaption"))
                    _arguments = GlobalFunctions.FormatData(MainDataset.Tables(0).Rows(_counter2).Item("FieldArguments"))
                    _fType = GlobalFunctions.FormatInteger(MainDataset.Tables(0).Rows(_counter2).Item("FieldType"))
                    _found = True
                    Exit For
                End If
            Next _counter2

            If _found = True Then
                Dim _IsDifferent As Boolean = False
                Select Case _fType
                    Case FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME
                        If GlobalFunctions.FormatDate(_leftSide) <> GlobalFunctions.FormatDate(_rightside) Then
                            _IsDifferent = True
                        End If
                    Case FIELDTYPES.FT_FLOAT, FIELDTYPES.FT_INT, FIELDTYPES.FT_CURRENCY
                        If GlobalFunctions.FormatDouble(_leftSide) <> GlobalFunctions.FormatDouble(_rightside) Then
                            _IsDifferent = True
                        End If
                    Case Else
                        If _leftSide <> _rightside Then
                            _IsDifferent = True
                        End If
                End Select
                If _IsDifferent = True Then
                    _leftSide = GlobalFunctions.GetValueForDisplay(_web, _fType, _arguments, _leftSide)
                    _rightside = GlobalFunctions.GetValueForDisplay(_web, _fType, _arguments, _rightside)

                    If Len(_diff) > 0 Then _diff += "<br>"
                    _diff += "<b>" & _caption & "</b>: '" + _leftSide + "'" & " => '" & _rightside & "'"
                End If
            End If


        Next _counter
        If Len(_diff) > 0 Then
            Return "The following fields were modified:<br>" & _diff
        Else
            Return ""
        End If

    End Function

    Public Shared Sub InvalidateCacheCode(ByVal CodeID As String)
        Dim _codeAssemblies As Collection = System.Web.HttpContext.Current.Application("CodeBlocks")
        If _codeAssemblies Is Nothing = False Then
            'start invalidating cache
            If _codeAssemblies.Contains(CodeID) = True Then
                _codeAssemblies.Remove(CodeID)
                System.Web.HttpContext.Current.Application("CodeBlocks") = _codeAssemblies
            End If
        End If
    End Sub

    Public Shared Function DatasetToString(ByRef DSet As DataSet) As String
        Dim _sw As New System.IO.StringWriter
        DSet.WriteXml(_sw, XmlWriteMode.WriteSchema)
        Dim _string As String = _sw.ToString

        Dim arrBytes() As Byte = System.Text.UnicodeEncoding.Unicode.GetBytes(_string)
        Return System.Convert.ToBase64String(arrBytes)
    End Function

    Public Shared Function Forms_GetRecord(ByVal FormGUID As Guid, ByVal Lang As String, Device As String, Optional ByRef WebObj As ZukamiLib.WebSession = Nothing) As DataSet
        Dim _webconn As ZukamiLib.WebSession = Nothing
        If WebObj Is Nothing Then
            _webconn = New ZukamiLib.WebSession(GetZukamiSettings)
            _webconn.OpenConnection()
        Else
            _webconn = WebObj
        End If

        If Len(Lang) > 0 Then
            Forms_GetRecord = _webconn.ListsGlobal_GetRecord(FormGUID, Lang, Device)
        Else
            Forms_GetRecord = _webconn.forms_GetRecord(FormGUID, Nothing)
        End If

        If WebObj Is Nothing Then
            _webconn.CloseConnection()
        End If

    End Function

    Public Shared Sub DeparseAggregate(ByRef Data As DataSet, ByVal Aggregate As String)
        Data.Tables(0).Rows.Clear()

        Dim arrRows() As String = Split(Aggregate, GlobalFunctions.GLOBSEPARATOR_AGGREGATEROWS)
        Dim _counter As Integer
        For _counter = 0 To UBound(arrRows)
            Dim _row As DataRow = Data.Tables(0).NewRow

            Dim _Cols As String = arrRows(_counter)
            If Len(_Cols) > 0 Then
                Dim arrCols() As String = Split(_Cols, GlobalFunctions.GLOBSEPARATOR_AGGREGATECOLS)
                If UBound(arrCols) >= 2 Then
                    _row.Item("RowID") = arrCols(0)
                    _row.Item("RowHeaderText") = arrCols(1)
                    _row.Item("RowFields") = arrCols(2)
                End If
                If UBound(arrCols) >= 3 Then
                    _row.Item("AssociatedGroup") = arrCols(3)
                End If
                Data.Tables(0).Rows.Add(_row)
            End If
        Next _counter

    End Sub

    Public Shared Sub SaveTable(ByVal ViewID As Guid, ByRef AggregateData As DataTable)
        Dim _counter As Integer
        Dim _Aggregate As String = ""
        For _counter = 0 To AggregateData.Rows.Count - 1
            Dim _row As DataRow = AggregateData.Rows.Item(_counter)
            If Len(_Aggregate) > 0 Then _Aggregate += GlobalFunctions.GLOBSEPARATOR_AGGREGATEROWS
            _Aggregate += GlobalFunctions.FormatData(_row.Item("RowID")) + GlobalFunctions.GLOBSEPARATOR_AGGREGATECOLS + GlobalFunctions.FormatData(_row.Item("RowHeaderText")) + GlobalFunctions.GLOBSEPARATOR_AGGREGATECOLS + GlobalFunctions.FormatData(_row.Item("RowFields")) + GlobalFunctions.GLOBSEPARATOR_AGGREGATECOLS + GlobalFunctions.FormatData(_row.Item("AssociatedGroup"))
        Next _counter

        'now save aggregate
        Dim _webObj As New ZukamiLib.WebSession(GetZukamiSettings)
        _webObj.OpenConnection()
        _webObj.Views_UpdateAggregate(ViewID, _Aggregate)
        _webObj.CloseConnection()
    End Sub

    Public Shared Function CanAccessFormSecurity(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal FormID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.forms_GetRecord(FormID, Nothing)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If
        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = UserId Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function HasFormSecurity(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal FormID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.forms_GetRecord(FormID, Nothing)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If
        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = UserId Then
            Return True
        End If

        If GlobalFunctions.HasFormPermissions(webobj, UserId, FormID, "M") Then
            Return True
        End If



        Return False
    End Function

    Public Shared Sub LoadHours(ByRef DropDown As DropDownList)
        DropDown.Items.Clear()
        Dim _lv As New ListItem("Default", "")
        DropDown.Items.Add(_lv)
        For _counter = 0 To 24
            Dim _lv2 As New ListItem(Format(_counter, "00") & "00", CStr(_counter))
            DropDown.Items.Add(_lv2)
        Next _counter
    End Sub

    Public Shared Function CanAccessAppSecurity(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal AppID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.App_GetRecord(AppID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If
        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("AppOwner")) = UserId Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function CanAccessCompositeViewSecurity(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal CompositeViewID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.CompositePage_GetRecord(CompositeViewID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If
        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("OwnerID")) = UserId Then
            Return True
        End If
        Return False
    End Function


    Public Shared Function CanAccessViewSecurity(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal ViewID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.Views_GetRecord(ViewID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If
        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = UserId Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function HasViewPermissions(ByRef webobj As ZukamiLib.WebSession, ByRef UserID As Guid, ByVal ViewID As Guid, ByVal PermLetter As String) As Boolean
        Dim _fRec As DataSet = webobj.Views_GetRecord(ViewID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(UserID, "SUPERADMIN") = True Then
            Return True
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = UserID Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(UserID, ViewID, PermLetter) = True Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function HasCompositePagePermissions(ByRef webobj As ZukamiLib.WebSession, ByRef UserID As Guid, ByVal PageID As Guid, ByVal PermLetter As String) As Boolean
        Dim _fRec As DataSet = webobj.CompositePage_GetRecord(PageID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(UserID, "SUPERADMIN") = True Then
            Return True
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("OwnerID")) = UserID Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(UserID, PageID, PermLetter) = True Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function HasCompositeSecurity(ByRef webobj As ZukamiLib.WebSession, ByRef UserID As Guid, ByVal PageID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.CompositePage_GetRecord(PageID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(UserID, "SUPERADMIN") = True Then
            Return True
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("OwnerID")) = UserID Then
            Return True
        End If

        Return False
    End Function

    Public Shared Function HasFormPermissions(ByRef webobj As ZukamiLib.WebSession, ByRef UserID As Guid, ByVal FormID As Guid, ByVal PermLetter As String) As Boolean
        Dim _fRec As DataSet = webobj.forms_GetRecord(FormID, Nothing)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(UserID, "SUPERADMIN") = True Then
            Return True
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = UserID Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(UserID, FormID, PermLetter) = True Then
            Return True
        End If
        Return False
    End Function

    Public Shared Sub LoadTIFFViewerColAttr(ByVal Attribute As String, ByRef DisplayAsLink As Boolean, ByRef Resize As Boolean, ByRef Width As String, ByRef Height As String, ByRef Javascript As String)
        Resize = False
        Width = ""
        Height = ""
        Javascript = ""
        DisplayAsLink = False
        If Len(Attribute) > 0 Then
            Dim arrSplits() As String = Split(Attribute, ",")
            If UBound(arrSplits) >= 3 Then
                DisplayAsLink = GlobalFunctions.FormatBoolean(arrSplits(0))
                Resize = GlobalFunctions.FormatBoolean(arrSplits(1))
                Width = GlobalFunctions.FormatData(arrSplits(2))
                Height = GlobalFunctions.FormatData(arrSplits(3))
                If UBound(arrSplits) >= 4 Then
                    Javascript = GlobalFunctions.FormatData(arrSplits(4))
                    Javascript = Replace(Javascript, "!comma?", ",")
                End If

            End If
        End If
    End Sub

    Public Shared Function CanDeleteApp(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal AppID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.App_GetRecord(AppID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If

        Dim _settings As New ZukamiLib.ZukamiSettings
        GlobalFunctions.CalculatePermissions(webobj, UserId, _settings)
        If _settings.PermMCA = False Then
            Return False
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("AppOwner")) = UserId Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(UserId, AppID, "D") = True Then
            Return True
        End If


        Return False
    End Function

    Public Shared Function CanModifyCreateCPageDesign(ByRef webobj As ZukamiLib.WebSession, ByVal CanModifyApp As Boolean, ByRef Settings As ZukamiLib.ZukamiSettings, ByVal PageID As Guid, ByVal PermLetter As String) As Boolean
        Dim _fRec As DataSet = webobj.CompositePage_GetRecord(PageID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(Settings.CurrentUserGUID, "SUPERADMIN") = True Then
            Return True
        End If

        If CanModifyApp = False Then
            Return False
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("OwnerID")) = Settings.CurrentUserGUID Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(Settings.CurrentUserGUID, PageID, PermLetter) = True Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function CanModifyCreateFormDesign(ByRef webobj As ZukamiLib.WebSession, ByVal CanModifyApp As Boolean, ByRef Settings As ZukamiLib.ZukamiSettings, ByVal FormID As Guid, ByVal PermLetter As String) As Boolean
        Dim _fRec As DataSet = webobj.forms_GetRecord(FormID, Nothing)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False

        If webobj.UserHasRole_Get(Settings.CurrentUserGUID, "SUPERADMIN") = True Then
            Return True
        End If

        If CanModifyApp = False Then
            Return False
        End If

        If Settings.PermMCF = False Then
            Return False
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("Owner")) = Settings.CurrentUserGUID Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(Settings.CurrentUserGUID, FormID, PermLetter) = True Then
            Return True
        End If
        Return False
    End Function

    Public Shared Function CanEditApp(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal AppID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.App_GetRecord(AppID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If

        Dim _settings As New ZukamiLib.ZukamiSettings
        GlobalFunctions.CalculatePermissions(webobj, UserId, _settings)
        If _settings.PermMCA = False Then
            Return False
        End If

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("AppOwner")) = UserId Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(UserId, AppID, "M") = True Then
            Return True
        End If


        Return False
    End Function

    Public Shared Function CanAccessApp(ByRef webobj As ZukamiLib.WebSession, ByVal UserId As Guid, ByVal AppID As Guid) As Boolean
        Dim _fRec As DataSet = webobj.App_GetRecord(AppID)
        If _fRec.Tables(0).Rows.Count = 0 Then Return False
        If webobj.UserHasRole_Get(UserId, "SUPERADMIN") = True Then
            Return True
        End If

        Dim _settings As New ZukamiLib.ZukamiSettings
        GlobalFunctions.CalculatePermissions(webobj, UserId, _settings)

        If GlobalFunctions.GetGUID(_fRec.Tables(0).Rows(0).Item("AppOwner")) = UserId Then
            Return True
        End If

        'check granted permissions
        If webobj.Permissions_Check(UserId, AppID, "V") = True Then
            Return True
        End If


        Return False
    End Function


    Public Shared Function StringToDataset(ByVal Datastring As String) As DataSet
        Dim arrBytes() As Byte = System.Convert.FromBase64String(Datastring)
        Dim _string As String = System.Text.UnicodeEncoding.Unicode.GetString(arrBytes)



        Dim sr As New System.IO.StringReader(_string)
        Dim _ds2 As New DataSet
        _ds2.ReadXml(sr, XmlReadMode.ReadSchema)
        Return _ds2
    End Function

    Public Shared Function FormatSQL(ByVal SQLObject As String) As String
        Dim _sql As String = SQLObject
        _sql = Replace(SQLObject, "", "")
        Return _sql
    End Function

    Public Shared Function FormatSQLData(ByVal SQLObject As String) As String
        Dim _sql As String = SQLObject
        _sql = Replace(SQLObject, "'", "''")
        Return _sql
    End Function

    Public Shared Function FormatLiteral(ByVal LiteralObject As String) As String
        Dim _lit As String = LiteralObject
        _lit = Replace(_lit, "'", "''")
        Return _lit
    End Function

    Public Shared Function GetCheckListItems(ByVal FieldArgs As String) As Collection
        Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(FieldArgs)
        Dim _rbcoll As New Collection
        Dim _counter2 As Integer
        For _counter2 = 1 To _coll.Count
            Dim _vp As ValuePair = _coll.Item(_counter2)
            _rbcoll.Add(_vp.Caption)
        Next
        Return _rbcoll
    End Function

    Public Shared Function GetCheckListValueCollection(ByVal Value As String) As Collection
        Dim arrsplits() As String = Split(Value, GlobalFunctions.GLOBSEPARATOR)
        Dim _mainColl As New Collection
        Dim _counter As Integer
        For _counter = 0 To UBound(arrsplits)
            If Len(arrsplits(_counter)) > 0 Then
                _mainColl.Add("", arrsplits(_counter))
            End If
        Next _counter
        Return _mainColl
    End Function

    Public Shared Sub SetCheckListValue(ByRef Coll As Collection, ByVal Value As String)
        Dim arrsplits() As String = Split(Value, GlobalFunctions.GLOBSEPARATOR)
        Dim _mainColl As New Collection
        Dim _counter As Integer
        For _counter = 0 To UBound(arrsplits)
            If Len(arrsplits(_counter)) > 0 Then
                _mainColl.Add("", arrsplits(_counter))
            End If
        Next _counter

        Dim _data As String = ""
        If Coll Is Nothing = False Then
            Dim _counter5 As Integer
            For _counter5 = 1 To Coll.Count
                Dim _rb As CheckBox = Coll.Item(_counter5)
                If _mainColl.Contains(_rb.Text) = True Then
                    _rb.Checked = True
                Else
                    _rb.Checked = False
                End If
            Next
        End If
    End Sub

    Public Shared Function GetVerboseFieldcaption(ByVal FieldName As String, ByVal FieldCaption As String) As String
        Dim _verbose As String = FieldName
        If Len(FieldCaption) > 0 And StrComp(FieldName, FieldCaption, CompareMethod.Text) <> 0 Then
            _verbose += " (" & FieldCaption & ")"
        End If
        Return _verbose
    End Function

    Public Shared Sub DeleteApp(ByRef Webobj As ZukamiLib.WebSession, ByVal AppID As Guid)
        Dim _set As DataSet = Webobj.Forms_ExportByAppID(AppID)
        Dim _counter As Integer

        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _listID As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("ListID"))
            DeleteForm(Webobj, _listID)
        Next _counter

        _set = Webobj.Views_GetByApp(AppID)
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _ViewID As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("ID"))
            DeleteView(Webobj, _ViewID)
        Next _counter

        Webobj.App_Delete(AppID)
    End Sub

    Public Shared Sub DeleteForm(ByRef Webobj As ZukamiLib.WebSession, ByVal FormID As Guid)
        Dim _set As DataSet = Webobj.FormItems_Get(FormID)
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _listitemid As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("ListItemID"))
            Dim _fieldType As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_set.Tables(0).Rows(_counter).Item("FieldType"))
            If _fieldType = FIELDTYPES.FT_TABLE Then
                Dim _viewid As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("FieldArguments"))
                Webobj.Forms_Delete(_listitemid)
                'delete the view as well
                If _viewid <> Guid.Empty Then
                    Dim _viewSet As DataSet = Webobj.Views_GetRecord(_viewid)
                    If _viewSet.Tables(0).Rows.Count > 0 Then
                        If GlobalFunctions.FormatBoolean(_viewSet.Tables(0).Rows(0).Item("IsInlineView")) = True Then
                            DeleteView(Webobj, _viewid)
                        End If
                    End If

                End If
            End If
        Next _counter
        Webobj.Forms_Delete(FormID)
    End Sub

    Public Shared Sub DeleteCPage(ByRef Webobj As ZukamiLib.WebSession, ByVal PageID As Guid)
        Webobj.CompositePage_Delete(PageID)
    End Sub

    Public Shared Sub LoadAllFunctions(ByRef DD As DropDownList)
        DD.Items.Add(New ListItem("Total records", "COUNT"))
        DD.Items.Add(New ListItem("Total distinct records", "DISTINCTCOUNT"))
        DD.Items.Add(New ListItem("Average", "AVG"))
        DD.Items.Add(New ListItem("Maximum", "MAX"))
        DD.Items.Add(New ListItem("Minimum", "MIN"))
        DD.Items.Add(New ListItem("Sum", "SUM"))
        DD.Items.Add(New ListItem("Std Deviation", "STDEV"))
        DD.Items.Add(New ListItem("Std Deviation for population", "STDEVP"))
        DD.Items.Add(New ListItem("Variance", "VAR"))
        DD.Items.Add(New ListItem("Variance for population", "VARP"))

    End Sub

    Public Shared Sub DeleteView(ByRef Webobj As ZukamiLib.WebSession, ByVal ViewID As Guid)
        Webobj.View_Delete(ViewID)
    End Sub

    Public Shared Function ConvertDocxToPDF(ByVal Sourcepath As String, ByVal TargetPath As String) As String
        Try
            Dim wordLicense As Aspose.Words.License = New Aspose.Words.License()
            wordLicense.SetLicense(WebconfigSettings.AsposeLic)
            Dim awd As New Aspose.Words.Document(Sourcepath)
            awd.Save(TargetPath, Aspose.Words.SaveFormat.Pdf)
            Return ""
        Catch ex As Exception
            Return ex.ToString
        End Try
    End Function

    Public Shared Function ConvertDocxToTIFF(ByVal SourcePath As String, ByVal TargetPath As String) As String
        Try
            Dim wordLicense As Aspose.Words.License = New Aspose.Words.License()
            wordLicense.SetLicense(WebconfigSettings.AsposeLic)
            Dim awd As New Aspose.Words.Document(SourcePath)

            Dim options As New Aspose.Words.Saving.ImageSaveOptions(Aspose.Words.SaveFormat.Tiff)
            options.PageIndex = 0
            options.PageCount = awd.PageCount
            options.TiffCompression = Aspose.Words.Saving.TiffCompression.Ccitt4
            options.Resolution = GlobalFunctions.FormatInteger(DOCX2TIFFResolution, 160)

            awd.Save(TargetPath, options)
            Return ""
        Catch ex As Exception
            Return ex.ToString
        End Try
    End Function

    Public Shared Sub SetRadioListValue(ByRef Coll As Collection, ByVal Value As String)
        Dim _data As String = ""
        If Coll Is Nothing = False Then
            Dim _counter5 As Integer
            For _counter5 = 1 To Coll.Count
                Dim _rb As Object = Coll.Item(_counter5)
                If StrComp(_rb.Text, Value, CompareMethod.Text) = 0 Then
                    _rb.Checked = True
                Else
                    _rb.Checked = False
                End If
            Next
        End If
    End Sub

    Public Shared Sub LoadFieldTypes(ByRef DropDown As DropDownList)
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_AUTOID), CInt(GlobalFunctions.FIELDTYPES.FT_AUTOID)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_DATE), CInt(GlobalFunctions.FIELDTYPES.FT_DATE)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_DATETIME), CInt(GlobalFunctions.FIELDTYPES.FT_DATETIME)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_DROPDOWN), CInt(GlobalFunctions.FIELDTYPES.FT_DROPDOWN)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_FILE), CInt(GlobalFunctions.FIELDTYPES.FT_FILE)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_FLOAT), CInt(GlobalFunctions.FIELDTYPES.FT_FLOAT)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_INT), CInt(GlobalFunctions.FIELDTYPES.FT_INT)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_LONGTEXT), CInt(GlobalFunctions.FIELDTYPES.FT_LONGTEXT)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_SHORTTEXT), CInt(GlobalFunctions.FIELDTYPES.FT_SHORTTEXT)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_BARCODE), CInt(GlobalFunctions.FIELDTYPES.FT_BARCODE)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_RATING), CInt(GlobalFunctions.FIELDTYPES.FT_RATING)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_GPS), CInt(GlobalFunctions.FIELDTYPES.FT_GPS)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_USER), CInt(GlobalFunctions.FIELDTYPES.FT_USER)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_YESNO), CInt(GlobalFunctions.FIELDTYPES.FT_YESNO)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_CURRENCY), CInt(GlobalFunctions.FIELDTYPES.FT_CURRENCY)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_RADIO), CInt(GlobalFunctions.FIELDTYPES.FT_RADIO)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_COUNTRY), CInt(GlobalFunctions.FIELDTYPES.FT_COUNTRY)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_IMAGE), CInt(GlobalFunctions.FIELDTYPES.FT_IMAGE)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_TIFFVIEWER), CInt(GlobalFunctions.FIELDTYPES.FT_TIFFVIEWER)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_CHECKLIST), CInt(GlobalFunctions.FIELDTYPES.FT_CHECKLIST)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_SIGNATURE), CInt(GlobalFunctions.FIELDTYPES.FT_SIGNATURE)))
        DropDown.Items.Add(New ListItem(GetFieldTypeName(FIELDTYPES.FT_CAMERA), CInt(GlobalFunctions.FIELDTYPES.FT_CAMERA)))

    End Sub

    Public Shared Function GetRadioListValue(ByRef Coll As Collection) As String
        Dim _data As String = ""
        If Coll Is Nothing = False Then
            Dim _counter5 As Integer
            For _counter5 = 1 To Coll.Count
                Dim _rb As RadioButton = Coll.Item(_counter5)
                If _rb.Checked = True Then
                    _data = _rb.Text
                    Exit For
                End If
            Next
        End If
        Return _data
    End Function

    Public Shared Function GetCheckListValue(ByRef Coll As Collection) As String
        Dim _data As String = ""
        If Coll Is Nothing = False Then
            Dim _counter5 As Integer
            For _counter5 = 1 To Coll.Count
                Dim _rb As CheckBox = Coll.Item(_counter5)
                If _rb.Checked = True Then
                    If Len(_data) > 0 Then _data += GlobalFunctions.GLOBSEPARATOR
                    _data += _rb.Text
                End If
            Next
        End If
        Return _data
    End Function

    Public Shared Function CheckListEmpty(ByRef Coll As Collection) As Boolean
        Dim _empty As Boolean = True
        If Coll Is Nothing = False Then
            Dim _counter5 As Integer
            For _counter5 = 1 To Coll.Count
                Dim _rb As CheckBox = Coll.Item(_counter5)
                If _rb.Checked = True Then
                    _empty = False
                    Exit For
                End If
            Next
        End If
        Return _empty
    End Function

    Public Shared Function ReplaceWildCards(ByVal Input As String) As String
        Return Replace(Replace(Input, "*", "%"), """", """""")
    End Function

    Public Shared Function ReplaceDblQuotes(input As String) As String
        Return Replace(input, """", """""")
    End Function

    Public Shared Sub BindReadonlyLabels(ByRef ZFieldObj As ZField)
        Try
            Select Case ZFieldObj.FieldType
                Case GlobalFunctions.FIELDTYPES.FT_FILE
                Case GlobalFunctions.FIELDTYPES.FT_TABLE
                Case GlobalFunctions.FIELDTYPES.FT_BUTTON
                Case GlobalFunctions.FIELDTYPES.FT_COUNTRY
                    If CType(ZFieldObj.FieldControl, DropDownList).SelectedItem.Value = "" Then
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = ""
                    Else
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = CType(ZFieldObj.FieldControl, DropDownList).SelectedItem.Text
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_USER
                    If CType(ZFieldObj.FieldControl, Object).Text = "" Then
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = ""
                    Else
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = CType(ZFieldObj.FieldControl, Object).DisplayCaption
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_DROPDOWN
                    If CType(ZFieldObj.FieldControl, Object).SelectedItem.Value = "" Then
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = ""
                    Else
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = CType(ZFieldObj.FieldControl, Object).SelectedItem.Text
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_CHECKLIST
                    Dim _coll As Collection = CType(ZFieldObj.FieldControl, Collection)
                    Dim _table As Table = CType(ZFieldObj.ReadOnlyControl, Table)

                    _table.Rows.Clear()
                    Dim _counter2 As Integer
                    For _counter2 = 1 To _coll.Count
                        Dim _obj As CheckBox = _coll.Item(_counter2)

                        Dim _tr As New TableRow
                        _table.Rows.Add(_tr)
                        Dim _tc As New TableCell
                        _tr.Cells.Add(_tc)
                        If Not IsCurrentRequestMobileVersion() Then
                            Dim _img As New Image
                            If _obj.Checked = True Then
                                _img.ImageUrl = "~\images\icoCheckboxticked.gif"
                            Else
                                _img.ImageUrl = "~\images\icoCheckboxUnticked.gif"
                            End If

                            _tc.Controls.Add(_img)
                        Else
                            Dim icons As Control
                            If _obj.Checked = True Then
                                icons = New LiteralControl("<i class=""icon material-icons text-color-blue md-only"">check_box</i><i class=""icon f7-icons text-color-blue ios-only"">check_round_fill</i>")
                            Else
                                icons = New LiteralControl("<i class=""icon material-icons md-only"">check_box_outline_blank</i><i class=""icon f7-icons ios-only"">circle</i>")
                            End If
                            _tc.Controls.Add(icons)
                        End If
                        Dim _tc2 As New TableCell
                        _tr.Cells.Add(_tc2)

                        Dim _lbl As New Label
                        _lbl.CssClass = GetReadOnlyCSS(ZFieldObj)
                        _lbl.Text = _obj.Text
                        _tc2.Controls.Add(_lbl)
                    Next _counter2
                Case GlobalFunctions.FIELDTYPES.FT_CURRENCY
                    CType(ZFieldObj.ReadOnlyControl, Label).Text = GlobalFunctions.FormatMoney(ZFieldObj.FieldControl.text)
                Case GlobalFunctions.FIELDTYPES.FT_FLOAT
                    CType(ZFieldObj.ReadOnlyControl, Label).Text = GlobalFunctions.FormatFloat(ZFieldObj.FieldControl.text, ZFieldObj.Arguments)
                Case GlobalFunctions.FIELDTYPES.FT_FRAME
                Case GlobalFunctions.FIELDTYPES.FT_HIDDENFIELD
                Case GlobalFunctions.FIELDTYPES.FT_DBLABEL
                Case GlobalFunctions.FIELDTYPES.FT_LABEL
                Case GlobalFunctions.FIELDTYPES.FT_HEADER
                Case GlobalFunctions.FIELDTYPES.FT_TIFFVIEWER, FIELDTYPES.FT_SIGNATURE, FIELDTYPES.FT_CAMERA
                Case GlobalFunctions.FIELDTYPES.FT_DATETIME
                    Dim _includetime As Boolean
                    Dim _hidedate As Boolean
                    logger.Debug("ZFieldObj: " + ZFieldObj.FieldName)
                    GetDateTimeSettings(ZFieldObj.Arguments, _includetime, Nothing, _hidedate)
                    If _includetime = True Then
                        If _hidedate = False Then
                            CType(ZFieldObj.ReadOnlyControl, Label).Text = GlobalFunctions.FormatDateTime(ZFieldObj.FieldControl.value)
                        Else
                            CType(ZFieldObj.ReadOnlyControl, Label).Text = GlobalFunctions.FormatTime(ZFieldObj.FieldControl.value)
                        End If

                    Else
                        If _hidedate = False Then
                            CType(ZFieldObj.ReadOnlyControl, Label).Text = GlobalFunctions.FormatDate(ZFieldObj.FieldControl.value)
                        Else
                            CType(ZFieldObj.ReadOnlyControl, Label).Text = ""
                        End If

                    End If
                Case GlobalFunctions.FIELDTYPES.FT_DATE
                    CType(ZFieldObj.ReadOnlyControl, Label).Text = GlobalFunctions.FormatDate(ZFieldObj.FieldControl.value)
                Case GlobalFunctions.FIELDTYPES.FT_RADIO
                    CType(ZFieldObj.ReadOnlyControl, Label).Text = ""
                    Dim _objCollection As Collection = ZFieldObj.FieldControl
                    Dim _counter As Integer
                    For _counter = 1 To _objCollection.Count
                        Dim _rb As RadioButton = _objCollection.Item(_counter)
                        If _rb.Checked = True Then
                            CType(ZFieldObj.ReadOnlyControl, Label).Text = _rb.Text
                            Exit For
                        End If
                    Next _counter
                Case GlobalFunctions.FIELDTYPES.FT_YESNO
                    If CType(ZFieldObj.FieldControl, Object).SelectedItem.Value = "" Then
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = ""
                    Else
                        CType(ZFieldObj.ReadOnlyControl, Label).Text = CType(ZFieldObj.FieldControl, Object).SelectedItem.Text
                    End If
                Case GlobalFunctions.FIELDTYPES.FT_LONGTEXT
                    CType(ZFieldObj.ReadOnlyControl, Label).Text = GlobalFunctions.FormatForHTML(ZFieldObj.FieldControl.text)
                Case GlobalFunctions.FIELDTYPES.FT_HTML
                    CType(ZFieldObj.ReadOnlyControl, Label).Text = ZFieldObj.FieldControl.value
                Case GlobalFunctions.FIELDTYPES.FT_AUTOID
                    CType(ZFieldObj.ReadOnlyControl, Label).Text = ZFieldObj.FieldControl.text
                Case Else

                    CType(ZFieldObj.ReadOnlyControl, Object).Text = ZFieldObj.FieldControl.text
            End Select
        Catch ex As Exception
            logger.Error(ex)
        End Try
    End Sub

    Public Shared Function GetReadOnlyCSS(ByRef Field As ZField) As String
        Dim _css As String = "formreadonly_text"
        If Len(Field.ReadonlyCSS) > 0 Then _css = Field.ReadonlyCSS
        Return _css
    End Function


    Public Shared Function RunCode(ByVal CodeID As String, ByRef Scribe As InstanceScribe) As Object
        Try
            Dim _codeAssemblies As Collection = System.Web.HttpContext.Current.Application("CodeBlocks")
            Dim msg As String = ""
            If _codeAssemblies Is Nothing Then
                msg = "The application code cache is empty. There may be a compilation error in your code. Please check your code again"
                logger.Error(msg)
                ValidationError.Display2(msg)
                Return Nothing
            End If

            If _codeAssemblies.Contains(CodeID) = False Then
                logger.Error("code id not found in assemblies")
                Return Nothing
            End If

            Dim _ca As Assembly = _codeAssemblies.Item(CodeID)
            Dim loObject As Object = _ca.CreateInstance("Zukami.CustomCode")
            If loObject Is Nothing Then
                msg = "Could not load Zukami.CustomCode"
                logger.Error(msg)
                ValidationError.Display2(msg)
                Return Nothing
            End If

            Dim params As New Object()
            ReDim params(0)
            params(0) = Scribe

            Try
                RunCode = loObject.GetType().InvokeMember("RunCode", BindingFlags.InvokeMethod, Nothing, loObject, params)
            Catch ex As System.StackOverflowException
                logger.Error(ex, "got a StackOverflowException when RunCode: " + CodeID)
            Catch ex As ThreadAbortException
                logger.Trace("ignore ThreadAbortException (could be caused by redirect)", ex)
            Catch ex As Exception
                Dim errorCode As String = Guid.NewGuid().ToString()
                logger.Error(ex, String.Format("Runtime error encountered executing behavior, error code: {0}", errorCode))
                If String.IsNullOrWhiteSpace(FromConfig("RuntimeError_GenericErrorMessageToDisplay")) Then
                    Dim errMsg_technical As String = String.Format(DbResT("Runtime error encountered executing behavior:<br> {0}"), GlobalFunctions.MultiTextToHTML(ex.ToString))
                    ValidationError.Display(errMsg_technical)
                Else
                    Dim errMsg_non_technical As String = String.Format(FromConfig("RuntimeError_GenericErrorMessageToDisplay"), errorCode)
                    ValidationError.Display(errMsg_non_technical)
                End If
                Return Nothing
            End Try

        Catch ex As ThreadAbortException
            logger.Trace("2 ignore ThreadAbortException (could be caused by redirect)", ex)
        Catch ex As Exception
            Dim errMsg As String = String.Format(DbResT("Error running custom code: {0}"), ex.ToString)
            logger.Error(ex, "Error running custom code")
            ValidationError.Display(errMsg)
        End Try


    End Function

    Public Shared Function CacheCode(ByVal Code As String, ByVal CodeID As String, ByVal returnType As ZukamiLib.ZukamiCode.FORMULATYPES, Optional ByRef CompilationError As String = "", Optional CodeLib As String = "") As Boolean
        If WebconfigSettings.ScriptLanguage = "CS" Then
            Return CacheCodeCS(Code, CodeID, returnType, CompilationError, CodeLib)
        Else
            Return CacheCodeVB(Code, CodeID, returnType, CompilationError, CodeLib)
        End If
    End Function

    Public Shared Function CacheCodeVB(ByVal Code As String, ByVal CodeID As String, ByVal returnType As ZukamiLib.ZukamiCode.FORMULATYPES, Optional ByRef CompilationError As String = "", Optional CodeLib As String = "") As Boolean
        logger.Debug("start CodeID: " + CodeID)
        CompilationError = ""

        'If GlobalFunctions.ISSPRING = True Then
        '    _gcode = System.Web.HttpContext.Current.Application("GlobalCodeCache")
        '    If Len(_gcode) = 0 Then
        '        _gcode = System.IO.File.ReadAllText(System.Web.HttpContext.Current.Server.MapPath("sharedcode.txt"))
        '    End If
        'End If

        Dim _gcode As String = Code


        Dim _codeAssemblies As Collection = System.Web.HttpContext.Current.Application("CodeBlocks")
        If _codeAssemblies Is Nothing Then _codeAssemblies = New Collection

        If _codeAssemblies.Contains(CodeID) = True Then
            logger.Debug("CodeID found in assemblies")
            Return True
        End If
        If Len(Trim(_gcode)) = 0 Then
            logger.Debug("code length = 0, skip")
            Return True
        End If

        Dim loCompiler As CodeDomProvider = VBCodeProvider.CreateProvider("VisualBasic")
        Dim loparams As CompilerParameters = New CompilerParameters
        loparams.ReferencedAssemblies.Add("System.dll")
        loparams.ReferencedAssemblies.Add("System.web.dll")
        loparams.ReferencedAssemblies.Add("System.xml.dll")
        loparams.ReferencedAssemblies.Add("System.data.dll")
        loparams.ReferencedAssemblies.Add("System.drawing.dll")
        loparams.ReferencedAssemblies.Add("System.Windows.Forms.dll")
        loparams.ReferencedAssemblies.Add("System.Security.dll")
        Dim arrDLLS() As String = Split(AdditionalDLLs, ";")
        Dim i As Integer
        For i = 0 To UBound(arrDLLS)
            If Len(Trim(arrDLLS(i))) > 0 Then
                loparams.ReferencedAssemblies.Add(arrDLLS(i))
            End If
        Next i


        '        loparams.ReferencedAssemblies.Add("Progress.o4glrt.dll")
        loparams.CompilerOptions = "/optimize"


        loparams.IncludeDebugInformation = False
        loparams.GenerateExecutable = False
        loparams.GenerateInMemory = True
        loparams.TreatWarningsAsErrors = False
        loparams.MainClass = "Zukami.CustomCode"
        Dim lccode As String = ZukamiLib.ZukamiFormCode.Encapsulate(_gcode, returnType, CodeLib)
        Try
            Dim loCompiled As CompilerResults = loCompiler.CompileAssemblyFromSource(loparams, lccode)
            If loCompiled.Errors.HasErrors Then
                Dim ErrorMsg As String = loCompiled.Errors.Count.ToString + " Errors" + vbCrLf
                Dim x As Integer
                For x = 0 To loCompiled.Errors.Count - 1
                    ErrorMsg += "Line:" + loCompiled.Errors(x).Line.ToString + " - " + loCompiled.Errors(x).ErrorText + vbCrLf
                Next
                CompilationError = ErrorMsg
                logger.Error(ErrorMsg, "CompilationError")
                Return False
            End If

            Dim loAssembly As Assembly = loCompiled.CompiledAssembly
            _codeAssemblies.Add(loAssembly, CodeID)

            System.Web.HttpContext.Current.Application("CodeBlocks") = _codeAssemblies
            logger.Debug("success")
            Return True
        Catch ex As Exception
            CompilationError = ex.ToString
            logger.Error(ex)
            Return False
        End Try

    End Function

    Public Shared Function CacheCodeCS(ByVal Code As String, ByVal CodeID As String, ByVal returnType As ZukamiLib.ZukamiCode.FORMULATYPES, Optional ByRef CompilationError As String = "", Optional ByRef CodeLib As String = "") As Boolean
        CompilationError = ""

        Dim _gcode As String = Code

        'If GlobalFunctions.ISSPRING = True Then
        '    _gcode = System.Web.HttpContext.Current.Application("GlobalCodeCache")
        '    If Len(_gcode) = 0 Then
        '        _gcode = System.IO.File.ReadAllText(System.Web.HttpContext.Current.Server.MapPath("sharedcode.txt"))
        '    End If
        'End If


        Dim _codeAssemblies As Collection = System.Web.HttpContext.Current.Application("CodeBlocks")
        If _codeAssemblies Is Nothing Then _codeAssemblies = New Collection

        If _codeAssemblies.Contains(CodeID) = True Then Return True
        If Len(Trim(_gcode)) = 0 Then Return True

        Dim loCompiler As CodeDomProvider = CSharpCodeProvider.CreateProvider("CSharp")
        Dim loparams As CompilerParameters = New CompilerParameters
        loparams.ReferencedAssemblies.Add("System.dll")
        loparams.ReferencedAssemblies.Add("Microsoft.CSharp.dll")
        loparams.ReferencedAssemblies.Add("Microsoft.VisualBasic.dll")
        loparams.ReferencedAssemblies.Add("System.Core.dll")
        loparams.ReferencedAssemblies.Add("System.xml.dll")
        loparams.ReferencedAssemblies.Add("System.data.dll")
        loparams.ReferencedAssemblies.Add("System.drawing.dll")
        loparams.ReferencedAssemblies.Add("System.Windows.Forms.dll")
        loparams.ReferencedAssemblies.Add("System.Security.dll")
        Dim arrDLLS() As String = Split(AdditionalDLLs, ";")
        Dim i As Integer
        For i = 0 To UBound(arrDLLS)
            If Len(Trim(arrDLLS(i))) > 0 Then
                loparams.ReferencedAssemblies.Add(arrDLLS(i))
            End If
        Next i


        '        loparams.ReferencedAssemblies.Add("Progress.o4glrt.dll")
        loparams.CompilerOptions = "/optimize"


        loparams.IncludeDebugInformation = False
        loparams.GenerateExecutable = False
        loparams.GenerateInMemory = True
        loparams.TreatWarningsAsErrors = False
        loparams.MainClass = "Zukami.CustomCode"



        Dim lccode As String = ZukamiLib.ZukamiFormCode.EncapsulateCS(_gcode, returnType, CodeLib)




        Try
            Dim loCompiled As CompilerResults = loCompiler.CompileAssemblyFromSource(loparams, lccode)
            If loCompiled.Errors.HasErrors Then
                Dim ErrorMsg As String = loCompiled.Errors.Count.ToString + " Errors" + vbCrLf
                Dim x As Integer
                For x = 0 To loCompiled.Errors.Count - 1
                    ErrorMsg += "Line:" + loCompiled.Errors(x).Line.ToString + " - " + loCompiled.Errors(x).ErrorText + vbCrLf
                Next
                CompilationError = ErrorMsg
                Return False
            End If

            Dim loAssembly As Assembly = loCompiled.CompiledAssembly
            _codeAssemblies.Add(loAssembly, CodeID)

            System.Web.HttpContext.Current.Application("CodeBlocks") = _codeAssemblies

            Return True
        Catch ex As Exception
            CompilationError = ex.ToString
            Return False
        End Try

    End Function


    Public Shared Function CreateULTag(ByVal TagID As String) As HtmlGenericControl
        Dim divtag As System.Web.UI.HtmlControls.HtmlGenericControl = New System.Web.UI.HtmlControls.HtmlGenericControl("ul")
        divtag.ID = TagID
        Return divtag
    End Function

    Public Shared Sub LoadGeneralDropDown(ByRef WebObj As ZukamiLib.WebSession, ByRef AppID As Guid, ByRef DDList As DropDownList, ByVal arguments As String)
        If IsLookup(arguments) = True Then
            Dim _formname As String = ""
            Dim _captionfield As String = ""
            Dim _valuefield As String = ""
            Dim _ordername As String = ""
            Dim _whereclause As String = ""
            Dim _counter As Integer
            Dim _isdistinct As Boolean = False
            Dim _filters As String = ""
            GetDynamicArguments(arguments, _formname, _captionfield, _valuefield, _ordername, _isdistinct, _filters)

            _filters = Trim(GlobalFunctions.SubstituteSpecialTags(WebObj, _filters, Nothing))
            Dim _set As DataSet = LoadData(WebObj, _formname, _captionfield, _valuefield, _ordername, _filters, _isdistinct)
            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(0))
                Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(1))
                Dim _item As New System.Web.UI.WebControls.ListItem(_caption, _value)
                DDList.Items.Add(_item)
            Next _counter
        ElseIf IsSQLSource(arguments) = True Then
            'we create the items
            Dim _args As String = Right(arguments, Len(arguments) - 3)
            Dim arrSplits() As String = Split(_args, GlobalFunctions.GLOBSEPARATOR)
            Dim _dsourceID As String = GlobalFunctions.FormatData(arrSplits(0))
            Dim _SQL As String = GlobalFunctions.FormatData(arrSplits(1))

            _SQL = Trim(GlobalFunctions.SubstituteSpecialTags(WebObj, _SQL, Nothing))

            Try
                Dim _data As DataSet = Nothing
                If Len(_dsourceID) > 0 Then
                    logger.Debug("AppID: " + FormatData(AppID) + ", _dsourceID: " + FormatData(_dsourceID))
                    Dim _settings As ZukamiLib.ZukamiSettings = GlobalFunctions.GetDatasourceConnectionString(WebObj, AppID, _dsourceID)
                    Dim _webobj As New ZukamiLib.WebSession(_settings)
                    _webobj.OpenOLEDBConnection(_settings.PrimaryConnectionString)
                    If Len(_webobj.LastError) > 0 Then
                        logger.Error("312A116E-36DA-43A3-997D-236E1B979849. " + GlobalFunctions.FormatData(_webobj.LastError))
                        DDList.Items.Add(New System.Web.UI.WebControls.ListItem("--Error retrieving data--", ""))
                    Else
                        _webobj.CustomOLEDBSQLCommand(_SQL)
                        _data = _webobj.CustomOLEDBSQLExecuteReturn
                    End If
                    _webobj.CloseOLEDBConnection()
                    _webobj = Nothing
                Else
                    Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
                    Dim _webobj As New ZukamiLib.WebSession(_settings)
                    _webobj.OpenConnection()
                    If Len(_webobj.LastError) > 0 Then
                        logger.Error("F762BB3C-11D8-4A9D-9FFC-C75D42511931. " + GlobalFunctions.FormatData(_webobj.LastError))
                        DDList.Items.Add(New System.Web.UI.WebControls.ListItem("--Error retrieving data--", ""))
                    Else
                        _webobj.CustomSQLCommand(_SQL)
                        _data = _webobj.CustomSQLExecuteReturn
                        If Len(_webobj.LastError) > 0 Then
                            logger.Error("248850CA-B59E-463F-BF09-47278CDEAABD, sql: " + _SQL + ", " + GlobalFunctions.FormatData(_webobj.LastError))
                        End If
                    End If
                    _webobj.CloseConnection()
                    _webobj = Nothing

                End If
                If _data Is Nothing = False Then
                    Dim _counterw As Integer
                    For _counterw = 0 To _data.Tables(0).Rows.Count - 1
                        Dim _caption As String = GlobalFunctions.FormatData(_data.Tables(0).Rows(_counterw).Item(0))
                        Dim _value As String = GlobalFunctions.FormatData(_data.Tables(0).Rows(_counterw).Item(1))
                        Dim _item As New System.Web.UI.WebControls.ListItem(_caption, _value)
                        DDList.Items.Add(_item)
                    Next
                Else
                    DDList.Items.Add(New System.Web.UI.WebControls.ListItem("--Error retrieving data--", ""))
                End If

            Catch ex As Exception
                logger.Error(ex, "D36E583E-D10B-4B3B-A0F6-23B20AD00631. ")
                DDList.Items.Add(New System.Web.UI.WebControls.ListItem("--Error retrieving data--", ""))
            End Try
        Else
            Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(arguments)
            Dim _counter2 As Integer
            For _counter2 = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(_counter2)
                Dim _li As New System.Web.UI.WebControls.ListItem(_vp.Caption, _vp.Value)
                DDList.Items.Add(_li)
            Next
        End If
    End Sub

    Public Shared Function GetDropDownDataset(ByRef WebObj As ZukamiLib.WebSession, ByRef AppID As Guid, ByVal arguments As String) As DataSet
        GetDropDownDataset = Nothing

        If IsLookup(arguments) = True Then




            Dim _formname As String = ""
            Dim _captionfield As String = ""
            Dim _valuefield As String = ""
            Dim _ordername As String = ""
            Dim _whereclause As String = ""
            Dim _counter As Integer
            Dim _isdistinct As Boolean = False
            Dim _filters As String = ""
            GetDynamicArguments(arguments, _formname, _captionfield, _valuefield, _ordername, _isdistinct, _filters)

            Dim _set As DataSet = WebObj.FormItems_GrabFormData3(_formname, _captionfield, _valuefield, _ordername, _filters, _isdistinct)
            If _set.Tables(0).Columns.Count >= 2 Then
                _set.Tables(0).Columns(0).ColumnName = "LookupCaption"
                _set.Tables(0).Columns(1).ColumnName = "LookupID"
            End If
            GetDropDownDataset = _set
        ElseIf IsSQLSource(arguments) = True Then
            'we create the items
            Dim _args As String = Right(arguments, Len(arguments) - 3)
            Dim arrSplits() As String = Split(_args, GlobalFunctions.GLOBSEPARATOR)
            Dim _dsourceID As String = GlobalFunctions.FormatData(arrSplits(0))
            Dim _SQL As String = GlobalFunctions.FormatData(arrSplits(1))

            Try

                Dim _settings As ZukamiLib.ZukamiSettings = GlobalFunctions.GetDatasourceConnectionString(WebObj, AppID, _dsourceID)
                Dim _webobj As New ZukamiLib.WebSession(_settings)
                _webobj.OpenOLEDBConnection(_settings.PrimaryConnectionString)



                If Len(_webobj.LastError) > 0 Then
                    GetDropDownDataset = Nothing
                Else
                    _webobj.CustomOLEDBSQLCommand(_SQL)
                    Dim _data As DataSet = _webobj.CustomOLEDBSQLExecuteReturn
                    If _data Is Nothing = False Then
                        If _data.Tables(0).Columns.Count >= 2 Then
                            _data.Tables(0).Columns(0).ColumnName = "LookupCaption"
                            _data.Tables(0).Columns(1).ColumnName = "LookupID"
                        End If
                        GetDropDownDataset = _data
                    Else
                        GetDropDownDataset = Nothing
                    End If
                End If
                _webobj.CloseOLEDBConnection()
                _webobj = Nothing

            Catch ex As Exception
                GetDropDownDataset = Nothing
            End Try
        Else
            Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(arguments)
            Dim _counter2 As Integer
            Dim _set As New DataSet
            _set.Tables.Add(New DataTable)
            _set.Tables(0).Columns.Add(New DataColumn("LookupID", GetType(String)))
            _set.Tables(0).Columns.Add(New DataColumn("LookupCaption", GetType(String)))

            For _counter2 = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(_counter2)

                Dim _row As DataRow = _set.Tables(0).NewRow
                _row.Item("LookupID") = _vp.Value
                _row.Item("LookupCaption") = _vp.Caption
                _set.Tables(0).Rows.Add(_row)
            Next

            GetDropDownDataset = _set

        End If
    End Function


    Public Shared Sub LoadPickerDropDown(ByRef WebObj As ZukamiLib.WebSession, ByRef DDList As DropDownList, ByVal arguments As String)
        Dim _set As DataSet = Nothing
        Select Case Mid(arguments, 1, 6)
            Case "USRPKR"
                _set = WebObj.Users_GetAllNames(Guid.Empty)
            Case "RLEPKR"
                _set = WebObj.Roles_GetAllNames()
        End Select
        Dim _counter As Integer
        If _set Is Nothing = False Then
            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(0))
                Dim _value As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(1))
                Dim _item As New System.Web.UI.WebControls.ListItem(_caption, _value)
                DDList.Items.Add(_item)
            Next _counter
        End If

    End Sub

    Public Shared Sub LoadDropdown(ByRef DDropdown As DropDownList, ByRef DSet As DataSet, ByVal CaptionFld As String, ByVal ValueFld As String)
        Dim _counter As Integer
        DDropdown.Items.Clear()

        If DSet.Tables(0).Rows.Count > 0 Then
            For _counter = 0 To DSet.Tables(0).Rows.Count - 1
                Dim _captionfld As String = GlobalFunctions.FormatData(DSet.Tables(0).Rows(_counter).Item(CaptionFld))
                Dim _valuefld As String = GlobalFunctions.FormatData(DSet.Tables(0).Rows(_counter).Item(ValueFld))

                Dim _item As New System.Web.UI.WebControls.ListItem(_captionfld, _valuefld)
                DDropdown.Items.Add(_item)
            Next _counter
        Else
            Dim _item As New System.Web.UI.WebControls.ListItem("No resources found", "")
            DDropdown.Items.Add(_item)
        End If

    End Sub

    Public Shared Sub LoadTextDropDown(ByRef WebObj As ZukamiLib.WebSession, ByRef DDList As DropDownList, ByVal BoundColumn As String)
        'Dim _temp As DataTable
        'Dim arrColumnNames(0) As String
        'arrColumnNames(0) = BoundColumn
        '_temp = SourceDatatable.DefaultView.ToTable(True, arrColumnNames)
        'DDList.Items.Clear()
        'For _counter = 0 To _temp.Rows.Count - 1
        '    Dim _caption As String = GlobalFunctions.FormatData(_temp.Rows(_counter).Item(0))
        '    Dim _item As New System.Web.UI.WebControls.ListItem(_caption, _caption)
        '    DDList.Items.Add(_item)
        'Next _counter
        '_temp.Dispose()
        '_temp = Nothing
    End Sub

    Public Shared Sub Bind(ByRef control As Object, ByRef Data As DataSet, ByVal BindColumn As String, Optional ByVal FieldType As GlobalFunctions.FIELDTYPES = FIELDTYPES.FT_AUTO, Optional ByRef ZFieldObj As ZField = Nothing, Optional ByVal RowIdx As Integer = 0, Optional ByVal UploadPath As String = "", Optional ByVal IsReload As Boolean = True, Optional ByVal IsMobileVersion As Boolean = False)
        If IsReload = False Then Exit Sub
        Try
            Select Case FieldType
                Case FIELDTYPES.FT_YESNO
                    Dim yesno As String = GlobalFunctions.FormatYesNo(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    If IsMobileVersion Then
                        CType(control, Object).SelectedValue = yesno
                    Else
                        CType(control, DropDownList).SelectedValue = yesno
                    End If
                Case FIELDTYPES.FT_DROPDOWN



                    Try
                        CType(control, Object).SelectedValue = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception
                    End Try




                Case FIELDTYPES.FT_CURRENCY
                    Try
                        CType(control, Object).text = GlobalFunctions.FormatMoney(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_FLOAT
                    Try
                        If ZFieldObj Is Nothing = False Then
                            CType(control, Object).text = GlobalFunctions.FormatFloat(Data.Tables(0).Rows(RowIdx).Item(BindColumn), ZFieldObj.Arguments)
                        Else
                            CType(control, Object).text = GlobalFunctions.FormatDouble(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                        End If

                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_INT
                    Try
                        CType(control, Object).text = GlobalFunctions.FormatNumberForDisplay(Data.Tables(0).Rows(RowIdx).Item(BindColumn), "")
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_FILE
                    Try
                        CType(control, Object).setinternalpath(GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn)))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_SUBMISSIONNO
                    Try
                        CType(control, Object).text = Format(GlobalFunctions.FormatInteger(Data.Tables(0).Rows(RowIdx).Item(BindColumn)), "000000")
                    Catch ex As Exception

                    End Try

                Case FIELDTYPES.FT_DATETIME
                    Try
                        logger.Debug("case FT_DATETIME, TypeName: " + TypeName(control))
                        If InStr(1, TypeName(control), "usercontrols_zdtpicker_ascx") > 0 OrElse
                            InStr(1, TypeName(control), "usercontrols_zdtpickermobile_ascx") > 0 Then
                            CType(control, Object).value = GlobalFunctions.FormatUnambiguousDateTime(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                        Else
                            CType(control, Object).text = GlobalFunctions.FormatDateTime(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                        End If
                    Catch ex As Exception
                        logger.Error(ex, "case FT_DATETIME")
                    End Try


                Case FIELDTYPES.FT_RADIO
                    GlobalFunctions.SetRadioListValue(control, GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn)))

                Case FIELDTYPES.FT_CHECKLIST
                    GlobalFunctions.SetCheckListValue(control, GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn)))
                Case FIELDTYPES.FT_LABEL
                Case FIELDTYPES.FT_AUTOID
                    Try
                        CType(control, Label).Text = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                        If ZFieldObj Is Nothing = False Then
                            CType(ZFieldObj.FieldControl2, HiddenField).Value = CType(control, Label).Text
                        End If
                        If Len(CType(control, Label).Text) = 0 Then
                            CType(control, Label).Text = AUTOIDUNSET
                        End If
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_TABLE
                Case FIELDTYPES.FT_COUNTRY
                    Try
                        CType(control, DropDownList).SelectedValue = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_USER
                    Try
                        CType(control, Object).Text = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_HIDDENFIELD
                    Try
                        CType(control, HiddenField).Value = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_DBLABEL
                    Try
                        CType(control, Label).Text = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_GPS
                    Try
                        CType(control, Object).Text = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_BARCODE, FIELDTYPES.FT_RATING
                    Try
                        CType(control, Object).Text = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_HTML
                    Try
                        control.value = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_TIFFVIEWER, FIELDTYPES.FT_CAMERA, FIELDTYPES.FT_SIGNATURE
                    Try
                        CType(control, Object).setinternalpath(GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn)))
                    Catch ex As Exception

                    End Try
                Case FIELDTYPES.FT_HEADER

                Case FIELDTYPES.FT_DATE
                    Try
                        logger.Debug("case FT_DATE, TypeName: " + TypeName(control))
                        If InStr(1, TypeName(control), "usercontrols_zdtpicker_ascx", CompareMethod.Text) > 0 OrElse
                           InStr(1, TypeName(control), "usercontrols_zdtpickermobile_ascx", CompareMethod.Text) > 0 Then
                            CType(control, Object).value = GlobalFunctions.FormatUnambiguousDateTime(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                        Else
                            CType(control, Object).text = GlobalFunctions.FormatDate(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                        End If
                    Catch ex As Exception
                        logger.Error(ex, "case FT_DATE")
                    End Try
                Case Else
                    If TypeOf control Is TextBox Then
                        CType(control, TextBox).Text = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    ElseIf InStr(1, TypeName(control), "usercontrols_htmlcontrol_ascx", CompareMethod.Text) > 0 Then
                        CType(control, Object).Value = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    ElseIf TypeOf control Is Label Then
                        CType(control, Label).Text = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    ElseIf TypeOf control Is CheckBox Then
                        CType(control, CheckBox).Checked = GlobalFunctions.FormatBoolean(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                    ElseIf TypeOf control Is DropDownList Then
                        Try
                            CType(control, DropDownList).SelectedValue = GlobalFunctions.FormatData(Data.Tables(0).Rows(RowIdx).Item(BindColumn))
                        Catch ex As Exception

                        End Try
                    End If

            End Select
        Catch ex As Exception
            ValidationError.Display(String.Format(DbResT("An error occured trying to load data: {0}"), ex.Message))
        End Try
    End Sub

    Public Shared Function IsDBMapped(ByVal FieldType As FIELDTYPES) As Boolean
        Select Case FieldType
            Case FIELDTYPES.FT_BUTTON, FIELDTYPES.FT_FRAME, FIELDTYPES.FT_HEADER, FIELDTYPES.FT_LABEL, FIELDTYPES.FT_TABLE
                Return False
            Case Else
                Return True
        End Select
    End Function

    Public Shared Function FormatNumberForDisplay(ByVal value As Object, ByVal Args As String) As String
        Dim _preval As String = GlobalFunctions.FormatData(value)
        If IsNumeric(_preval) = True Then
            If Args = "" Then
                'is number
                Return Format(CLng(_preval), "###,###,###,###,###,##0")
            Else
                If IsNumeric(Args) = True Then
                    Dim _argnum As Integer = CLng(Args)
                    Return Format(CDbl(_preval), "###,###,###,###,###,##0." & New String("0", _argnum))
                End If
            End If
        End If
        Return _preval
    End Function

    Public Shared Function GetFullCountryName(ByVal CountryCode As String) As String
        Dim mycoll As New Collection
        mycoll.Add("Afghanistan", "AF")
        mycoll.Add("Albania", "AL")
        mycoll.Add("Algeria", "DZ")
        mycoll.Add("American Samoa", "AS")
        mycoll.Add("Andorra", "AD")
        mycoll.Add("Angola", "AO")
        mycoll.Add("Anguilla", "AI")
        mycoll.Add("Antarctica", "AQ")
        mycoll.Add("Antigua And Barbuda", "AG")
        mycoll.Add("Argentina", "AR")
        mycoll.Add("Armenia", "AM")
        mycoll.Add("Aruba", "AW")
        mycoll.Add("Australia", "AU")
        mycoll.Add("Austria", "AT")
        mycoll.Add("Azerbaijan", "AZ")
        mycoll.Add("Bahamas", "BS")
        mycoll.Add("Bahrain", "BH")
        mycoll.Add("Bangladesh", "BD")
        mycoll.Add("Barbados", "BB")
        mycoll.Add("Belarus", "BY")
        mycoll.Add("Belgium", "BE")
        mycoll.Add("Belize", "BZ")
        mycoll.Add("Benin", "BJ")
        mycoll.Add("Bermuda", "BM")
        mycoll.Add("Bhutan", "BT")
        mycoll.Add("Bolivia", "BO")
        mycoll.Add("Bosnia And Herzegowina", "BA")
        mycoll.Add("Botswana", "BW")
        mycoll.Add("Bouvet Island", "BV")
        mycoll.Add("Brazil", "BR")
        mycoll.Add("British Indian Ocean Territory", "IO")
        mycoll.Add("Brunei Darussalam", "BN")
        mycoll.Add("Bulgaria", "BG")
        mycoll.Add("Burkina Faso", "BF")
        mycoll.Add("Burundi", "BI")
        mycoll.Add("Cambodia", "KH")
        mycoll.Add("Cameroon", "CM")
        mycoll.Add("Canada", "CA")
        mycoll.Add("Cape Verde", "CV")
        mycoll.Add("Cayman Islands", "KY")
        mycoll.Add("Central African Republic", "CF")
        mycoll.Add("Chad", "TD")
        mycoll.Add("Chile", "CL")
        mycoll.Add("China", "CN")
        mycoll.Add("Christmas Island", "CX")
        mycoll.Add("Cocos (Keeling) Islands", "CC")
        mycoll.Add("Colombia", "CO")
        mycoll.Add("Comoros", "KM")
        mycoll.Add("Congo", "CG")
        mycoll.Add("Cook Islands", "CK")
        mycoll.Add("Costa Rica", "CR")
        mycoll.Add("Cote D'Ivoire", "CI")
        mycoll.Add("Croatia (Local Name: Hrvatska)", "HR")
        mycoll.Add("Cuba", "CU")
        mycoll.Add("Cyprus", "CY")
        mycoll.Add("Czech Republic", "CZ")
        mycoll.Add("Denmark", "DK")
        mycoll.Add("Djibouti", "DJ")
        mycoll.Add("Dominica", "DM")
        mycoll.Add("Dominican Republic", "DO")
        mycoll.Add("East Timor", "TP")
        mycoll.Add("Ecuador", "EC")
        mycoll.Add("Egypt", "EG")
        mycoll.Add("El Salvador", "SV")
        mycoll.Add("Equatorial Guinea", "GQ")
        mycoll.Add("Eritrea", "ER")
        mycoll.Add("Estonia", "EE")
        mycoll.Add("Ethiopia", "ET")
        mycoll.Add("Falkland Islands (Malvinas)", "FK")
        mycoll.Add("Faroe Islands", "FO")
        mycoll.Add("Fiji", "FJ")
        mycoll.Add("Finland", "FI")
        mycoll.Add("France", "FR")
        mycoll.Add("French Guiana", "GF")
        mycoll.Add("French Polynesia", "PF")
        mycoll.Add("French Southern Territories", "TF")
        mycoll.Add("Gabon", "GA")
        mycoll.Add("Gambia", "GM")
        mycoll.Add("Georgia", "GE")
        mycoll.Add("Germany", "DE")
        mycoll.Add("Ghana", "GH")
        mycoll.Add("Gibraltar", "GI")
        mycoll.Add("Greece", "GR")
        mycoll.Add("Greenland", "GL")
        mycoll.Add("Grenada", "GD")
        mycoll.Add("Guadeloupe", "GP")
        mycoll.Add("Guam", "GU")
        mycoll.Add("Guatemala", "GT")
        mycoll.Add("Guinea", "GN")
        mycoll.Add("Guinea-Bissau", "GW")
        mycoll.Add("Guyana", "GY")
        mycoll.Add("Haiti", "HT")
        mycoll.Add("Heard And Mc Donald Islands", "HM")
        mycoll.Add("Holy See (Vatican City State)", "VA")
        mycoll.Add("Honduras", "HN")
        mycoll.Add("Hong Kong", "HK")
        mycoll.Add("Hungary", "HU")
        mycoll.Add("Icel And", "IS")
        mycoll.Add("India", "IN")
        mycoll.Add("Indonesia", "ID")
        mycoll.Add("Iran (Islamic Republic Of)", "IR")
        mycoll.Add("Iraq", "IQ")
        mycoll.Add("Ireland", "IE")
        mycoll.Add("Israel", "IL")
        mycoll.Add("Italy", "IT")
        mycoll.Add("Jamaica", "JM")
        mycoll.Add("Japan", "JP")
        mycoll.Add("Jordan", "JO")
        mycoll.Add("Kazakhstan", "KZ")
        mycoll.Add("Kenya", "KE")
        mycoll.Add("Kiribati", "KI")
        mycoll.Add("Korea, Dem People'S Republic", "KP")
        mycoll.Add("Korea, Republic Of", "KR")
        mycoll.Add("Kuwait", "KW")
        mycoll.Add("Kyrgyzstan", "KG")
        mycoll.Add("Lao People'S Dem Republic", "LA")
        mycoll.Add("Latvia", "LV")
        mycoll.Add("Lebanon", "LB")
        mycoll.Add("Lesotho", "LS")
        mycoll.Add("Liberia", "LR")
        mycoll.Add("Libyan Arab Jamahiriya", "LY")
        mycoll.Add("Liechtenstein", "LI")
        mycoll.Add("Lithuania", "LT")
        mycoll.Add("Luxembourg", "LU")
        mycoll.Add("Macau", "MO")
        mycoll.Add("Macedonia", "MK")
        mycoll.Add("Madagascar", "MG")
        mycoll.Add("Malawi", "MW")
        mycoll.Add("Malaysia", "MY")
        mycoll.Add("Maldives", "MV")
        mycoll.Add("Mali", "ML")
        mycoll.Add("Malta", "MT")
        mycoll.Add("Marshall Islands", "MH")
        mycoll.Add("Martinique", "MQ")
        mycoll.Add("Mauritania", "MR")
        mycoll.Add("Mauritius", "MU")
        mycoll.Add("Mayotte", "YT")
        mycoll.Add("Mexico", "MX")
        mycoll.Add("Micronesia, Federated States", "FM")
        mycoll.Add("Moldova, Republic Of", "MD")
        mycoll.Add("Monaco", "MC")
        mycoll.Add("Mongolia", "MN")
        mycoll.Add("Montserrat", "MS")
        mycoll.Add("Morocco", "MA")
        mycoll.Add("Mozambique", "MZ")
        mycoll.Add("Myanmar", "MM")
        mycoll.Add("Namibia", "NA")
        mycoll.Add("Nauru", "NR")
        mycoll.Add("Nepal", "NP")
        mycoll.Add("Netherlands", "NL")
        mycoll.Add("Netherlands Ant Illes", "AN")
        mycoll.Add("New Caledonia", "NC")
        mycoll.Add("New Zealand", "NZ")
        mycoll.Add("Nicaragua", "NI")
        mycoll.Add("Niger", "NE")
        mycoll.Add("Nigeria", "NG")
        mycoll.Add("Niue", "NU")
        mycoll.Add("Norfolk Island", "NF")
        mycoll.Add("Northern Mariana Islands", "MP")
        mycoll.Add("Norway", "NO")
        mycoll.Add("Oman", "OM")
        mycoll.Add("Pakistan", "PK")
        mycoll.Add("Palau", "PW")
        mycoll.Add("Panama", "PA")
        mycoll.Add("Papua New Guinea", "PG")
        mycoll.Add("Paraguay", "PY")
        mycoll.Add("Peru", "PE")
        mycoll.Add("Philippines", "PH")
        mycoll.Add("Pitcairn", "PN")
        mycoll.Add("Poland", "PL")
        mycoll.Add("Portugal", "PT")
        mycoll.Add("Puerto Rico", "PR")
        mycoll.Add("Qatar", "QA")
        mycoll.Add("Reunion", "RE")
        mycoll.Add("Romania", "RO")
        mycoll.Add("Russian Federation", "RU")
        mycoll.Add("Rwanda", "RW")
        mycoll.Add("Saint K Itts And Nevis", "KN")
        mycoll.Add("Saint Lucia", "LC")
        mycoll.Add("Saint Vincent, The Grenadines", "VC")
        mycoll.Add("Samoa", "WS")
        mycoll.Add("San Marino", "SM")
        mycoll.Add("Sao Tome And Principe", "ST")
        mycoll.Add("Saudi Arabia", "SA")
        mycoll.Add("Senegal", "SN")
        mycoll.Add("Seychelles", "SC")
        mycoll.Add("Sierra Leone", "SL")
        mycoll.Add("Singapore", "SG")
        mycoll.Add("Slovakia (Slovak Republic)", "SK")
        mycoll.Add("Slovenia", "SI")
        mycoll.Add("Solomon Islands", "SB")
        mycoll.Add("Somalia", "SO")
        mycoll.Add("South Africa", "ZA")
        mycoll.Add("South Georgia , S Sandwich Is.", "GS")
        mycoll.Add("Spain", "ES")
        mycoll.Add("Sri Lanka", "LK")
        mycoll.Add("St. Helena", "SH")
        mycoll.Add("St. Pierre And Miquelon", "PM")
        mycoll.Add("Sudan", "SD")
        mycoll.Add("Suriname", "SR")
        mycoll.Add("Svalbard, Jan Mayen Islands", "SJ")
        mycoll.Add("Sw Aziland", "SZ")
        mycoll.Add("Sweden", "SE")
        mycoll.Add("Switzerland", "CH")
        mycoll.Add("Syrian Arab Republic", "SY")
        mycoll.Add("Taiwan", "TW")
        mycoll.Add("Tajikistan", "TJ")
        mycoll.Add("Tanzania, United Republic Of", "TZ")
        mycoll.Add("Thailand", "TH")
        mycoll.Add("Togo", "TG")
        mycoll.Add("Tokelau", "TK")
        mycoll.Add("Tonga", "TO")
        mycoll.Add("Trinidad And Tobago", "TT")
        mycoll.Add("Tunisia", "TN")
        mycoll.Add("Turkey", "TR")
        mycoll.Add("Turkmenistan", "TM")
        mycoll.Add("Turks And Caicos Islands", "TC")
        mycoll.Add("Tuvalu", "TV")
        mycoll.Add("Uganda", "UG")
        mycoll.Add("Ukraine", "UA")
        mycoll.Add("United Arab Emirates", "AE")
        mycoll.Add("United Kingdom", "GB")
        mycoll.Add("United States", "US")
        mycoll.Add("United States Minor Is.", "UM")
        mycoll.Add("Uruguay", "UY")
        mycoll.Add("Uzbekistan", "UZ")
        mycoll.Add("Vanuatu", "VU")
        mycoll.Add("Venezuela", "VE")
        mycoll.Add("Viet Nam", "VN")
        mycoll.Add("Virgin Islands (British)", "VG")
        mycoll.Add("Virgin Islands (U.S.)", "VI")
        mycoll.Add("Wallis And Futuna Islands", "WF")
        mycoll.Add("Western Sahara", "EH")
        mycoll.Add("Yemen", "YE")
        mycoll.Add("Yugoslavia", "YU")
        mycoll.Add("Zaire", "ZR")
        mycoll.Add("Zambia", "ZM")

        If mycoll.Contains(CountryCode) = True Then
            Return mycoll.Item(CountryCode)
        Else
            Return ""
        End If
    End Function

    Public Shared Sub LoadCountryDropDown(ByRef Dropdown As DropDownList)
        Dropdown.Items.Add(New ListItem("Afghanistan", "AF"))
        Dropdown.Items.Add(New ListItem("Albania", "AL"))
        Dropdown.Items.Add(New ListItem("Algeria", "DZ"))
        Dropdown.Items.Add(New ListItem("American Samoa", "AS"))
        Dropdown.Items.Add(New ListItem("Andorra", "AD"))
        Dropdown.Items.Add(New ListItem("Angola", "AO"))
        Dropdown.Items.Add(New ListItem("Anguilla", "AI"))
        Dropdown.Items.Add(New ListItem("Antarctica", "AQ"))
        Dropdown.Items.Add(New ListItem("Antigua And Barbuda", "AG"))
        Dropdown.Items.Add(New ListItem("Argentina", "AR"))
        Dropdown.Items.Add(New ListItem("Armenia", "AM"))
        Dropdown.Items.Add(New ListItem("Aruba", "AW"))
        Dropdown.Items.Add(New ListItem("Australia", "AU"))
        Dropdown.Items.Add(New ListItem("Austria", "AT"))
        Dropdown.Items.Add(New ListItem("Azerbaijan", "AZ"))
        Dropdown.Items.Add(New ListItem("Bahamas", "BS"))
        Dropdown.Items.Add(New ListItem("Bahrain", "BH"))
        Dropdown.Items.Add(New ListItem("Bangladesh", "BD"))
        Dropdown.Items.Add(New ListItem("Barbados", "BB"))
        Dropdown.Items.Add(New ListItem("Belarus", "BY"))
        Dropdown.Items.Add(New ListItem("Belgium", "BE"))
        Dropdown.Items.Add(New ListItem("Belize", "BZ"))
        Dropdown.Items.Add(New ListItem("Benin", "BJ"))
        Dropdown.Items.Add(New ListItem("Bermuda", "BM"))
        Dropdown.Items.Add(New ListItem("Bhutan", "BT"))
        Dropdown.Items.Add(New ListItem("Bolivia", "BO"))
        Dropdown.Items.Add(New ListItem("Bosnia And Herzegowina", "BA"))
        Dropdown.Items.Add(New ListItem("Botswana", "BW"))
        Dropdown.Items.Add(New ListItem("Bouvet Island", "BV"))
        Dropdown.Items.Add(New ListItem("Brazil", "BR"))
        Dropdown.Items.Add(New ListItem("British Indian Ocean Territory", "IO"))
        Dropdown.Items.Add(New ListItem("Brunei Darussalam", "BN"))
        Dropdown.Items.Add(New ListItem("Bulgaria", "BG"))
        Dropdown.Items.Add(New ListItem("Burkina Faso", "BF"))
        Dropdown.Items.Add(New ListItem("Burundi", "BI"))
        Dropdown.Items.Add(New ListItem("Cambodia", "KH"))
        Dropdown.Items.Add(New ListItem("Cameroon", "CM"))
        Dropdown.Items.Add(New ListItem("Canada", "CA"))
        Dropdown.Items.Add(New ListItem("Cape Verde", "CV"))
        Dropdown.Items.Add(New ListItem("Cayman Islands", "KY"))
        Dropdown.Items.Add(New ListItem("Central African Republic", "CF"))
        Dropdown.Items.Add(New ListItem("Chad", "TD"))
        Dropdown.Items.Add(New ListItem("Chile", "CL"))
        Dropdown.Items.Add(New ListItem("China", "CN"))
        Dropdown.Items.Add(New ListItem("Christmas Island", "CX"))
        Dropdown.Items.Add(New ListItem("Cocos (Keeling) Islands", "CC"))
        Dropdown.Items.Add(New ListItem("Colombia", "CO"))
        Dropdown.Items.Add(New ListItem("Comoros", "KM"))
        Dropdown.Items.Add(New ListItem("Congo", "CG"))
        Dropdown.Items.Add(New ListItem("Cook Islands", "CK"))
        Dropdown.Items.Add(New ListItem("Costa Rica", "CR"))
        Dropdown.Items.Add(New ListItem("Cote D'Ivoire", "CI"))
        Dropdown.Items.Add(New ListItem("Croatia (Local Name: Hrvatska)", "HR"))
        Dropdown.Items.Add(New ListItem("Cuba", "CU"))
        Dropdown.Items.Add(New ListItem("Cyprus", "CY"))
        Dropdown.Items.Add(New ListItem("Czech Republic", "CZ"))
        Dropdown.Items.Add(New ListItem("Denmark", "DK"))
        Dropdown.Items.Add(New ListItem("Djibouti", "DJ"))
        Dropdown.Items.Add(New ListItem("Dominica", "DM"))
        Dropdown.Items.Add(New ListItem("Dominican Republic", "DO"))
        Dropdown.Items.Add(New ListItem("East Timor", "TP"))
        Dropdown.Items.Add(New ListItem("Ecuador", "EC"))
        Dropdown.Items.Add(New ListItem("Egypt", "EG"))
        Dropdown.Items.Add(New ListItem("El Salvador", "SV"))
        Dropdown.Items.Add(New ListItem("Equatorial Guinea", "GQ"))
        Dropdown.Items.Add(New ListItem("Eritrea", "ER"))
        Dropdown.Items.Add(New ListItem("Estonia", "EE"))
        Dropdown.Items.Add(New ListItem("Ethiopia", "ET"))
        Dropdown.Items.Add(New ListItem("Falkland Islands (Malvinas)", "FK"))
        Dropdown.Items.Add(New ListItem("Faroe Islands", "FO"))
        Dropdown.Items.Add(New ListItem("Fiji", "FJ"))
        Dropdown.Items.Add(New ListItem("Finland", "FI"))
        Dropdown.Items.Add(New ListItem("France", "FR"))
        Dropdown.Items.Add(New ListItem("French Guiana", "GF"))
        Dropdown.Items.Add(New ListItem("French Polynesia", "PF"))
        Dropdown.Items.Add(New ListItem("French Southern Territories", "TF"))
        Dropdown.Items.Add(New ListItem("Gabon", "GA"))
        Dropdown.Items.Add(New ListItem("Gambia", "GM"))
        Dropdown.Items.Add(New ListItem("Georgia", "GE"))
        Dropdown.Items.Add(New ListItem("Germany", "DE"))
        Dropdown.Items.Add(New ListItem("Ghana", "GH"))
        Dropdown.Items.Add(New ListItem("Gibraltar", "GI"))
        Dropdown.Items.Add(New ListItem("Greece", "GR"))
        Dropdown.Items.Add(New ListItem("Greenland", "GL"))
        Dropdown.Items.Add(New ListItem("Grenada", "GD"))
        Dropdown.Items.Add(New ListItem("Guadeloupe", "GP"))
        Dropdown.Items.Add(New ListItem("Guam", "GU"))
        Dropdown.Items.Add(New ListItem("Guatemala", "GT"))
        Dropdown.Items.Add(New ListItem("Guinea", "GN"))
        Dropdown.Items.Add(New ListItem("Guinea-Bissau", "GW"))
        Dropdown.Items.Add(New ListItem("Guyana", "GY"))
        Dropdown.Items.Add(New ListItem("Haiti", "HT"))
        Dropdown.Items.Add(New ListItem("Heard And Mc Donald Islands", "HM"))
        Dropdown.Items.Add(New ListItem("Holy See (Vatican City State)", "VA"))
        Dropdown.Items.Add(New ListItem("Honduras", "HN"))
        Dropdown.Items.Add(New ListItem("Hong Kong", "HK"))
        Dropdown.Items.Add(New ListItem("Hungary", "HU"))
        Dropdown.Items.Add(New ListItem("Icel And", "IS"))
        Dropdown.Items.Add(New ListItem("India", "IN"))
        Dropdown.Items.Add(New ListItem("Indonesia", "ID"))
        Dropdown.Items.Add(New ListItem("Iran (Islamic Republic Of)", "IR"))
        Dropdown.Items.Add(New ListItem("Iraq", "IQ"))
        Dropdown.Items.Add(New ListItem("Ireland", "IE"))
        Dropdown.Items.Add(New ListItem("Israel", "IL"))
        Dropdown.Items.Add(New ListItem("Italy", "IT"))
        Dropdown.Items.Add(New ListItem("Jamaica", "JM"))
        Dropdown.Items.Add(New ListItem("Japan", "JP"))
        Dropdown.Items.Add(New ListItem("Jordan", "JO"))
        Dropdown.Items.Add(New ListItem("Kazakhstan", "KZ"))
        Dropdown.Items.Add(New ListItem("Kenya", "KE"))
        Dropdown.Items.Add(New ListItem("Kiribati", "KI"))
        Dropdown.Items.Add(New ListItem("Korea, Dem People'S Republic", "KP"))
        Dropdown.Items.Add(New ListItem("Korea, Republic Of", "KR"))
        Dropdown.Items.Add(New ListItem("Kuwait", "KW"))
        Dropdown.Items.Add(New ListItem("Kyrgyzstan", "KG"))
        Dropdown.Items.Add(New ListItem("Lao People'S Dem Republic", "LA"))
        Dropdown.Items.Add(New ListItem("Latvia", "LV"))
        Dropdown.Items.Add(New ListItem("Lebanon", "LB"))
        Dropdown.Items.Add(New ListItem("Lesotho", "LS"))
        Dropdown.Items.Add(New ListItem("Liberia", "LR"))
        Dropdown.Items.Add(New ListItem("Libyan Arab Jamahiriya", "LY"))
        Dropdown.Items.Add(New ListItem("Liechtenstein", "LI"))
        Dropdown.Items.Add(New ListItem("Lithuania", "LT"))
        Dropdown.Items.Add(New ListItem("Luxembourg", "LU"))
        Dropdown.Items.Add(New ListItem("Macau", "MO"))
        Dropdown.Items.Add(New ListItem("Macedonia", "MK"))
        Dropdown.Items.Add(New ListItem("Madagascar", "MG"))
        Dropdown.Items.Add(New ListItem("Malawi", "MW"))
        Dropdown.Items.Add(New ListItem("Malaysia", "MY"))
        Dropdown.Items.Add(New ListItem("Maldives", "MV"))
        Dropdown.Items.Add(New ListItem("Mali", "ML"))
        Dropdown.Items.Add(New ListItem("Malta", "MT"))
        Dropdown.Items.Add(New ListItem("Marshall Islands", "MH"))
        Dropdown.Items.Add(New ListItem("Martinique", "MQ"))
        Dropdown.Items.Add(New ListItem("Mauritania", "MR"))
        Dropdown.Items.Add(New ListItem("Mauritius", "MU"))
        Dropdown.Items.Add(New ListItem("Mayotte", "YT"))
        Dropdown.Items.Add(New ListItem("Mexico", "MX"))
        Dropdown.Items.Add(New ListItem("Micronesia, Federated States", "FM"))
        Dropdown.Items.Add(New ListItem("Moldova, Republic Of", "MD"))
        Dropdown.Items.Add(New ListItem("Monaco", "MC"))
        Dropdown.Items.Add(New ListItem("Mongolia", "MN"))
        Dropdown.Items.Add(New ListItem("Montserrat", "MS"))
        Dropdown.Items.Add(New ListItem("Morocco", "MA"))
        Dropdown.Items.Add(New ListItem("Mozambique", "MZ"))
        Dropdown.Items.Add(New ListItem("Myanmar", "MM"))
        Dropdown.Items.Add(New ListItem("Namibia", "NA"))
        Dropdown.Items.Add(New ListItem("Nauru", "NR"))
        Dropdown.Items.Add(New ListItem("Nepal", "NP"))
        Dropdown.Items.Add(New ListItem("Netherlands", "NL"))
        Dropdown.Items.Add(New ListItem("Netherlands Ant Illes", "AN"))
        Dropdown.Items.Add(New ListItem("New Caledonia", "NC"))
        Dropdown.Items.Add(New ListItem("New Zealand", "NZ"))
        Dropdown.Items.Add(New ListItem("Nicaragua", "NI"))
        Dropdown.Items.Add(New ListItem("Niger", "NE"))
        Dropdown.Items.Add(New ListItem("Nigeria", "NG"))
        Dropdown.Items.Add(New ListItem("Niue", "NU"))
        Dropdown.Items.Add(New ListItem("Norfolk Island", "NF"))
        Dropdown.Items.Add(New ListItem("Northern Mariana Islands", "MP"))
        Dropdown.Items.Add(New ListItem("Norway", "NO"))
        Dropdown.Items.Add(New ListItem("Oman", "OM"))
        Dropdown.Items.Add(New ListItem("Pakistan", "PK"))
        Dropdown.Items.Add(New ListItem("Palau", "PW"))
        Dropdown.Items.Add(New ListItem("Panama", "PA"))
        Dropdown.Items.Add(New ListItem("Papua New Guinea", "PG"))
        Dropdown.Items.Add(New ListItem("Paraguay", "PY"))
        Dropdown.Items.Add(New ListItem("Peru", "PE"))
        Dropdown.Items.Add(New ListItem("Philippines", "PH"))
        Dropdown.Items.Add(New ListItem("Pitcairn", "PN"))
        Dropdown.Items.Add(New ListItem("Poland", "PL"))
        Dropdown.Items.Add(New ListItem("Portugal", "PT"))
        Dropdown.Items.Add(New ListItem("Puerto Rico", "PR"))
        Dropdown.Items.Add(New ListItem("Qatar", "QA"))
        Dropdown.Items.Add(New ListItem("Reunion", "RE"))
        Dropdown.Items.Add(New ListItem("Romania", "RO"))
        Dropdown.Items.Add(New ListItem("Russian Federation", "RU"))
        Dropdown.Items.Add(New ListItem("Rwanda", "RW"))
        Dropdown.Items.Add(New ListItem("Saint K Itts And Nevis", "KN"))
        Dropdown.Items.Add(New ListItem("Saint Lucia", "LC"))
        Dropdown.Items.Add(New ListItem("Saint Vincent, The Grenadines", "VC"))
        Dropdown.Items.Add(New ListItem("Samoa", "WS"))
        Dropdown.Items.Add(New ListItem("San Marino", "SM"))
        Dropdown.Items.Add(New ListItem("Sao Tome And Principe", "ST"))
        Dropdown.Items.Add(New ListItem("Saudi Arabia", "SA"))
        Dropdown.Items.Add(New ListItem("Senegal", "SN"))
        Dropdown.Items.Add(New ListItem("Seychelles", "SC"))
        Dropdown.Items.Add(New ListItem("Sierra Leone", "SL"))
        Dropdown.Items.Add(New ListItem("Singapore", "SG"))
        Dropdown.Items.Add(New ListItem("Slovakia (Slovak Republic)", "SK"))
        Dropdown.Items.Add(New ListItem("Slovenia", "SI"))
        Dropdown.Items.Add(New ListItem("Solomon Islands", "SB"))
        Dropdown.Items.Add(New ListItem("Somalia", "SO"))
        Dropdown.Items.Add(New ListItem("South Africa", "ZA"))
        Dropdown.Items.Add(New ListItem("South Georgia , S Sandwich Is.", "GS"))
        Dropdown.Items.Add(New ListItem("Spain", "ES"))
        Dropdown.Items.Add(New ListItem("Sri Lanka", "LK"))
        Dropdown.Items.Add(New ListItem("St. Helena", "SH"))
        Dropdown.Items.Add(New ListItem("St. Pierre And Miquelon", "PM"))
        Dropdown.Items.Add(New ListItem("Sudan", "SD"))
        Dropdown.Items.Add(New ListItem("Suriname", "SR"))
        Dropdown.Items.Add(New ListItem("Svalbard, Jan Mayen Islands", "SJ"))
        Dropdown.Items.Add(New ListItem("Sw Aziland", "SZ"))
        Dropdown.Items.Add(New ListItem("Sweden", "SE"))
        Dropdown.Items.Add(New ListItem("Switzerland", "CH"))
        Dropdown.Items.Add(New ListItem("Syrian Arab Republic", "SY"))
        Dropdown.Items.Add(New ListItem("Taiwan", "TW"))
        Dropdown.Items.Add(New ListItem("Tajikistan", "TJ"))
        Dropdown.Items.Add(New ListItem("Tanzania, United Republic Of", "TZ"))
        Dropdown.Items.Add(New ListItem("Thailand", "TH"))
        Dropdown.Items.Add(New ListItem("Togo", "TG"))
        Dropdown.Items.Add(New ListItem("Tokelau", "TK"))
        Dropdown.Items.Add(New ListItem("Tonga", "TO"))
        Dropdown.Items.Add(New ListItem("Trinidad And Tobago", "TT"))
        Dropdown.Items.Add(New ListItem("Tunisia", "TN"))
        Dropdown.Items.Add(New ListItem("Turkey", "TR"))
        Dropdown.Items.Add(New ListItem("Turkmenistan", "TM"))
        Dropdown.Items.Add(New ListItem("Turks And Caicos Islands", "TC"))
        Dropdown.Items.Add(New ListItem("Tuvalu", "TV"))
        Dropdown.Items.Add(New ListItem("Uganda", "UG"))
        Dropdown.Items.Add(New ListItem("Ukraine", "UA"))
        Dropdown.Items.Add(New ListItem("United Arab Emirates", "AE"))
        Dropdown.Items.Add(New ListItem("United Kingdom", "GB"))
        Dropdown.Items.Add(New ListItem("United States", "US"))
        Dropdown.Items.Add(New ListItem("United States Minor Is.", "UM"))
        Dropdown.Items.Add(New ListItem("Uruguay", "UY"))
        Dropdown.Items.Add(New ListItem("Uzbekistan", "UZ"))
        Dropdown.Items.Add(New ListItem("Vanuatu", "VU"))
        Dropdown.Items.Add(New ListItem("Venezuela", "VE"))
        Dropdown.Items.Add(New ListItem("Viet Nam", "VN"))
        Dropdown.Items.Add(New ListItem("Virgin Islands (British)", "VG"))
        Dropdown.Items.Add(New ListItem("Virgin Islands (U.S.)", "VI"))
        Dropdown.Items.Add(New ListItem("Wallis And Futuna Islands", "WF"))
        Dropdown.Items.Add(New ListItem("Western Sahara", "EH"))
        Dropdown.Items.Add(New ListItem("Yemen", "YE"))
        Dropdown.Items.Add(New ListItem("Yugoslavia", "YU"))
        Dropdown.Items.Add(New ListItem("Zaire", "ZR"))
        Dropdown.Items.Add(New ListItem("Zambia", "ZM"))


    End Sub

    Public Shared Sub GetLabelArgs(ByVal Arguments As String, ByRef LabelText As String, ByRef Size As Integer, ByRef Bold As Boolean, ByRef Italic As Boolean)
        Dim arrsplits() As String = Split(Arguments, "\,\")
        If UBound(arrsplits) = 3 Then
            Try
                Size = GlobalFunctions.FormatInteger(arrsplits(1), 8)
            Catch ex As Exception
            End Try
            LabelText = arrsplits(0)
            Bold = GlobalFunctions.FormatBoolean(arrsplits(2))
            Italic = GlobalFunctions.FormatBoolean(arrsplits(3))
        End If
    End Sub

    Public Shared Sub BindLabelSource(ByRef ddFont As DropDownList, ByRef LabelText As TextBox, ByRef Bold As CheckBox, ByRef Italic As CheckBox, ByRef Data As DataSet, ByVal BindColumn As String)
        Dim _Args As String = GlobalFunctions.FormatData(Data.Tables(0).Rows(0).Item(BindColumn))
        If Len(_Args) > 0 Then
            Dim arrsplits() As String = Split(_Args, "\,\")
            If UBound(arrsplits) = 3 Then
                Try
                    ddFont.SelectedValue = GlobalFunctions.FormatInteger(arrsplits(1), 8)
                Catch ex As Exception
                End Try
                'LabelText.Text = arrsplits(0)
                Bold.Checked = GlobalFunctions.FormatBoolean(arrsplits(2))
                Italic.Checked = GlobalFunctions.FormatBoolean(arrsplits(3))
            End If
        End If
    End Sub

    Public Shared Sub GetDateTimeSettings(ByVal DateTimeArgs As String, ByRef IncludeTime As Boolean, ByRef CurrentDefault As Boolean, Optional ByRef HideDate As Boolean = False)
        IncludeTime = False
        CurrentDefault = False
        HideDate = False
        Dim arrTotal() As String = Split(DateTimeArgs, ",")
        If UBound(arrTotal) >= 1 Then
            IncludeTime = GlobalFunctions.FormatBoolean(arrTotal(0))
            CurrentDefault = GlobalFunctions.FormatBoolean(arrTotal(1))
        End If
        If UBound(arrTotal) >= 2 Then
            HideDate = GlobalFunctions.FormatBoolean(arrTotal(2))
        End If
        'logger.Debug("IncludeTime: " + IncludeTime.ToString() + ", HideDate: " + HideDate.ToString())
    End Sub

    Public Shared Sub LoadImageViewerArgs(Arguments As String, ByRef CameraOnly As Boolean)
        CameraOnly = False
        Dim arrItems() As String = Split(Arguments, ",")
        If UBound(arrItems) >= 0 Then
            CameraOnly = GlobalFunctions.FormatBoolean(arrItems(0))
        End If
    End Sub

    Public Shared Sub GetDynamicArguments(ByVal Arguments As String, ByRef Form As String, ByRef CaptionField As String, ByRef ValueField As String, ByRef OrderField As String,
                                          Optional ByRef IsDistinct As Boolean = False, Optional ByRef Filters As String = "", Optional ByRef DefFindMode As Boolean = False,
                                          Optional ByRef ShowRefresh As Boolean = False, Optional ByRef ShowNewEntry As Boolean = False)
        Dim _remaining As String = Mid(Arguments, 4, Len(Arguments) - 3)
        Dim arrsplits() As String = Split(_remaining, "\,\")
        If UBound(arrsplits) >= 2 Then
            Form = arrsplits(0)
            CaptionField = arrsplits(1)
            ValueField = arrsplits(2)
            If UBound(arrsplits) >= 3 Then OrderField = arrsplits(3)
            If UBound(arrsplits) >= 4 Then IsDistinct = GlobalFunctions.FormatBoolean(arrsplits(4))
            If UBound(arrsplits) >= 5 Then Filters = TranslateFilters(arrsplits(5))
            If UBound(arrsplits) >= 6 Then DefFindMode = GlobalFunctions.FormatBoolean(arrsplits(6))
            If UBound(arrsplits) >= 7 Then ShowRefresh = GlobalFunctions.FormatBoolean(arrsplits(7))
            If UBound(arrsplits) >= 8 Then ShowNewEntry = GlobalFunctions.FormatBoolean(arrsplits(8))
        End If
        logger.Trace("Arguments {0}, Form: {1}, CaptionField: {2}, ValueField: {3}, OrderField: {4}, IsDistinct: {5}, Filters: {6}, DefFindMode: {7}, ShowRefresh: {8}, ShowNewEntry: {9}",
                     Arguments, Form, CaptionField, ValueField, OrderField, IsDistinct, Filters, DefFindMode, ShowRefresh, ShowNewEntry)
    End Sub

    Public Shared Sub GetDynamicGPSArguments(ByVal Arguments As String, ByRef Form As String, ByRef CaptionField As String, ByRef ValueField As String, ByRef OrderField As String, Optional ByRef IsDistinct As Boolean = False, Optional ByRef Filters As String = "", Optional ByRef DefFindMode As Boolean = False, Optional ByRef ShowRefresh As Boolean = False, Optional ByRef StartCaption As String = "Start Tracking", Optional ByRef StopCaption As String = "Stop Tracking")
        Dim _remaining As String = Mid(Arguments, 4, Len(Arguments) - 3)
        Dim arrsplits() As String = Split(_remaining, "\,\")
        If UBound(arrsplits) >= 2 Then
            Form = arrsplits(0)
            CaptionField = arrsplits(1)
            ValueField = arrsplits(2)
            If UBound(arrsplits) >= 3 Then OrderField = arrsplits(3)
            If UBound(arrsplits) >= 4 Then IsDistinct = GlobalFunctions.FormatBoolean(arrsplits(4))
            If UBound(arrsplits) >= 5 Then Filters = TranslateFilters(arrsplits(5))
            If UBound(arrsplits) >= 6 Then DefFindMode = GlobalFunctions.FormatBoolean(arrsplits(6))
            If UBound(arrsplits) >= 7 Then ShowRefresh = GlobalFunctions.FormatBoolean(arrsplits(7))
            If UBound(arrsplits) >= 8 Then StartCaption = GlobalFunctions.FormatData(arrsplits(8))
            If UBound(arrsplits) >= 9 Then StopCaption = GlobalFunctions.FormatData(arrsplits(9))
        End If
    End Sub

    Private Shared Function TranslateFilters(ByVal RawFilter As String) As String
        Return RawFilter
    End Function

    Public Shared Function GetLookupCaption(ByRef WebObj As ZukamiLib.WebSession, ByVal FieldArgs As String, ByVal Value As String) As String
        GetLookupCaption = ""
        If GlobalFunctions.IsLookup(FieldArgs) = True Then
            Dim _formname As String = ""
            Dim _captionfieldname As String = ""
            Dim _valuefieldname As String = ""
            GlobalFunctions.GetDynamicArguments(FieldArgs, _formname, _captionfieldname, _valuefieldname, "")

            If Len(_formname) > 0 And Len(_captionfieldname) > 0 And Len(_valuefieldname) > 0 Then
                Try
                    Dim _set As DataSet = WebObj.FormItems_GrabFormDataWithWhere(_formname, _captionfieldname, _valuefieldname, Value)
                    If _set.Tables(0).Rows.Count > 0 Then
                        Return GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item(0))
                    End If
                Catch ex As Exception
                End Try
            End If
        ElseIf GlobalFunctions.IsSQLSource(FieldArgs) = True Then

        Else
            Return Value
        End If
    End Function

    Public Shared Function LoadData(ByRef webObj As ZukamiLib.WebSession, ByVal FormName As String, ByVal CaptionFieldName As String, ByVal ValueFieldName As String, ByVal OrderFieldName As String, ByVal Whereclause As String, ByVal IsDistinct As Boolean) As DataSet
        logger.Debug("FormName: " + FormatData(FormName) +
                     ", CaptionFieldName: " + FormatData(CaptionFieldName) +
                     ", ValueFieldName: " + FormatData(ValueFieldName) +
                     ", OrderFieldName: " + FormatData(OrderFieldName) +
                     ", Whereclause: " + FormatData(Whereclause) +
                     ", IsDistinct: " + FormatBoolean(IsDistinct).ToString())
        Dim result As DataSet = webObj.FormItems_GrabFormData2(FormName, CaptionFieldName, ValueFieldName, OrderFieldName, Whereclause, IsDistinct, OracleDBEnabled())
        If OracleDBEnabled() Then
            If result IsNot Nothing AndAlso result.Tables.Count > 0 AndAlso result.Tables(0).Rows.Count > 0 Then
                Dim sql As String = result.Tables(0).Rows(0).Item("TotalSQL")
                result = OracleGetDataSetBySql(OracleConvertToPLSQL(sql))
            Else
                logger.Error("something wrong here - cannot get the sql")
            End If
        End If
        Return result
    End Function

    Public Shared Function IsSQLSource(ByVal Args As String) As Boolean
        Try
            If Mid(Args, 1, 3) = "SQ:" Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
        End Try
    End Function

    Public Shared Function IsLookup(ByVal Args As String) As Boolean
        Try
            If Mid(Args, 1, 3) = "DD:" Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
        End Try
    End Function

    Public Shared Sub RunDynamicAction(ByRef WebObj As ZukamiLib.WebSession, ByVal UniqueCodeTag As String, ByVal DynamicActionValue As String, ByRef FilterArgs As Collection, Optional ByRef ErrorOccured As String = "")
        If Len(DynamicActionValue) >= 3 Then
            Dim _key As String = LCase(Mid(DynamicActionValue, 1, 3))
            Dim _data As String = Mid(DynamicActionValue, 4, Len(DynamicActionValue) - 3)
            Select Case _key
                Case "ss,"
                    WebObj.CustomSQLCommand(GlobalFunctions.SubstituteSpecialTags(WebObj, _data, FilterArgs))
                    WebObj.CustomSQLExecute()
                Case "sq,"
                    WebObj.CustomSQLCommand(_data)
                    Dim _val As String = ""
                    Dim _data2 As DataSet = WebObj.CustomSQLExecuteReturn
                    If _data2.Tables(0).Rows.Count > 0 Then
                        _val = GlobalFunctions.FormatData(_data2.Tables(0).Rows(0).Item(0))
                    End If
                    If Len(_val) > 0 Then
                        WebObj.CustomSQLCommand(GlobalFunctions.SubstituteSpecialTags(WebObj, _val, FilterArgs))
                        WebObj.CustomSQLExecute()
                    End If
                Case "cd,"
                    Dim CompilationError As String = ""
                    Dim _CodeID As String = UniqueCodeTag
                    If GlobalFunctions.CacheCode(_data, _CodeID, ZukamiLib.ZukamiCode.FORMULATYPES.FORMULATYPE_STRING, CompilationError) = False Then
                        ValidationError.Display(String.Format(DbResT("Script compilation error: {0}"), CompilationError))
                        ErrorOccured = True
                    Else
                        Dim _valRet As String = GlobalFunctions.RunCode(_CodeID, GlobalFunctions.CreateScribe(FilterArgs))
                    End If
            End Select
        End If
    End Sub

    Public Shared Function CanConfigurePermissions(ByVal Owner As Guid, ByVal Settings As ZukamiLib.ZukamiSettings) As Boolean
        If Settings.InAdminGroup = True Then Return True
        If Settings.CurrentUserGUID = Owner Then
            Return True
        End If
        Return False
    End Function

    Public Shared Sub CreateEmptyFieldsDD(ByRef ddl As DropDownList)
        Dim _item As New ListItem("--Please select a form--", "")
        ddl.Items.Add(_item)
    End Sub

    'Public Shared Sub LoadFormFieldsDDByGUID(ByRef ddl As DropDownList, ByVal FormGUID As Guid, ByRef WebObj As ZukamiLib.WebSession)
    '    Dim _set As DataSet = WebObj.FormItems_Get(FormGUID)
    '    ddl.Items.Clear()
    '    Dim _counter As Integer
    '    If _set.Tables(0).Rows.Count = 0 Then
    '        Dim _item As New ListItem("--No fields in this form--", "")
    '        ddl.Items.Add(_item)
    '    Else
    '        Dim _item2 As New ListItem("ID", "ID")
    '        ddl.Items.Add(_item2)

    '        For _counter = 0 To _set.Tables(0).Rows.Count - 1
    '            Dim _item As New ListItem(GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldCaption")), GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldCaption")))
    '            ddl.Items.Add(_item)
    '        Next _counter
    '    End If

    'End Sub

    Public Shared Sub LoadApps(ByRef webobj As ZukamiLib.WebSession, ByRef DDObj As DropDownList)
        Dim _set As DataSet = webobj.Apps_Get()
        Dim _counter As Integer
        DDObj.Items.Clear()
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            DDObj.Items.Add(New System.Web.UI.WebControls.ListItem(GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("AppName")), GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("ID"))))
        Next _counter


    End Sub

    Public Shared Sub AddCustomFields(ByRef DDList As DropDownList, ByRef WebObj As ZukamiLib.WebSession, ByRef ViewID As Guid)
        Dim _set As DataSet = WebObj.ViewColumns_GetCustomFields(ViewID)
        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _sqlboundfield As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("SQLBoundFld"))
            Dim _colcaption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("ColCaption"))

            DDList.Items.Add(New System.Web.UI.WebControls.ListItem(_colcaption, "CF:" & _sqlboundfield))
        Next _counter

    End Sub

    Public Shared Sub LoadChartViews(ByRef DDList As DropDownList, ByRef WebObj As ZukamiLib.WebSession)
        Dim _set As DataSet = WebObj.Views_GetAllByType(2)
        DDList.Items.Clear()

        DDList.Items.Add(New System.Web.UI.WebControls.ListItem("Not applicable", ""))

        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim strCaption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Caption"))
            Dim strViewID As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("ID"))

            DDList.Items.Add(New System.Web.UI.WebControls.ListItem(strCaption, strViewID))
        Next _counter
    End Sub

    Private Shared Function CreateViewColumnSummary(ByVal BoundTbl As String, ByVal BoundFld As String, ByVal Caption As String, ByVal FieldType As FIELDTYPES, ByVal IsCustomField As Boolean, ByVal FieldArgs As String, Optional ByVal OrderTag As String = "") As String
        Return BoundTbl & GlobalFunctions.VCSSEPARATOR &
                BoundFld & GlobalFunctions.VCSSEPARATOR &
                Caption & GlobalFunctions.VCSSEPARATOR &
                CInt(FieldType) & GlobalFunctions.VCSSEPARATOR &
                CStr(IsCustomField) & GlobalFunctions.VCSSEPARATOR &
                FieldArgs & GlobalFunctions.VCSSEPARATOR & OrderTag
    End Function

    Public Shared Sub LoadViewColumnSummary(ByVal Fullstring As String, ByRef BoundTbl As String, ByRef BoundFld As String, ByRef Caption As String, ByRef FieldType As FIELDTYPES, ByRef IsCustomField As Boolean, ByRef FieldArgs As String, Optional ByRef OriginalBoundField As String = "")
        Dim arrsplits() As String = Split(Fullstring, GlobalFunctions.VCSSEPARATOR)
        If UBound(arrsplits) >= 5 Then
            BoundTbl = arrsplits(0)
            BoundFld = arrsplits(1)
            Caption = arrsplits(2)
            FieldType = GlobalFunctions.FormatInteger(arrsplits(3), GlobalFunctions.FIELDTYPES.FT_SHORTTEXT)
            IsCustomField = GlobalFunctions.FormatBoolean(arrsplits(4))
            FieldArgs = arrsplits(5)
        End If
        If UBound(arrsplits) >= 6 Then
            OriginalBoundField = arrsplits(6)
        End If
        logger.Debug("Fullstring: " + Fullstring + ", BoundTbl: " + BoundTbl + ", BoundFld: " + BoundFld + ", Caption: " + Caption)
    End Sub

    Public Shared Sub LoadFormFieldsFromViewColumns(ByRef ddl As DropDownList, ByVal ViewGUID As Guid, ByRef WebObj As ZukamiLib.WebSession, Optional ByVal FilterDateOnly As Boolean = False, Optional ByVal FilterNumericalOnly As Boolean = False, Optional ByVal SplitByComponents As Boolean = False, Optional ByVal AddNoRecordsRow As Boolean = True, Optional ByVal AddAdditionalMetaKeys As Boolean = False, Optional ByVal EmptyFieldArgs As Boolean = False)
        Dim _set As DataSet = WebObj.ViewColumns_Get(ViewGUID)
        Dim _counter As Integer
        ddl.Items.Clear()


        Dim _item3 As New ListItem("ID", "ID")
        ddl.Items.Add(_item3)

        If _set.Tables(0).Rows.Count = 0 Then
            Dim _item As New ListItem("--No fields in this view--", "")
            ddl.Items.Add(_item)


        Else
            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _boundfld As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("SQLBoundFld"))
                Dim _boundtbl As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("SQLBoundTbl"))
                Dim _Caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("ColCaption"))
                Dim _FldAttr As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FldAttributes"))
                Dim _sourcecolid As Guid = GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("SourceColID"))
                Dim _show As Boolean = GlobalFunctions.FormatBoolean(_set.Tables(0).Rows(_counter).Item("Show"))
                Dim _ftype As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_set.Tables(0).Rows(_counter).Item("FldType"))

                Dim _add As Boolean = True
                If FilterDateOnly = True Then
                    If _ftype <> FIELDTYPES.FT_DATE And _ftype <> FIELDTYPES.FT_DATETIME And _ftype <> FIELDTYPES.FT_DBLABEL Then
                        _add = False
                    End If
                End If

                If FilterNumericalOnly = True Then
                    If _ftype <> FIELDTYPES.FT_CURRENCY And _ftype <> FIELDTYPES.FT_FLOAT And _ftype <> FIELDTYPES.FT_INT And _ftype <> FIELDTYPES.FT_DBLABEL Then
                        _add = False
                    End If
                End If

                If _show = False Then _add = False

                If _add = True Then
                    Dim _verbosefield As String = _Caption

                    Dim _listvalue2 As String
                    Dim _iscustomfield As Boolean
                    If _sourcecolid = Guid.Empty Then
                        'this is a custom field
                        _iscustomfield = True
                    Else
                        'This is a normal field
                        _iscustomfield = False
                    End If

                    If EmptyFieldArgs = True Then
                        _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, _boundfld, _Caption, _ftype, _iscustomfield, "")
                    Else
                        _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, _boundfld, _Caption, _ftype, _iscustomfield, _FldAttr)
                    End If

                    Dim _item As New ListItem(_verbosefield, _listvalue2)
                    ddl.Items.Add(_item)

                    If SplitByComponents = True Then
                        ' Select Case _ftype
                        '     Case FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME
                        '         'For year
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATEPART(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         Dim _item2 As New ListItem(_verbosefield & " (YEAR)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Quarter
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATENAME(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ") + ' Q' + DATENAME(qq," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ") * DATEPART(qq," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (QUARTER)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Month
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATENAME(mm," & FormatSQLField(_boundfld, _iscustomfield) & ") + ' ' + DATENAME(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(mm," & FormatSQLField(_boundfld, _iscustomfield) & ") + ' ' + DATEPART(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (MONTH)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Week
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATENAME(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ") + ' Week ' + CAST(DATEPART(ww," & FormatSQLField(_boundfld, _iscustomfield) & ") AS NVARCHAR(5))", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(yyyy," & FormatSQLField(_boundfld, _iscustomfield) & ") * DATEPART(ww," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (WEEK)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Day
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "CONVERT(NVARCHAR," & FormatSQLField(_boundfld, _iscustomfield) & ", 106)", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "CONVERT(NVARCHAR," & FormatSQLField(_boundfld, _iscustomfield) & ", 106)")
                        '         _item2 = New ListItem(_verbosefield & " (DAY)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        ' 
                        '         'Quarter of year
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "'Q' + CAST(DATEPART(qq," & FormatSQLField(_boundfld, _iscustomfield) & ") AS NVARCHAR(5))", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "'Q' + CAST(DATEPART(qq," & FormatSQLField(_boundfld, _iscustomfield) & ") AS NVARCHAR(5))")
                        '         _item2 = New ListItem(_verbosefield & " (QUARTER OF YEAR)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'For month
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATENAME(mm," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(mm," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (MONTH OF YEAR)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Week of year
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "'Week ' + CAST(DATEPART(ww," & FormatSQLField(_boundfld, _iscustomfield) & ") AS NVARCHAR(5))", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(ww," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (WEEK OF YEAR)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Day of year
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATEPART(dy," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(dy," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (DAY OF YEAR)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Day of month
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "'Day ' + CAST(DATEPART(dd," & FormatSQLField(_boundfld, _iscustomfield) & ") AS NVARCHAR(5))", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(dd," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (DAY OF MONTH)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         'Day of week
                        '         _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATENAME(dw," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(dw," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '         _item2 = New ListItem(_verbosefield & " (DAY OF WEEK)", _listvalue2)
                        '         ddl.Items.Add(_item2)
                        ' 
                        '         If _ftype = FIELDTYPES.FT_DATETIME Then
                        '             'Hour of day
                        '             _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATEPART(hh," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(hh," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '             _item2 = New ListItem(_verbosefield & " (HOUR OF DAY)", _listvalue2)
                        '             ddl.Items.Add(_item2)
                        ' 
                        '             'Minute of hour
                        '             _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "DATEPART(mi," & FormatSQLField(_boundfld, _iscustomfield) & ")", _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "DATEPART(mi," & FormatSQLField(_boundfld, _iscustomfield) & ")")
                        '             _item2 = New ListItem(_verbosefield & " (MINUTE OF HOUR)", _listvalue2)
                        '             ddl.Items.Add(_item2)
                        '         End If
                        ' End Select
                        Dim boundfldInSql As String = FormatSQLField(_boundfld, _iscustomfield)
                        Select Case _ftype
                            Case FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME
                                'For year
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartSql(boundfldInSql, "yyyy"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "yyyy"))
                                Dim _item2 As New ListItem(_verbosefield & " (YEAR)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Quarter
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartNameSql(boundfldInSql, "yyyy") & " " & GetStringConcatSql() & " ' Q' " & GetStringConcatSql() & " " & GetDatePartNameSql(boundfldInSql, "qq"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "yyyy") & " * " & GetDatePartSql(boundfldInSql, "qq"))
                                _item2 = New ListItem(_verbosefield & " (QUARTER)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Month
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartNameSql(boundfldInSql, "mm") & " " & GetStringConcatSql() & " ' ' " & GetStringConcatSql() & " " & GetDatePartNameSql(boundfldInSql, "yyyy"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "mm") & " " & GetStringConcatSql() & " ' ' " & GetStringConcatSql() & " " & GetDatePartSql(boundfldInSql, "yyyy"))
                                _item2 = New ListItem(_verbosefield & " (MONTH)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Week
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartNameSql(boundfldInSql, "yyyy") & " " & GetStringConcatSql() & " ' Week ' " & GetStringConcatSql() & " " & GetConvertToStringSql(GetDatePartSql(boundfldInSql, "ww"), 5), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "yyyy") & " * " & GetDatePartSql(boundfldInSql, "ww"))
                                _item2 = New ListItem(_verbosefield & " (WEEK)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Day
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDDMMMYYYYSQL(boundfldInSql), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDDMMMYYYYSQL(boundfldInSql))
                                _item2 = New ListItem(_verbosefield & " (DAY)", _listvalue2)
                                ddl.Items.Add(_item2)


                                'Quarter of year
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "'Q' " & GetStringConcatSql() & " " & GetConvertToStringSql(GetDatePartSql(boundfldInSql, "qq"), 5), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, "'Q' " & GetStringConcatSql() & " " & GetConvertToStringSql(GetDatePartSql(boundfldInSql, "qq"), 5))
                                _item2 = New ListItem(_verbosefield & " (QUARTER OF YEAR)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'For month
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartNameSql(boundfldInSql, "mm"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "mm"))
                                _item2 = New ListItem(_verbosefield & " (MONTH OF YEAR)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Week of year
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "'Week ' " & GetStringConcatSql() & " " & GetConvertToStringSql(GetDatePartSql(boundfldInSql, "ww"), 5), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "ww"))
                                _item2 = New ListItem(_verbosefield & " (WEEK OF YEAR)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Day of year
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartSql(boundfldInSql, "dy"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "dy"))
                                _item2 = New ListItem(_verbosefield & " (DAY OF YEAR)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Day of month
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, "'Day ' " & GetStringConcatSql() & " " & GetConvertToStringSql(GetDatePartSql(boundfldInSql, "dd"), 5), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "dd"))
                                _item2 = New ListItem(_verbosefield & " (DAY OF MONTH)", _listvalue2)
                                ddl.Items.Add(_item2)

                                'Day of week
                                _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartSql(boundfldInSql, "dw"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "dw"))
                                _item2 = New ListItem(_verbosefield & " (DAY OF WEEK)", _listvalue2)
                                ddl.Items.Add(_item2)

                                If _ftype = FIELDTYPES.FT_DATETIME Then
                                    'Hour of day
                                    _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartSql(boundfldInSql, "hh"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "hh"))
                                    _item2 = New ListItem(_verbosefield & " (HOUR OF DAY)", _listvalue2)
                                    ddl.Items.Add(_item2)

                                    'Minute of hour
                                    _listvalue2 = GlobalFunctions.CreateViewColumnSummary(_boundtbl, GetDatePartSql(boundfldInSql, "mi"), _Caption, FIELDTYPES.FT_SHORTTEXT, True, _FldAttr, GetDatePartSql(boundfldInSql, "mi"))
                                    _item2 = New ListItem(_verbosefield & " (MINUTE OF HOUR)", _listvalue2)
                                    ddl.Items.Add(_item2)
                                End If
                        End Select
                    End If
                End If
            Next

            If AddAdditionalMetaKeys = True Then
                Dim _li As New ListItem("[$Category]", "[$Category]")
                ddl.Items.Add(_li)
            End If

            If ddl.Items.Count = 0 Then
                If FilterDateOnly = True Then
                    Dim _item As New ListItem("--No date fields in this view--", "")
                    ddl.Items.Add(_item)
                ElseIf FilterNumericalOnly = True Then
                    Dim _item As New ListItem("--No numerical fields in this view--", "")
                    ddl.Items.Add(_item)
                End If
            End If



        End If



    End Sub

    Private Shared Function GetDDMMMYYYYSQL(boundfldInSql As String) As String
        Dim result As String = ""
        If Not OracleDBEnabled() Then
            result = "CONVERT(NVARCHAR," & boundfldInSql & ", 106)"
        Else
            result = "to_char(" & boundfldInSql & ", 'DD MON YYYY')"
        End If
        Return result
    End Function

    Private Shared Function GetDatePartSql(boundfldInSql As String, formatInSqlServer As String) As String
        Dim formatInOracle As String = ""
        Select Case formatInSqlServer
            Case "yyyy"
                formatInOracle = "YYYY"
            Case "mm"
                formatInOracle = "MM"
            Case "dd"
                formatInOracle = "DD"
            Case "dw"
                formatInOracle = "D"
            Case "ww"
                formatInOracle = "IW"
            Case "dy"
                formatInOracle = "DDD"
            Case "mi"
                formatInOracle = "MI"
            Case "hh"
                formatInOracle = "HH24"
            Case "qq"
                formatInOracle = "Q"
            Case Else
                logger.Error("not supported, boundfldInSql: " + boundfldInSql + ", formatInSqlServer: " + formatInSqlServer)
        End Select
        Dim result As String = ""
        If Not OracleDBEnabled() Then
            result = "DATEPART(" & formatInSqlServer & "," & boundfldInSql & ")"
        Else
            result = "to_char(" & boundfldInSql & ", '" & formatInOracle & "')"
        End If
        'logger.Debug("boundfldInSql: " + boundfldInSql + ", result: " + result)
        Return result
    End Function
    Private Shared Function GetDatePartNameSql(boundfldInSql As String, formatInSqlServer As String) As String
        Dim formatInOracle As String = ""
        Select Case formatInSqlServer
            Case "yyyy"
                formatInOracle = "YYYY"
            Case "mm"
                formatInOracle = "MONTH"
            Case "qq"
                formatInOracle = "Q"
            Case "dw"
                formatInOracle = "DAY"
            Case Else
                logger.Error("not supported, boundfldInSql: " + boundfldInSql + ", formatInSqlServer: " + formatInSqlServer)
        End Select
        Dim result As String = ""
        If Not OracleDBEnabled() Then
            result = "DATENAME(" & formatInSqlServer & "," & boundfldInSql & ")"
        Else
            result = "to_char(" & boundfldInSql & ", '" & formatInOracle & "')"
        End If
        'logger.Debug("boundfldInSql: " + boundfldInSql + ", result: " + result)
        Return result
    End Function
    Private Shared Function GetConvertToStringSql(sql As String, length As Integer) As String
        Dim result As String = sql
        If Not OracleDBEnabled() Then
            result = "CAST(" + sql + " AS NVARCHAR(" + length.ToString() + "))"
        Else
            result = "CAST(" + sql + " AS VARCHAR2(" + length.ToString() + "))"
        End If
        Return result
    End Function
    Private Shared Function GetStringConcatSql() As String
        If Not OracleDBEnabled() Then
            Return "+"
        Else
            Return "||"
        End If
    End Function

    Public Shared Sub LoadFormFieldsDDByGUID2(ByRef ddl As DropDownList, ByVal FormGUID As Guid, ByRef WebObj As ZukamiLib.WebSession, Optional ByVal FilterDateOnly As Boolean = False, Optional ByVal FilterNumericalOnly As Boolean = False, Optional ByVal SplitByComponents As Boolean = False, Optional ByVal AddNoRecordsRow As Boolean = True)
        Dim _set As DataSet = WebObj.FormItems_Get(FormGUID)
        ddl.Items.Clear()
        Dim _counter As Integer
        If _set.Tables(0).Rows.Count = 0 Then
            If AddNoRecordsRow = True Then
                Dim _item As New ListItem("--No fields in this form--", "")
                ddl.Items.Add(_item)
            End If

        Else
            If FilterDateOnly = False And FilterNumericalOnly = False Then
                Dim _item2 As New ListItem("ID", "ID")
                ddl.Items.Add(_item2)
            End If

            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _ftype As GlobalFunctions.FIELDTYPES = GlobalFunctions.FormatInteger(_set.Tables(0).Rows(_counter).Item("FieldType"))
                Dim _add As Boolean = True
                If FilterDateOnly = True Then
                    If _ftype <> FIELDTYPES.FT_DATE And _ftype <> FIELDTYPES.FT_DATETIME And _ftype <> FIELDTYPES.FT_DBLABEL Then
                        _add = False
                    End If
                End If

                If FilterNumericalOnly = True Then
                    If _ftype <> FIELDTYPES.FT_CURRENCY And _ftype <> FIELDTYPES.FT_FLOAT And _ftype <> FIELDTYPES.FT_INT And _ftype <> FIELDTYPES.FT_DBLABEL Then
                        _add = False
                    End If
                End If

                'If _ftype = FIELDTYPES.FT_LABEL Or _ftype = FIELDTYPES.FT_BUTTON Or _ftype = FIELDTYPES.FT_FRAME Or _ftype = FIELDTYPES.FT_HEADER Or _ftype = FIELDTYPES.FT_TABLE Then
                '    _add = False
                'End If

                If _add = True Then
                    Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldCaption"))
                    Dim _name As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldName"))
                    Dim _verbosefield As String = GlobalFunctions.GetVerboseFieldcaption(_name, _caption)

                    Dim _item As New ListItem(_verbosefield, GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldBindSource")))
                    ddl.Items.Add(_item)

                    If SplitByComponents = True Then
                        Select Case _ftype
                            Case FIELDTYPES.FT_DATE, FIELDTYPES.FT_DATETIME
                                Dim _item2 As New ListItem(_verbosefield & " (YEAR)", GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldBindSource")))
                                ddl.Items.Add(_item2)
                                _item2 = New ListItem(_verbosefield & " (MONTH)", GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldBindSource")))
                                ddl.Items.Add(_item2)
                                _item2 = New ListItem(_verbosefield & " (WEEK)", GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldBindSource")))
                                ddl.Items.Add(_item2)
                                _item2 = New ListItem(_verbosefield & " (DAY OF MONTH)", GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldBindSource")))
                                ddl.Items.Add(_item2)
                                _item2 = New ListItem(_verbosefield & " (DAY OF WEEK)", GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldBindSource")))
                                ddl.Items.Add(_item2)
                                If _ftype = FIELDTYPES.FT_DATETIME Then
                                    _item2 = New ListItem(_verbosefield & " (HOUR OF DAY)", GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldBindSource")))
                                    ddl.Items.Add(_item2)
                                End If
                        End Select
                    End If

                End If

            Next _counter

            If ddl.Items.Count = 0 Then
                If AddNoRecordsRow = True Then
                    If FilterDateOnly = True Then
                        Dim _item As New ListItem("--No date fields in this form--", "")
                        ddl.Items.Add(_item)
                    ElseIf FilterNumericalOnly = True Then
                        Dim _item As New ListItem("--No numerical fields in this form--", "")
                        ddl.Items.Add(_item)
                    End If
                End If


            End If
        End If

    End Sub

    Public Shared Sub LoadFormFieldsDDForLookup(ByRef ddl As DropDownList, ByVal FormName As String, ByRef WebObj As ZukamiLib.WebSession)
        Dim _set As DataSet = WebObj.FormItems_NonTextGetByFormName(FormName)
        ddl.Items.Clear()
        Dim _counter As Integer
        If _set.Tables(0).Rows.Count = 0 Then
            Dim _item As New ListItem("--No fields in this form--", "")
            ddl.Items.Add(_item)
        Else
            Dim _item2 As New ListItem("ID", "ID")
            ddl.Items.Add(_item2)

            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldCaption"))
                Dim _fname As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldName"))
                Dim _item As New ListItem(GlobalFunctions.GetVerboseFieldcaption(_fname, _caption), _fname)
                ddl.Items.Add(_item)
            Next _counter
        End If

    End Sub

    Public Shared Sub LoadFormFieldsDD_ByType(ByRef ddl As DropDownList, ByRef WebObj As ZukamiLib.WebSession, ByVal FieldType As GlobalFunctions.FIELDTYPES, ByRef ListID As Guid, Optional ByVal FieldToPrint As String = "")
        Dim _set As DataSet = WebObj.FormItems_GetByType(ListID, CInt(FieldType))
        ddl.Items.Clear()
        Dim _counter As Integer
        If _set.Tables(0).Rows.Count = 0 Then
            Dim _item As New ListItem("--No " & GetFieldTypeName(FieldType) & " fields in this form--", "")
            ddl.Items.Add(_item)
        Else
            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldCaption"))
                Dim _fname As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldName"))
                Dim _fid As String = ""
                Dim _vcaption As String = GlobalFunctions.GetVerboseFieldcaption(_fname, _caption)
                If Len(FieldToPrint) > 0 Then
                    _fid = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(FieldToPrint))
                Else
                    _fid = _fname
                End If
                Dim _item As New ListItem(_vcaption, _fid)
                ddl.Items.Add(_item)
            Next _counter
        End If

    End Sub

    Public Shared Sub LoadFormFieldsDD(ByRef ddl As DropDownList, ByVal FormName As String, ByRef WebObj As ZukamiLib.WebSession)
        Dim _set As DataSet = WebObj.FormItems_GetByFormName(FormName)
        ddl.Items.Clear()
        Dim _counter As Integer
        If _set.Tables(0).Rows.Count = 0 Then
            Dim _item As New ListItem("--No fields in this form--", "")
            ddl.Items.Add(_item)
        Else
            Dim _item2 As New ListItem("ID", "ID")
            ddl.Items.Add(_item2)

            For _counter = 0 To _set.Tables(0).Rows.Count - 1
                Dim _caption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldCaption"))
                Dim _fname As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("FieldName"))
                Dim _item As New ListItem(GlobalFunctions.GetVerboseFieldcaption(_fname, _caption), _fname)
                ddl.Items.Add(_item)
            Next _counter
        End If

    End Sub

    Public Shared Function GetFormResourceCaption(ByVal FormName As String, ByVal FormCaption As String) As String
        Dim _rescaption As String = ""
        _rescaption = FormCaption
        If Len(_rescaption) = 0 Then _rescaption = FormName
        Return _rescaption

    End Function

    Public Shared Sub LoadFormsDD(ByRef ddl As DropDownList, ByRef WebObj As ZukamiLib.WebSession, Optional ByVal AppID As String = "", Optional ByVal ValueFieldName As String = "ListID")
        Dim _set As DataSet = Nothing

        If Len(AppID) > 0 Then
            _set = WebObj.Forms_GetAllWithSubFormsByAppID(New Guid(AppID))
        Else
            _set = WebObj.Forms_GetAllWithSubForms()
        End If


        ddl.Items.Clear()
        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _formname As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Name"))
            Dim _formcaption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Caption"))
            Dim _formtext As String = _formname
            If Len(_formcaption) > 0 And StrComp(_formname, _formcaption, CompareMethod.Text) <> 0 Then
                _formtext += " (" & _formcaption & ")"
            End If

            Dim _item As New ListItem(_formtext, GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(ValueFieldName)))
            ddl.Items.Add(_item)
        Next _counter
    End Sub

    Public Shared Sub LoadViewsDD(ByRef ddl As DropDownList, ByRef WebObj As ZukamiLib.WebSession, Optional ByVal AppID As String = "", Optional ByVal ValueFieldName As String = "ListID")
        Dim _set As DataSet = Nothing

        If Len(AppID) > 0 Then
            _set = WebObj.Views_GetByTypeForApp(New Guid(AppID), 6)
        Else
            _set = WebObj.Views_GetAllByType(6)
        End If


        ddl.Items.Clear()
        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _formcaption As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Caption"))
            Dim _formtext As String = _formcaption

            Dim _item As New ListItem(_formtext, GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item(ValueFieldName)))
            ddl.Items.Add(_item)
        Next _counter

        If ddl.Items.Count = 0 Then
            Dim _item As New ListItem("--Sorry, no map views found--", "")
            ddl.Items.Add(_item)
        End If
    End Sub

    Public Shared Sub LoadViewsForTable(ByRef ddl As DropDownList, ByRef WebObj As ZukamiLib.WebSession, Optional ByVal AddCV As Boolean = False)
        Dim _set As DataSet = WebObj.Views_GetAll()
        ddl.Items.Clear()
        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim strName As String = ""
            strName = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Caption"))

            Dim _item As New ListItem(strName, GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("ID")))
            ddl.Items.Add(_item)
        Next _counter
        If AddCV = True Then
            Dim _item As New ListItem("Create new view", "")
            _item.Selected = True
            ddl.Items.Add(_item)

        End If
    End Sub

    Public Shared Sub LoadFormNamesDD(ByRef ddl As DropDownList, ByRef WebObj As ZukamiLib.WebSession)
        Dim _set As DataSet = WebObj.Forms_GetAllWithSubForms
        ddl.Items.Clear()
        Dim _counter As Integer
        For _counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim strName As String = ""
            If GlobalFunctions.GetGUID(_set.Tables(0).Rows(_counter).Item("ParentFormID")) = Guid.Empty Then
                strName = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Name"))
            Else
                strName = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Name")) & " (Subform)"
            End If

            Dim _item As New ListItem(strName, GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("Name")))
            ddl.Items.Add(_item)
        Next _counter
    End Sub

    Public Shared Function GetFieldType(ByVal TypeName As String) As Integer
        Select Case LCase(TypeName)
            Case "txt"
                Return 0
            Case "lbl"
                Return 21
            Case "dbl"
                Return 33
            Case "chk"
                Return 6
            Case "usr"
                Return 8
            Case "fil"
                Return 5
            Case "fml"
                Return 25
            Case "img"
                Return 26
            Case "aid"
                Return 27
            Case "ddn"
                Return 9
            Case "mlt"
                Return 1
            Case "nbr"
                Return 2
            Case "rad"
                Return 22
            Case "dtt"
                Return 4
            Case "cty"
                Return 23
            Case "mny"
                Return 15
            Case "btn"
                Return 24
            Case "frm"
                Return 29
            Case "tbl"
                Return 20
            Case "hdr"
                Return 28
            Case "tif"
                Return 30
            Case "hdn"
                Return 31
            Case "clt"
                Return 32
            Case "flt"
                Return 3
            Case "htm"
                Return 34
            Case "sgn"
                Return 35
            Case "cam"
                Return 36
            Case "bcd"
                Return 38
            Case "gps"
                Return 40
            Case "rat"
                Return 50
        End Select
        Return 0
    End Function

    Public Shared Function GetFieldTypeTag(ByVal Type As Integer) As String
        Select Case Type
            Case 0
                Return "TXT"
            Case 1
                Return "MLT"
            Case 2
                Return "NBR"
            Case 3
                Return "FLT"
            Case 4
                Return "DTT"
            Case 5
                Return "FIL"
            Case 6
                Return "CHK"
            Case 9
                Return "DDN"
            Case 10
                Return "DTT"
            Case 15
                Return "MNY"
            Case 20
                Return "TBL"
            Case 21
                Return "LBL"
            Case 22
                Return "RAD"
            Case 23
                Return "CTY"
            Case 8
                Return "USR"
            Case 24
                Return "BTN"
            Case 25
                Return "FML"
            Case 26
                Return "IMG"
            Case 27
                Return "AID"
            Case 28
                Return "HDR"
            Case 29
                Return "FRM"
            Case 30
                Return "TIF"
            Case 31
                Return "HDN"
            Case 32
                Return "CLT"
            Case 33
                Return "DBL"
            Case 34
                Return "HTM"
            Case 35
                Return "SGN"
            Case 36
                Return "CAM"
            Case 38
                Return "BCD"
            Case 40
                Return "GPS"
            Case 50
                Return "RAT"
            Case Else
                Return "TXT"
        End Select
    End Function

    Public Shared Function GetNodeTypeName(ByVal NodeType As String) As String
        Select Case NodeType
            Case ZukamiLib.BaseNode.SENDTO_NODETAG
                Return "Send for Approval Bubble"
            Case ZukamiLib.BaseNode.RUNCODE_NODETAG
                Return "Run custom code Bubble"
            Case ZukamiLib.BaseNode.SENDEMAIL_NODETAG
                Return "Send e-mail Bubble"
            Case ZukamiLib.BaseNode.SAVETOFILE_NODETAG
                Return "Save attached files Bubble"
            Case Else
                Return "Unknown Bubble"
        End Select
    End Function

    Public Shared Function GetWorkflowErrorName(ByVal ErrorNo As ZukamiLib.WebSession.DEBUGMESSAGES_TYPE) As String
        Select Case ErrorNo
            Case ZukamiLib.WebSession.DEBUGMESSAGES_TYPE.MSG_CODERUNTIMEERROR
                Return "Code Runtime Error"
            Case ZukamiLib.WebSession.DEBUGMESSAGES_TYPE.MSG_CODESYNTAXERROR
                Return "Code Syntax Error"
            Case ZukamiLib.WebSession.DEBUGMESSAGES_TYPE.MSG_GENERAL
                Return "General Error"
            Case ZukamiLib.WebSession.DEBUGMESSAGES_TYPE.MSG_LOGICERROR
                Return "Logic Error"
            Case Else
                Return "Unknown Error"
        End Select
    End Function

    Public Shared Function GetFieldTypeName(ByVal Type As FIELDTYPES) As String
        Select Case Type
            Case FIELDTYPES.FT_AUTONUMBER
                Return "Autonumber"
            Case FIELDTYPES.FT_DATE
                Return "Date"
            Case FIELDTYPES.FT_DATETIME
                Return "Date/Time"
            Case FIELDTYPES.FT_DROPDOWN
                Return "Dropdown list"
            Case FIELDTYPES.FT_FILE
                Return "File"
            Case FIELDTYPES.FT_FILESIZE
                Return "File Size"
            Case FIELDTYPES.FT_FLOAT
                Return "Decimal"
            Case FIELDTYPES.FT_INT
                Return "Integer"
            Case FIELDTYPES.FT_LONGTEXT
                Return "Long Text"
            Case FIELDTYPES.FT_SHORTTEXT
                Return "Short Text"
            Case FIELDTYPES.FT_BARCODE
                Return "Barcode"
            Case FIELDTYPES.FT_RATING
                Return "Rating"
            Case FIELDTYPES.FT_GPS
                Return "GPS"
            Case FIELDTYPES.FT_SUBMISSIONNO
                Return "Workflow Submission Number"
            Case FIELDTYPES.FT_TIMEINMINUTES
                Return "Time (in minutes)"
            Case FIELDTYPES.FT_USER
                Return "User"
            Case FIELDTYPES.FT_VERSIONNO
                Return "Version Number"
            Case FIELDTYPES.FT_YESNO
                Return "Yes/No"
            Case FIELDTYPES.FT_CURRENCY
                Return "Currency"
            Case FIELDTYPES.FT_TABLE
                Return "Table"
            Case FIELDTYPES.FT_LABEL
                Return "Label"
            Case FIELDTYPES.FT_DBLABEL
                Return "Databound Label"
            Case FIELDTYPES.FT_RADIO
                Return "Radiobutton"
            Case FIELDTYPES.FT_COUNTRY
                Return "Country"
            Case FIELDTYPES.FT_BUTTON
                Return "Button"
            Case FIELDTYPES.FT_CALFIELD
                Return "Calculated Field"
            Case FIELDTYPES.FT_IMAGE
                Return "Image"
            Case FIELDTYPES.FT_AUTOID
                Return "Auto ID"
            Case FIELDTYPES.FT_FRAME
                Return "Frame"
            Case FIELDTYPES.FT_HEADER
                Return "Section header"
            Case FIELDTYPES.FT_HTML
                Return "HTML Input"
            Case FIELDTYPES.FT_TIFFVIEWER
                Return "Tiff viewer"
            Case FIELDTYPES.FT_SIGNATURE
                Return "Signature"
            Case FIELDTYPES.FT_CAMERA
                Return "Camera"
            Case FIELDTYPES.FT_HIDDENFIELD
                Return "Hidden field"
            Case FIELDTYPES.FT_CHECKLIST
                Return "Check List"
            Case Else
                Return "Unknown type"
        End Select
    End Function

    Public Shared Function GetFieldTypeHTMLTag(ByVal Type As FIELDTYPES) As String
        Select Case Type
            Case FIELDTYPES.FT_AUTONUMBER
                Return "<img src='images/field_autogenerated.gif' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Autonumber</span>"
            Case FIELDTYPES.FT_DATE
                Return "<img src='images/field_datetime.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Date</span>"
            Case FIELDTYPES.FT_DATETIME
                Return "<img src='images/field_datetime.gif' border='0' style='vertical-align:middle'></img>&nbsp;<span style='vertical-align:middle'>Date/Time</span>"
            Case FIELDTYPES.FT_DROPDOWN
                Return "<img src='images/field_dropdown.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Dropdown List</span>"
            Case FIELDTYPES.FT_FILE
                Return "<img src='images/field_file.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>File</span>"
            Case FIELDTYPES.FT_FILESIZE
                Return "<img src='images/field_file.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>File Size</span>"
            Case FIELDTYPES.FT_FLOAT
                Return "<img src='images/decimal_numberbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Decimal</span>"
            Case FIELDTYPES.FT_INT
                Return "<img src='images/field_numberbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Number</span>"
            Case FIELDTYPES.FT_LONGTEXT
                Return "<img src='images/field_multitextbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Long Text</span>"
            Case FIELDTYPES.FT_SHORTTEXT
                Return "<img src='images/field_textbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Short Text</span>"
            Case FIELDTYPES.FT_BARCODE
                Return "<img src='images/field_barcode.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Barcode</span>"
            Case FIELDTYPES.FT_RATING
                Return "<img src='images/field_rating.png' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Rating</span>"
            Case FIELDTYPES.FT_GPS
                Return "<img src='images/field_gps.png' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>GPS</span>"
            Case FIELDTYPES.FT_SUBMISSIONNO
                Return "Workflow Submission Number"
            Case FIELDTYPES.FT_TIMEINMINUTES
                Return "Time (in minutes)"
            Case FIELDTYPES.FT_USER
                Return "<img src='images/field_user.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>User</span>"
            Case FIELDTYPES.FT_VERSIONNO
                Return "Version Number"
            Case FIELDTYPES.FT_YESNO
                Return "<img src='images/icoYesNo.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Yes/No</span>"
            Case FIELDTYPES.FT_CURRENCY
                Return "<img src='images/field_money.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Currency</span>"
            Case FIELDTYPES.FT_TABLE
                Return "<img src='images/field_tables.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Table</span>"
            Case FIELDTYPES.FT_LABEL
                Return "<img src='images/field_label.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Label</span>"
            Case FIELDTYPES.FT_DBLABEL
                Return "<img src='images/icoAlphaDB.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Data-bound Label</span>"
            Case FIELDTYPES.FT_RADIO
                Return "<img src='images/field_radiobutton.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Radiobutton</span>"
            Case FIELDTYPES.FT_COUNTRY
                Return "<img src='images/field_country.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Country</span>"
            Case FIELDTYPES.FT_BUTTON
                Return "Button"
            Case FIELDTYPES.FT_CALFIELD
                Return "Calculated Field"
            Case FIELDTYPES.FT_IMAGE
                Return "<img src='images/field_image.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Image</span>"
            Case FIELDTYPES.FT_AUTOID
                Return "<img src='images/field_autogenerated.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Auto ID</span>"
            Case FIELDTYPES.FT_FRAME
                Return "Frame"
            Case FIELDTYPES.FT_HEADER
                Return "<img src='images/header.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Section Header</span>"
            Case FIELDTYPES.FT_HTML
                Return "<img src='images/field_html.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>HTML Input</span>"
            Case FIELDTYPES.FT_TIFFVIEWER
                Return "<img src='images/field_image.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>TIFF Viewer</span>"
            Case FIELDTYPES.FT_CAMERA
                Return "<img src='images/field_camera.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Camera</span>"
            Case FIELDTYPES.FT_SIGNATURE
                Return "<img src='images/field_signature.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Signature</span>"
            Case FIELDTYPES.FT_HIDDENFIELD
                Return "<img src='images/icoHiddenField.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Hidden field</span>"
            Case FIELDTYPES.FT_CHECKLIST
                Return "<img src='images/field_checkbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<span style='vertical-align:middle'>Check List</span>"
            Case Else
                Return "Unknown type"
        End Select
    End Function

    'Public Shared Function GetFieldTypeHTMLTag(ByVal Type As FIELDTYPES) As String
    '    Select Case Type
    '        Case FIELDTYPES.FT_AUTONUMBER
    '            Return "<img src='images/field_autogenerated.gif' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Autonumber</span></b>"
    '        Case FIELDTYPES.FT_DATE
    '            Return "<img src='images/field_datetime.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Date</span></b>"
    '        Case FIELDTYPES.FT_DATETIME
    '            Return "<img src='images/field_datetime.gif' border='0' style='vertical-align:middle'></img>&nbsp;<b><span style='vertical-align:middle'>Date/Time</span></b>"
    '        Case FIELDTYPES.FT_DROPDOWN
    '            Return "<img src='images/field_dropdown.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Dropdown List</span></b>"
    '        Case FIELDTYPES.FT_FILE
    '            Return "<img src='images/field_file.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>File</span></b>"
    '        Case FIELDTYPES.FT_FILESIZE
    '            Return "<img src='images/field_file.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>File Size</span></b>"
    '        Case FIELDTYPES.FT_FLOAT
    '            Return "<img src='images/field_numberbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Float</span></b>"
    '        Case FIELDTYPES.FT_INT
    '            Return "<img src='images/field_numberbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Number</span></b>"
    '        Case FIELDTYPES.FT_LONGTEXT
    '            Return "<img src='images/field_multitextbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Long Text</span></b>"
    '        Case FIELDTYPES.FT_SHORTTEXT
    '            Return "<img src='images/field_textbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Short Text</span></b>"
    '        Case FIELDTYPES.FT_SUBMISSIONNO
    '            Return "Workflow Submission Number"
    '        Case FIELDTYPES.FT_TIMEINMINUTES
    '            Return "Time (in minutes)"
    '        Case FIELDTYPES.FT_USER
    '            Return "<img src='images/field_user.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>User</span></b>"
    '        Case FIELDTYPES.FT_VERSIONNO
    '            Return "Version Number"
    '        Case FIELDTYPES.FT_YESNO
    '            Return "<img src='images/icoYesNo.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Yes/No</span></b>"
    '        Case FIELDTYPES.FT_CURRENCY
    '            Return "<img src='images/field_money.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Currency</span></b>"
    '        Case FIELDTYPES.FT_TABLE
    '            Return "<img src='images/field_tables.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Table</span></b>"
    '        Case FIELDTYPES.FT_LABEL
    '            Return "<img src='images/field_label.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Label</span></b>"
    '        Case FIELDTYPES.FT_DBLABEL
    '            Return "<img src='images/icoAlphaDB.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Data-bound Label</span></b>"
    '        Case FIELDTYPES.FT_RADIO
    '            Return "<img src='images/field_radiobutton.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Radiobutton</span></b>"
    '        Case FIELDTYPES.FT_COUNTRY
    '            Return "<img src='images/field_country.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Country</span></b>"
    '        Case FIELDTYPES.FT_BUTTON
    '            Return "Button"
    '        Case FIELDTYPES.FT_CALFIELD
    '            Return "Calculated Field"
    '        Case FIELDTYPES.FT_IMAGE
    '            Return "<img src='images/field_image.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Image</span></b>"
    '        Case FIELDTYPES.FT_AUTOID
    '            Return "<img src='images/field_autogenerated.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Auto ID</span></b>"
    '        Case FIELDTYPES.FT_FRAME
    '            Return "Frame"
    '        Case FIELDTYPES.FT_HEADER
    '            Return "<img src='images/header.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Section Header</span></b>"
    '        Case FIELDTYPES.FT_TIFFVIEWER
    '            Return "<img src='images/field_image.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>TIFF Viewer</span></b>"
    '        Case FIELDTYPES.FT_HIDDENFIELD
    '            Return "<img src='images/icoHiddenField.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Hidden field</span></b>"
    '        Case FIELDTYPES.FT_CHECKLIST
    '            Return "<img src='images/field_checkbox.gif' border='0' style='vertical-align:middle' border='0'></img>&nbsp;<b><span style='vertical-align:middle'>Check List</span></b>"
    '        Case Else
    '            Return "Unknown type"
    '    End Select
    'End Function

    Public Shared Function XMLToButtonsCollection(ByVal XMLString As String) As Collection
        Dim _xmlColl As New Collection
        If Len(XMLString) = 0 Then Return _xmlColl

        Try
            Dim _xml As New XmlDocument
            _xml.LoadXml(XMLString)
            Dim _xmlRoot As XmlElement = _xml.ChildNodes(1)
            Dim _counter As Integer

            For _counter = 0 To _xmlRoot.ChildNodes.Count - 1
                Dim _xmlButton As XmlElement = _xmlRoot.ChildNodes.Item(_counter)
                Dim _bprop As New ButtonProperties
                _bprop.Name = _xmlButton.GetAttribute("Name")
                _bprop.Caption = _xmlButton.GetAttribute("Caption")
                _bprop.CSSClass = _xmlButton.GetAttribute("CSSClass")
                _bprop.Hidden = _xmlButton.GetAttribute("Hidden")
                _bprop.CustomButton = _xmlButton.GetAttribute("CustomButton")
                _bprop.JavascriptAttr = _xmlButton.InnerText

                If _xmlColl.Contains(_bprop.Name) = False Then
                    _xmlColl.Add(_bprop, _bprop.Name)
                End If
            Next _counter
            Return _xmlColl
        Catch ex As Exception
            Return _xmlColl
        End Try
    End Function

    Public Shared Function GetDefaultButtonJScript(ByVal ButtonID As String) As String
        'Edited by senthil (Ref002)when click Customize button approve,reject, and added mor customize button not working
        Dim _eventtarget As String = "ctl00_UpdatePanel1$DefaultButtonClick"
        Dim strcusbtn As String = WebconfigSettings.strcustombtn
        If strcusbtn <> "" Then
            strcusbtn = strcusbtn.Substring(1)
        End If
        WebconfigSettings.strCustomizebtn = ""
        WebconfigSettings.strCustomizebtnname = ""
        Select Case LCase(ButtonID)
            Case "save"
                Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormSave');$('html, body').scrollTop(0);return false;"
            'Case "saveapprove"
            '    Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormSaveApprove');$('html, body').scrollTop(0);return false;"
            'Case "savereject"
            '    Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormSaveReject');$('html, body').scrollTop(0);return false;"
            Case "submit"
                Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormSubmit');$('html, body').scrollTop(0);return false;"
            Case "cancel"
                Return "__doPostBack('" + _eventtarget + "','FormSubmitCancel');$('html, body').scrollTop(0);return false;"
            Case "checkprevious"
                Return "__doPostBack('" + _eventtarget + "','CheckPrevious');$('html, body').scrollTop(0);return false;"
            Case "confirm"
                Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormSubmitConfirm');$('html, body').scrollTop(0);return false;"
            Case "returntoview"
                Return "__doPostBack('" + _eventtarget + "','FormCancel');$('html, body').scrollTop(0);return false;"
            Case "edit"
                Return "__doPostBack('" + _eventtarget + "','FormEdit');$('html, body').scrollTop(0);return false;"
            Case "changehistory"
                Return "__doPostBack('" + _eventtarget + "','ChangeHistory');$('html, body').scrollTop(0);return false;"
            Case "discardchanges"
                Return "__doPostBack('" + _eventtarget + "','DiscardChanges');$('html, body').scrollTop(0);return false;"
            Case "cancelsave"
                Return "__doPostBack('" + _eventtarget + "','CancelSave');$('html, body').scrollTop(0);return false;"
            Case "resubmit"
                Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormResubmit');$('html, body').scrollTop(0);return false;"
            Case Else
                If ButtonID.Contains("butt_custom_0") Then
                    WebconfigSettings.strCustomizebtn = "CustomizeApproveButton"
                    Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormSaveApprove');$('html, body').scrollTop(0);return false;"
                ElseIf ButtonID.Contains("butt_custom_1") Then
                    WebconfigSettings.strCustomizebtn = "CustomizeRejectButton"
                    Return "this.disabled=true;__doPostBack('" + _eventtarget + "','FormSaveReject');$('html, body').scrollTop(0);return false;"
                Else
                    'Edited by senthil (Ref002)when click Customize button approve,reject, and added mor customize button not working
                    If ButtonID.Contains("butt_custom_") Then
                        Dim strpl As String() = ButtonID.Split("_")
                        If strcusbtn.Contains("@") Then
                            Dim strpa As String() = strcusbtn.Split("@")
                            For i = 0 To strpa.Length - 1
                                If strpl(2) = strpa(i) Then
                                    WebconfigSettings.strCustomizebtnname = strpa(i)
                                    WebconfigSettings.strCustomizebtn = "CustomizeButton"
                                    Return "_this.disabled=true;__doPostBack('" + _eventtarget + "','FormCustomize');$('html, body').scrollTop(0);return false;"
                                End If
                            Next
                        Else
                            If strpl(2) = strcusbtn Then
                                WebconfigSettings.strCustomizebtnname = strcusbtn
                                WebconfigSettings.strCustomizebtn = "CustomizeButton"
                                Return "_this.disabled=true;__doPostBack('" + _eventtarget + "','FormCustomize');$('html, body').scrollTop(0);return false;"
                            End If
                        End If


                    End If
                End If

                Return ""
        End Select
    End Function

    Public Shared Function ButtonsCollectionToXML(ByRef ButtonColl As Collection) As String
        Dim _xml As New XmlDocument
        Dim _xmlroot As XmlElement = _xml.CreateElement("Root")
        _xml.AppendChild(_xmlroot)

        For _counter = 1 To ButtonColl.Count
            Dim _buttonProp As ButtonProperties = ButtonColl.Item(_counter)
            Dim _xmlButton As XmlElement = _xml.CreateElement("Button")
            _xmlButton.SetAttribute("Name", _buttonProp.Name)
            _xmlButton.SetAttribute("Caption", _buttonProp.Caption)
            _xmlButton.SetAttribute("CSSClass", _buttonProp.CSSClass)
            _xmlButton.SetAttribute("Hidden", _buttonProp.Hidden)
            _xmlButton.SetAttribute("CustomButton", _buttonProp.CustomButton)
            _xmlButton.InnerText = _buttonProp.JavascriptAttr
            _xmlroot.AppendChild(_xmlButton)
        Next _counter

        Dim _sb As New StringBuilder
        Dim _stringwriter As New System.IO.StringWriter(_sb)
        _xml.Save(_stringwriter)
        Return _sb.ToString()
    End Function

    Public Shared Sub DressControl(ByRef control As Object)
        If TypeOf control Is TextBox Then
            If StrComp(CType(control, TextBox).CssClass, "formtextbox_normal", CompareMethod.Text) = 0 Then
                control.Attributes.Add("onfocus", "this.className = 'formtextbox_focus';")
                control.Attributes.Add("onblur", "this.className = 'formtextbox_normal';")
            ElseIf StrComp(CType(control, TextBox).CssClass, "textbox_normal", CompareMethod.Text) = 0 Then
                control.Attributes.Add("onfocus", "this.className = 'textbox_focus';")
                control.Attributes.Add("onblur", "this.className = 'textbox_normal';")
            ElseIf StrComp(CType(control, TextBox).CssClass, "formnumbox_normal", CompareMethod.Text) = 0 Then
                control.Attributes.Add("onfocus", "this.className = 'formnumbox_focus';")
                control.Attributes.Add("onblur", "this.className = 'formnumbox_normal';")
            ElseIf StrComp(CType(control, TextBox).CssClass, "formmultitextbox_normal", CompareMethod.Text) = 0 Then
                control.Attributes.Add("onfocus", "this.className = 'formmultitextbox_focus';")
                control.Attributes.Add("onblur", "this.className = 'formmultitextbox_normal';")
            ElseIf StrComp(CType(control, TextBox).CssClass, "formcurrencybox_normal", CompareMethod.Text) = 0 Then
                control.Attributes.Add("onfocus", "this.className = 'formcurrencybox_focus';")
                control.Attributes.Add("onblur", "this.className = 'formcurrencybox_normal';")
            ElseIf Len(CType(control, TextBox).CssClass) = 0 Then
                control.Attributes.Add("onfocus", "this.className = 'textbox_focus';")
                control.Attributes.Add("onblur", "this.className = 'textbox_normal';")
            End If
        ElseIf TypeOf control Is DropDownList Then
            control.Attributes.Add("onfocus", "this.className = 'dropdown_focus';")
            control.Attributes.Add("onblur", "this.className = 'dropdown_normal';")
        ElseIf TypeOf control Is RadioButton Then
            control.Attributes.Add("onfocus", "this.className = 'radiobutton_focus';")
            control.Attributes.Add("onblur", "this.className = 'radiobutton_normal';")
        ElseIf InStr(1, TypeName(control), "usercontrols_filectrl_ascx", CompareMethod.Text) > 0 Then
            CType(control, Object).dresscontrol()
        ElseIf InStr(1, TypeName(control), "usercontrols_zdtpicker_ascx", CompareMethod.Text) > 0 OrElse
            InStr(1, TypeName(control), "usercontrols_zdtpickermobile_ascx", CompareMethod.Text) > 0 Then
            CType(control, Object).dresscontrol()
        End If
    End Sub

    Public Shared Sub DressControl2(ByRef control As Object, ByRef Field As ZField, ByVal NormalClass As String, ByVal OnFocusClass As String)
        Dim _css As String = NormalClass
        Dim _focuscss As String = OnFocusClass

        If Len(Field.CSS) > 0 Then _css = Field.CSS
        If Len(Field.FocusCSS) > 0 Then _focuscss = Field.FocusCSS

        'control.Attributes.Add("onfocus", "this.className = '" + _focuscss + "';")
        'control.Attributes.Add("onblur", "this.className = '" + _css + "';")
        control.Attributes.Add("onfocus", "this.className = util.replaceCssClass(this.className, '" + _focuscss + "', '" + _css + "');")
        control.Attributes.Add("onblur", "this.className = util.replaceCssClass(this.className, '" + _css + "', '" + _focuscss + "');")
    End Sub

    Public Shared Function LoginAnonymous(ByVal AppID As Guid) As Boolean
        Dim _settings As ZukamiLib.ZukamiSettings = CreateDefaultZukamiSettings()
        Dim _web As New ZukamiLib.WebSession(_settings)
        _web.OpenConnection()

        Dim _Dataset As DataSet = _web.LoginZukamiAnonymous()
        If _Dataset.Tables(0).Rows.Count > 0 Then
            _settings.FramelessMode = False
            _settings.CurrentFullName = GlobalFunctions.FormatData(_Dataset.Tables(0).Rows(0).Item("Fullname"))
            _settings.CurrentUserGUID = GlobalFunctions.GetGUID(_Dataset.Tables(0).Rows(0).Item("UserID"))
            _settings.Culture = GlobalFunctions.FormatData(_Dataset.Tables(0).Rows(0).Item("Locality"))
            _settings.UICulture = GlobalFunctions.FormatData(_Dataset.Tables(0).Rows(0).Item("Language"))
            GlobalFunctions.CalculatePermissions(_web, _settings.CurrentUserGUID, _settings)

            _settings.PreviewMode = False
            Dim _cookie As HttpCookie = GlobalFunctions.ZukamiLogin(_Dataset.Tables(0).Rows(0).Item("Username"), _settings.Solidify, False)
            'System.Web.HttpContext.Current.Response.Cookies.Add(_cookie)
            GlobalFunctions.IssueFormsAuthenticationCookieAndSetSessionId(_cookie)

            Dim _AppIdentifierCookie As New HttpCookie("CurrentApp", AppID.ToString)
            System.Web.HttpContext.Current.Response.Cookies.Add(_AppIdentifierCookie)

            LoginAnonymous = True
        Else
            LoginAnonymous = False
        End If
        _web.CloseConnection()
        _web = Nothing
    End Function

    Public Shared Function ZukamiLogin(ByVal LoginID As String, ByVal CustomData As String, Optional ByVal RememberMe As Boolean = True) As HttpCookie
        logger.Debug("start")
        Dim tkt As FormsAuthenticationTicket
        Dim cookiestr As String
        Dim ck As HttpCookie
        Dim expiryDate As DateTime

        'If RememberMe = True Then
        '    expiryDate = DateTime.Now.AddDays(10)
        'Else
        expiryDate = DateTime.Now.AddMinutes(InactivityTimeout)
        'End If

        tkt = New FormsAuthenticationTicket(1, LoginID, DateTime.Now(), expiryDate, False, CustomData)
        cookiestr = FormsAuthentication.Encrypt(tkt)
        ck = New HttpCookie(FormsAuthentication.FormsCookieName(), cookiestr)

        'If RememberMe = True Then
        '    ck.Expires = expiryDate
        'End If
        ck.Path = FormsAuthentication.FormsCookiePath()

        logger.Debug("cookie generated (path: " + ck.Path + "), " + ck.Name + ": " + Left(Newtonsoft.Json.JsonConvert.SerializeObject(tkt), 174) + "...")

        If FormatBoolean(FromConfig("FormsAuthenticationCookie_HttpOnly", "false")) Then
            ck.HttpOnly = True
        End If

        If FormatBoolean(FromConfig("FormsAuthenticationCookie_Secure", "false")) Then
            ck.Secure = True
        End If

        Return ck

    End Function

    Public Shared Sub SwitchToMainLogin()
        Try
            If GlobalFunctions.ISSPRING = True Then
                FormsAuthentication.SignOut()
                'logout any way fisrt. Modifed by Michael Zhan

                Dim _cookie As HttpCookie = Nothing

                _cookie = GetCookieByName("Maincookie")


                If _cookie Is Nothing = False Then


                    Dim _fticket As FormsAuthenticationTicket = FormsAuthentication.Decrypt(_cookie.Value)
                    'System.Web.HttpContext.Current.Response.Cookies.Add(ZukamiLogin(_fticket.Name, _fticket.UserData, True))
                    Dim _cookie2 As HttpCookie = ZukamiLogin(_fticket.Name, _fticket.UserData, True)
                    GlobalFunctions.IssueFormsAuthenticationCookieAndSetSessionId(_cookie2)
                    System.Web.HttpContext.Current.Response.Cookies.Remove("Maincookie")
                    'DeleteCookie("Maincookie")
                End If
            Else
                Dim _cookie As HttpCookie = Nothing

                _cookie = GetCookieByName("Maincookie")

                If _cookie Is Nothing = False Then

                    FormsAuthentication.SignOut()
                    Dim _fticket As FormsAuthenticationTicket = FormsAuthentication.Decrypt(_cookie.Value)
                    'System.Web.HttpContext.Current.Response.Cookies.Add(ZukamiLogin(_fticket.Name, _fticket.UserData, True))
                    Dim _cookie2 As HttpCookie = ZukamiLogin(_fticket.Name, _fticket.UserData, True)
                    GlobalFunctions.IssueFormsAuthenticationCookieAndSetSessionId(_cookie2)
                    System.Web.HttpContext.Current.Response.Cookies.Remove("Maincookie")
                End If
            End If
        Catch ex As Exception

        End Try

    End Sub

    Public Shared Function GetCookieByName(ByVal CookieName As String) As HttpCookie
        For _counter = 0 To System.Web.HttpContext.Current.Request.Cookies.Count - 1
            If StrComp(System.Web.HttpContext.Current.Request.Cookies.Item(_counter).Name, CookieName, CompareMethod.Text) = 0 Then
                Return System.Web.HttpContext.Current.Request.Cookies.Item(_counter)
            End If
        Next _counter
        Return Nothing
    End Function

    Public Shared Sub SwitchToLogin(ByVal LoginID As String, ByVal CustomData As String, Optional ByVal RememberMe As Boolean = True)

        'Create maincookie if it doesnt yet exist
        '=========================================
        'remove cookie by name
        System.Web.HttpContext.Current.Request.Cookies.Remove("Maincookie")

        Dim _cookie As HttpCookie = GetCookieByName("Maincookie")
        If _cookie Is Nothing Then
            _cookie = GetCookieByName(FormsAuthentication.FormsCookieName())
            If _cookie IsNot Nothing Then
                Dim _fticket As FormsAuthenticationTicket = FormsAuthentication.Decrypt(_cookie.Value)

                'Freeze the main cookie, and create another cookie for storage (which will only last the lifetime of browser)
                Dim _storecookie As HttpCookie = ZukamiLogin(_fticket.Name, _fticket.UserData, False)
                _storecookie.Name = "Maincookie"
                System.Web.HttpContext.Current.Response.Cookies.Add(_storecookie)
            Else
                logger.Debug("failed to get ZukamiLogin cookie, thus not able to create Maincookie")
            End If
        End If



        'Okay we have stored the main cookie, now we switch to the new cookie======================
        'System.Web.HttpContext.Current.Response.Cookies.Add(ZukamiLogin(LoginID, CustomData, RememberMe))
        Dim _cookie2 As HttpCookie = ZukamiLogin(LoginID, CustomData, RememberMe)
        GlobalFunctions.IssueFormsAuthenticationCookieAndSetSessionId(_cookie2)
    End Sub

    Public Shared Function IsLogoutAlready() As Boolean
        Dim logoutAlready As Boolean = False
        If GetZukamiSettings() Is Nothing Then
            logoutAlready = True
        End If
        logger.Debug("logoutAlready: " + logoutAlready.ToString())
        Return logoutAlready
    End Function
    Public Shared Sub ZukamiLogout()
        logger.Debug("start")
        Try
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            If Not GlobalFunctions.FormatBoolean(GlobalFunctions.FromConfig("AllowMultipleLogin", "true")) Then
                Dim ticket As LoginTicket = New LoginTicket(LoginTicket.GetLoginTicketRowFromDB(_settings.CurrentUserGUID))
                ticket.ClearUpLoginTicket(HttpContext.Current)
            End If
            If Not GlobalFunctions.FormatBoolean(GlobalFunctions.FromConfig("Allow2ndUserLoginWithoutLogoutInSameBrowser", "true")) Then
                RemoveCookie("CurrentLoggedInUser")
            End If
            'System.Web.HttpContext.Current.Response.Cookies.Remove("Maincookie")
            RemoveCookie("Maincookie")
            RemoveCookie(FormsAuthentication.FormsCookieName())
            RemoveCookie(SessionStateCookieName())
            HttpContext.Current.Session.Clear()
            RemovedSessionIdFromDB(_settings.CurrentUserGUID.ToString(), _settings.SessionId)
            'FormsAuthentication.SignOut()
            ClearupSessionIdFromDB()
        Catch ex As Exception
            logger.Error(ex)
        End Try
    End Sub

    Private Shared Function SessionStateCookieName() As String
        Dim sessionStateSection As System.Web.Configuration.SessionStateSection = CType(ConfigurationManager.GetSection("system.web/sessionState"), System.Web.Configuration.SessionStateSection)
        Return sessionStateSection.CookieName
    End Function

    Public Shared Function OneWayHashWithHardCodedSalt(value As String) As String
        Dim salt As String = "41307313-3231-4BEE-AACF-CAE8C03E92A2"

        Dim md5Hasher As System.Security.Cryptography.MD5 = System.Security.Cryptography.MD5.Create()

        ' Convert the input string to a byte array and compute the hash.
        Dim data As Byte() = md5Hasher.ComputeHash(System.Text.Encoding.Default.GetBytes(value + salt))


        ' Create a new Stringbuilder to collect the bytes
        ' and create a string.


        ' Loop through each byte of the hashed data 
        ' and format each one as a hexadecimal string.
        Dim i As Integer
        Dim strTotal As String = ""
        For i = 0 To UBound(data)
            strTotal += CStr(data(i).ToString("x2"))
        Next i

        'Dim hash As String = OneWayHash(value + salt)
        logger.Debug("username: " + value + ", hash: " + strTotal)
        Return strTotal
    End Function

    Public Shared Sub RemoveCookie(name As String)
        logger.Debug("name: " + name)
        'Dim ck_current As HttpCookie = HttpContext.Current.Request.Cookies.Get(name)
        Dim ck As New HttpCookie(name, "DummyValueForRemoveCookieOnly")
        'If ck_current IsNot Nothing Then
        '    ck.Value = ck_current.Value
        'End If

        ck.Expires = DateTime.Now.AddDays(-1)
        HttpContext.Current.Response.Cookies.Remove(name)
        HttpContext.Current.Response.Cookies.Add(ck)
    End Sub

    Public Shared Sub DressHTMLControl(ByRef control As Object)
    End Sub

    Public Shared Function GetNumber(ByVal Number As String) As Object
        If IsNumeric(Number) = True Then
            Return CStr(Number)
        Else
            Return DBNull.Value
        End If
    End Function

    Public Shared Function GetGUID(ByVal Data As Object) As Guid
        If Data Is Nothing Then
            Return Guid.Empty
        Else
            If IsDBNull(Data) Then
                Return Guid.Empty
            Else
                If TypeOf Data Is Guid Then
                    Return CType(Data, Guid)
                Else
                    'Try a conversion anyway
                    Try
                        Dim _guid As New Guid(CStr(Data))
                        Return _guid
                    Catch ex As Exception
                        Return Guid.Empty
                    End Try
                End If
            End If
        End If
    End Function

    Public Shared Function FormatSubmissionNumber(ByVal Number As Integer) As String
        Try
            Return Format(Number, "000000")
        Catch ex As Exception
            Return ""
        End Try
    End Function

    Public Shared Function GetDBInteger(ByVal value As Object) As Object
        If value Is Nothing Then
            Return DBNull.Value
        Else
            If IsDBNull(value) Then
                Return DBNull.Value
            Else
                Try
                    If IsNumeric(value) = True Then
                        Return CInt(value)
                    Else
                        Return DBNull.Value
                    End If
                Catch ex As Exception
                    Return DBNull.Value
                End Try
            End If
        End If
    End Function

    Public Shared Function GetDBDouble(ByVal value As Object) As Object
        If value Is Nothing Then
            Return DBNull.Value
        Else
            If IsDBNull(value) Then
                Return DBNull.Value
            Else
                Try
                    If IsNumeric(value) = True Then
                        Return CDbl(value)
                    Else
                        Return DBNull.Value
                    End If
                Catch ex As Exception
                    Return DBNull.Value
                End Try
            End If
        End If
    End Function

    Public Shared Function FormatInteger(ByVal value As Object, Optional ByVal DefaultValue As Integer = 0) As Integer



        If value Is Nothing Then
            Return DefaultValue
        Else
            If IsDBNull(value) Then
                Return DefaultValue
            Else
                Try
                    If IsNumeric(value) = True Then
                        Return CInt(value)
                    Else
                        Return DefaultValue
                    End If
                Catch ex As Exception
                    Return DefaultValue
                End Try
            End If
        End If

    End Function

    Public Shared Function FormatFloat(ByVal value As Object, ByVal Args As String) As String
        If IsNumeric(GlobalFunctions.FormatData(value)) = False Then Return ""

        Dim _decimals As Integer = GlobalFunctions.FormatInteger(Args, 0)
        Dim _formatstring As String = "###,###,###,###,###,##0"
        If _decimals > 0 Then
            _formatstring += "."
            Dim _counter As Integer = 0
            For _counter = 1 To _decimals
                _formatstring += "0"
            Next
        End If
        Return Format(FormatDouble(value), _formatstring)
    End Function

    Public Shared Function FormatDouble(ByVal value As Object) As Double
        If value Is Nothing Then
            Return 0
        Else
            If IsDBNull(value) Then
                Return 0
            Else
                Try
                    If IsNumeric(value) = True Then
                        Return CDbl(value)
                    Else
                        Return 0
                    End If
                Catch ex As Exception
                    Return 0
                End Try
            End If
        End If
    End Function

    Public Shared Function FormatMoney(ByVal value As Object, Optional ByVal WithComma As Boolean = True) As String
        Dim moneyZero As String = GetMoneyZeroString()
        If IsNumeric(GlobalFunctions.FormatData(value)) = False Then Return ""
        If value Is Nothing Then
            Return moneyZero
        Else
            If IsDBNull(value) Then
                Return moneyZero
            Else
                Try
                    If IsNumeric(value) = True Then
                        If WithComma = False Then
                            Return Format(CDbl(value), GlobalFunctions.GetMoneyDisplayFormat(WithComma:=False))
                        Else
                            Return Format(CDbl(value), GlobalFunctions.GetMoneyDisplayFormat())
                        End If

                    Else
                        Return moneyZero
                    End If
                Catch ex As Exception
                    Return moneyZero
                End Try
            End If
        End If
    End Function

    Public Shared Function GetDateTime(ByVal Data As Object) As DateTime
        If IsDate(Data) = True Then
            Dim dt As DateTime = DateTime.Parse(Data)
            Return dt
        Else
            Return Nothing
        End If

    End Function

    Public Shared Function GetDBDateTime(ByVal Data As Object) As Object
        If IsDate(Data) = True Then
            Dim dt As DateTime = DateTime.Parse(Data)
            Return dt
        Else
            Return DBNull.Value
        End If
    End Function

    Public Shared Function FormatUnambiguousDateTime(ByVal Data As Object) As String

        Dim strTemp As String = FormatData(Data)


        If StrComp(strTemp, " 12:0 AM", CompareMethod.Text) = 0 Or StrComp(strTemp, " 12:00 AM", CompareMethod.Text) = 0 Then Return ""


        If IsDate(strTemp) = True Then
            Dim dt As DateTime = DateTime.Parse(strTemp)

            Dim ci As New System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.ToString)
            Return Format(dt, "dd/MMM/yyyy hh:mm:ss tt")
        Else
            Return ""
        End If
    End Function

    Public Shared Function FormatDateTime(ByVal Data As Object) As String

        Dim strTemp As String = FormatData(Data)


        If StrComp(strTemp, " 12:0 AM", CompareMethod.Text) = 0 Or StrComp(strTemp, " 12:00 AM", CompareMethod.Text) = 0 Then Return ""


        If IsDate(strTemp) = True Then
            Dim dt As DateTime = DateTime.Parse(strTemp)

            If GlobalFunctions.ISSPRING = True Then
                Return Format(dt, "dd MMM yyyy hh:mm tt")
            Else
                Dim ci As New System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.ToString)

                If Len(WebconfigSettings.DisplayDateFormat) = 0 And Len(WebconfigSettings.DisplayTimeFormat) = 0 Then
                    Return dt.ToString("f", ci)
                Else
                    Return Format(dt, WebconfigSettings.DisplayDateFormat & " " & WebconfigSettings.DisplayTimeFormat)
                End If



            End If



        Else
            Return ""
        End If

    End Function

    Public Shared Function FormatTime(ByVal Data As Object) As String

        Dim strTemp As String = FormatData(Data)
        logger.Debug("strTemp: " + strTemp)

        If StrComp(strTemp, " 12:0 AM", CompareMethod.Text) = 0 Or StrComp(strTemp, " 12:00 AM", CompareMethod.Text) = 0 Then Return ""


        If IsDate(strTemp) = True Then
            Dim dt As DateTime = DateTime.Parse(strTemp)
            Dim ci As New System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.ToString)

            If Len(WebconfigSettings.DisplayTimeFormat) = 0 Then
                Return dt.ToString("f", ci)
            Else
                Return Format(dt, WebconfigSettings.DisplayTimeFormat)
            End If
        Else
            Return ""
        End If

    End Function

    Public Shared Function FormatDate(ByVal Data As Object) As String
        Dim strTemp As String = FormatData(Data)

        If StrComp(strTemp, " 12:0 AM", CompareMethod.Text) = 0 Or StrComp(strTemp, " 12:00 AM", CompareMethod.Text) = 0 Then Return ""


        If IsDate(strTemp) = True Then
            Dim dt As DateTime = DateTime.Parse(strTemp)


            Dim ci As New System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.ToString)

            If Len(WebconfigSettings.DisplayDateFormat) = 0 Then
                Return dt.ToString("D", ci)
            Else
                Return Format(dt, WebconfigSettings.DisplayDateFormat)
            End If
        Else
            Return ""
        End If
    End Function

    Public Shared Function GetCountryColl() As Collection
        Dim countries As New Collection
        countries.Add("Afghanistan", "AF")
        countries.Add("Albania", "AL")
        countries.Add("Algeria", "DZ")
        countries.Add("American Samoa", "AS")
        countries.Add("Andorra", "AD")
        countries.Add("Angola", "AO")
        countries.Add("Anguilla", "AI")
        countries.Add("Antarctica", "AQ")
        countries.Add("Antigua And Barbuda", "AG")
        countries.Add("Argentina", "AR")
        countries.Add("Armenia", "AM")
        countries.Add("Aruba", "AW")
        countries.Add("Australia", "AU")
        countries.Add("Austria", "AT")
        countries.Add("Azerbaijan", "AZ")
        countries.Add("Bahamas", "BS")
        countries.Add("Bahrain", "BH")
        countries.Add("Bangladesh", "BD")
        countries.Add("Barbados", "BB")
        countries.Add("Belarus", "BY")
        countries.Add("Belgium", "BE")
        countries.Add("Belize", "BZ")
        countries.Add("Benin", "BJ")
        countries.Add("Bermuda", "BM")
        countries.Add("Bhutan", "BT")
        countries.Add("Bolivia", "BO")
        countries.Add("Bosnia And Herzegowina", "BA")
        countries.Add("Botswana", "BW")
        countries.Add("Bouvet Island", "BV")
        countries.Add("Brazil", "BR")
        countries.Add("British Indian Ocean Territory", "IO")
        countries.Add("Brunei Darussalam", "BN")
        countries.Add("Bulgaria", "BG")
        countries.Add("Burkina Faso", "BF")
        countries.Add("Burundi", "BI")
        countries.Add("Cambodia", "KH")
        countries.Add("Cameroon", "CM")
        countries.Add("Canada", "CA")
        countries.Add("Cape Verde", "CV")
        countries.Add("Cayman Islands", "KY")
        countries.Add("Central African Republic", "CF")
        countries.Add("Chad", "TD")
        countries.Add("Chile", "CL")
        countries.Add("China", "CN")
        countries.Add("Christmas Island", "CX")
        countries.Add("Cocos (Keeling) Islands", "CC")
        countries.Add("Colombia", "CO")
        countries.Add("Comoros", "KM")
        countries.Add("Congo", "CG")
        countries.Add("Cook Islands", "CK")
        countries.Add("Costa Rica", "CR")
        countries.Add("Cote D'Ivoire", "CI")
        countries.Add("Croatia (Local Name: Hrvatska)", "HR")
        countries.Add("Cuba", "CU")
        countries.Add("Cyprus", "CY")
        countries.Add("Czech Republic", "CZ")
        countries.Add("Denmark", "DK")
        countries.Add("Djibouti", "DJ")
        countries.Add("Dominica", "DM")
        countries.Add("Dominican Republic", "DO")
        countries.Add("East Timor", "TP")
        countries.Add("Ecuador", "EC")
        countries.Add("Egypt", "EG")
        countries.Add("El Salvador", "SV")
        countries.Add("Equatorial Guinea", "GQ")
        countries.Add("Eritrea", "ER")
        countries.Add("Estonia", "EE")
        countries.Add("Ethiopia", "ET")
        countries.Add("Falkland Islands (Malvinas)", "FK")
        countries.Add("Faroe Islands", "FO")
        countries.Add("Fiji", "FJ")
        countries.Add("Finland", "FI")
        countries.Add("France", "FR")
        countries.Add("French Guiana", "GF")
        countries.Add("French Polynesia", "PF")
        countries.Add("French Southern Territories", "TF")
        countries.Add("Gabon", "GA")
        countries.Add("Gambia", "GM")
        countries.Add("Georgia", "GE")
        countries.Add("Germany", "DE")
        countries.Add("Ghana", "GH")
        countries.Add("Gibraltar", "GI")
        countries.Add("Greece", "GR")
        countries.Add("Greenland", "GL")
        countries.Add("Grenada", "GD")
        countries.Add("Guadeloupe", "GP")
        countries.Add("Guam", "GU")
        countries.Add("Guatemala", "GT")
        countries.Add("Guinea", "GN")
        countries.Add("Guinea-Bissau", "GW")
        countries.Add("Guyana", "GY")
        countries.Add("Haiti", "HT")
        countries.Add("Heard And Mc Donald Islands", "HM")
        countries.Add("Holy See (Vatican City State)", "VA")
        countries.Add("Honduras", "HN")
        countries.Add("Hong Kong", "HK")
        countries.Add("Hungary", "HU")
        countries.Add("Icel And", "IS")
        countries.Add("India", "IN")
        countries.Add("Indonesia", "ID")
        countries.Add("Iran (Islamic Republic Of)", "IR")
        countries.Add("Iraq", "IQ")
        countries.Add("Ireland", "IE")
        countries.Add("Israel", "IL")
        countries.Add("Italy", "IT")
        countries.Add("Jamaica", "JM")
        countries.Add("Japan", "JP")
        countries.Add("Jordan", "JO")
        countries.Add("Kazakhstan", "KZ")
        countries.Add("Kenya", "KE")
        countries.Add("Kiribati", "KI")
        countries.Add("Korea, Dem People'S Republic", "KP")
        countries.Add("Korea, Republic Of", "KR")
        countries.Add("Kuwait", "KW")
        countries.Add("Kyrgyzstan", "KG")
        countries.Add("Lao People'S Dem Republic", "LA")
        countries.Add("Latvia", "LV")
        countries.Add("Lebanon", "LB")
        countries.Add("Lesotho", "LS")
        countries.Add("Liberia", "LR")
        countries.Add("Libyan Arab Jamahiriya", "LY")
        countries.Add("Liechtenstein", "LI")
        countries.Add("Lithuania", "LT")
        countries.Add("Luxembourg", "LU")
        countries.Add("Macau", "MO")
        countries.Add("Macedonia", "MK")
        countries.Add("Madagascar", "MG")
        countries.Add("Malawi", "MW")
        countries.Add("Malaysia", "MY")
        countries.Add("Maldives", "MV")
        countries.Add("Mali", "ML")
        countries.Add("Malta", "MT")
        countries.Add("Marshall Islands", "MH")
        countries.Add("Martinique", "MQ")
        countries.Add("Mauritania", "MR")
        countries.Add("Mauritius", "MU")
        countries.Add("Mayotte", "YT")
        countries.Add("Mexico", "MX")
        countries.Add("Micronesia, Federated States", "FM")
        countries.Add("Moldova, Republic Of", "MD")
        countries.Add("Monaco", "MC")
        countries.Add("Mongolia", "MN")
        countries.Add("Montserrat", "MS")
        countries.Add("Morocco", "MA")
        countries.Add("Mozambique", "MZ")
        countries.Add("Myanmar", "MM")
        countries.Add("Namibia", "NA")
        countries.Add("Nauru", "NR")
        countries.Add("Nepal", "NP")
        countries.Add("Netherlands", "NL")
        countries.Add("Netherlands Ant Illes", "AN")
        countries.Add("New Caledonia", "NC")
        countries.Add("New Zealand", "NZ")
        countries.Add("Nicaragua", "NI")
        countries.Add("Niger", "NE")
        countries.Add("Nigeria", "NG")
        countries.Add("Niue", "NU")
        countries.Add("Norfolk Island", "NF")
        countries.Add("Northern Mariana Islands", "MP")
        countries.Add("Norway", "NO")
        countries.Add("Oman", "OM")
        countries.Add("Pakistan", "PK")
        countries.Add("Palau", "PW")
        countries.Add("Panama", "PA")
        countries.Add("Papua New Guinea", "PG")
        countries.Add("Paraguay", "PY")
        countries.Add("Peru", "PE")
        countries.Add("Philippines", "PH")
        countries.Add("Pitcairn", "PN")
        countries.Add("Poland", "PL")
        countries.Add("Portugal", "PT")
        countries.Add("Puerto Rico", "PR")
        countries.Add("Qatar", "QA")
        countries.Add("Reunion", "RE")
        countries.Add("Romania", "RO")
        countries.Add("Russian Federation", "RU")
        countries.Add("Rwanda", "RW")
        countries.Add("Saint K Itts And Nevis", "KN")
        countries.Add("Saint Lucia", "LC")
        countries.Add("Saint Vincent, The Grenadines", "VC")
        countries.Add("Samoa", "WS")
        countries.Add("San Marino", "SM")
        countries.Add("Sao Tome And Principe", "ST")
        countries.Add("Saudi Arabia", "SA")
        countries.Add("Senegal", "SN")
        countries.Add("Seychelles", "SC")
        countries.Add("Sierra Leone", "SL")
        countries.Add("Singapore", "SG")
        countries.Add("Slovakia (Slovak Republic)", "SK")
        countries.Add("Slovenia", "SI")
        countries.Add("Solomon Islands", "SB")
        countries.Add("Somalia", "SO")
        countries.Add("South Africa", "ZA")
        countries.Add("South Georgia , S Sandwich Is.", "GS")
        countries.Add("Spain", "ES")
        countries.Add("Sri Lanka", "LK")
        countries.Add("St. Helena", "SH")
        countries.Add("St. Pierre And Miquelon", "PM")
        countries.Add("Sudan", "SD")
        countries.Add("Suriname", "SR")
        countries.Add("Svalbard, Jan Mayen Islands", "SJ")
        countries.Add("Sw Aziland", "SZ")
        countries.Add("Sweden", "SE")
        countries.Add("Switzerland", "CH")
        countries.Add("Syrian Arab Republic", "SY")
        countries.Add("Taiwan", "TW")
        countries.Add("Tajikistan", "TJ")
        countries.Add("Tanzania, United Republic Of", "TZ")
        countries.Add("Thailand", "TH")
        countries.Add("Togo", "TG")
        countries.Add("Tokelau", "TK")
        countries.Add("Tonga", "TO")
        countries.Add("Trinidad And Tobago", "TT")
        countries.Add("Tunisia", "TN")
        countries.Add("Turkey", "TR")
        countries.Add("Turkmenistan", "TM")
        countries.Add("Turks And Caicos Islands", "TC")
        countries.Add("Tuvalu", "TV")
        countries.Add("Uganda", "UG")
        countries.Add("Ukraine", "UA")
        countries.Add("United Arab Emirates", "AE")
        countries.Add("United Kingdom", "GB")
        countries.Add("United States", "US")
        countries.Add("United States Minor Is.", "UM")
        countries.Add("Uruguay", "UY")
        countries.Add("Uzbekistan", "UZ")
        countries.Add("Vanuatu", "VU")
        countries.Add("Venezuela", "VE")
        countries.Add("Viet Nam", "VN")
        countries.Add("Virgin Islands (British)", "VG")
        countries.Add("Virgin Islands (U.S.)", "VI")
        countries.Add("Wallis And Futuna Islands", "WF")
        countries.Add("Western Sahara", "EH")
        countries.Add("Yemen", "YE")
        countries.Add("Yugoslavia", "YU")
        countries.Add("Zaire", "ZR")
        countries.Add("Zambia", "ZM")
        Return countries
    End Function

    Public Shared Function FormatCountry(ByRef CountryColl As Collection, ByVal CountryData As Object) As String
        Dim ctryCode As String = FormatData(CountryData)

        If CountryColl.Contains(ctryCode) = True Then
            Return CountryColl.Item(ctryCode)
        Else
            Return ""
        End If
    End Function

    Public Shared Function FormatImageFile(ByVal UploadPath As String, ByVal Data As Object) As String
        Dim _imagefile As String = FormatData(Data)
        If Len(_imagefile) = 0 Then Return ""
        Return UploadPath.TrimEnd("\") & "\" & _imagefile
    End Function

    Public Shared Sub LoadDateTimeArgs(Arguments As String, ByRef IncludeTime As Boolean, ByRef DefaultToCurrent As Boolean, ByRef includeDate As Boolean)
        Dim arrItems() As String = Split(Arguments, ",")
        If UBound(arrItems) >= 1 Then
            IncludeTime = GlobalFunctions.FormatBoolean(arrItems(0))
            DefaultToCurrent = GlobalFunctions.FormatBoolean(arrItems(1))
        End If
        If UBound(arrItems) >= 2 Then
            includeDate = GlobalFunctions.FormatBoolean(arrItems(2))
        End If
    End Sub


    Public Shared Function FormatData(ByVal Data As Object) As String
        If Data Is Nothing Then
            Return ""
        Else
            If IsDBNull(Data) Then
                Return ""
            Else
                If TypeOf Data Is Guid Then
                    Try
                        Return CType(Data, Guid).ToString
                    Catch ex As Exception
                        Return ""
                    End Try
                Else
                    Try
                        Return CStr(Data)
                    Catch ex As Exception
                        Return ""
                    End Try
                End If
            End If
        End If
    End Function

    Public Shared Function GetDBGUID(ByVal data As Object) As Object
        If data Is Nothing Then
            Return DBNull.Value
        Else
            If IsDBNull(data) Then
                Return DBNull.Value
            Else
                If IsGUID(data) = False Then
                    Return DBNull.Value
                Else
                    Return New Guid(CStr(data))
                End If
            End If
        End If
    End Function

    Public Shared Function FormatDBYesNo(ByVal Data As Object) As Object
        If Data Is Nothing Then
            Return DBNull.Value
        Else
            If IsDBNull(Data) Then
                Return DBNull.Value
            Else
                If IsNumeric(Data) = False Then
                    Return DBNull.Value
                Else
                    Return CLng(Data)
                End If
            End If
        End If
    End Function

    Public Shared Function FormatBoolean(ByVal Data As Object, Optional ByVal DefaultValue As Boolean = False) As Boolean
        If Data Is Nothing Then
            Return DefaultValue
        Else
            If IsDBNull(Data) Then
                Return DefaultValue
            Else
                Try
                    Return CBool(Data)
                Catch ex As Exception
                    Return DefaultValue
                End Try
            End If
        End If
    End Function

    Public Shared Function FormatYesNo(ByVal Data As Object) As String
        If Data Is Nothing Then
            Return ""
        Else
            If IsDBNull(Data) Then
                Return ""
            Else
                Try
                    If Len(Data) = 0 Then Return ""
                    Return IIf(FormatBoolean(Data), "1", "0")
                Catch ex As Exception
                    Return ""
                End Try
            End If
        End If
    End Function

    Public Shared Sub InitializeHTMLControl(ByRef control As Object)
        control.Value = "<font face='Verdana'></font>"
    End Sub

    Public Shared Function VerifyWebRequestWellFormed(ByVal ParamArray Array() As String) As Boolean
        Dim _counter As Integer
        Dim _string As String

        For _counter = 0 To UBound(Array)
            _string = System.Web.HttpContext.Current.Request.QueryString(Array(_counter))
            If Len(_string) = 0 Then Return False
            Try
                Dim _tempGuid As Guid = New Guid(_string)
            Catch ex As Exception
                Return False
            End Try
        Next _counter
        Return True
    End Function

    Public Shared Function VerifyWebRequestExists(ByVal ParamArray Array() As String) As Boolean
        Dim _counter As Integer
        Dim _string As String

        For _counter = 0 To UBound(Array)
            _string = System.Web.HttpContext.Current.Request.QueryString(Array(_counter))
            If Len(_string) = 0 Then Return False
        Next _counter
        Return True
    End Function


    Public Shared Function EmailTemplates_CheckAccess(ByVal TemplateID As String, ByVal PermissionChar As String) As Boolean
        Dim _guid As Guid
        Try
            _guid = New Guid(TemplateID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return False
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        EmailTemplates_CheckAccess = _web.EmailTemplates_CheckAccess(_guid, PermissionChar)
        _web.CloseConnection()
    End Function

    Public Shared Sub CalculatePermissions(ByRef WebObj As ZukamiLib.WebSession, ByVal UserID As Guid, ByRef Settings As ZukamiLib.ZukamiSettings)
        'We get all groups

        Dim _groups As DataSet = WebObj.UsersGroups_Get(UserID)
        Dim _counter As Integer

        Settings.PermMCW = False
        Settings.PermMCU = False
        Settings.PermMP = False
        Settings.PermMQ = False
        Settings.PermMS = False
        Settings.PermME = False
        Settings.PermVD = False
        Settings.PermESW = False
        Settings.PermEMW = False
        Settings.PermMCA = False
        Settings.PermMCF = False
        Settings.PermMCV = False
        Settings.PermDMS = False
        Settings.InAdminGroup = False

        If StrComp(UserID.ToString, "5fa512a9-aee0-4021-a914-11c7466e51bc", CompareMethod.Text) = 0 Then
            Settings.InAdminGroup = True
            Settings.SetAdmin()
        End If

        For _counter = 0 To _groups.Tables(0).Rows.Count - 1
            If StrComp(GlobalFunctions.FormatData(_groups.Tables(0).Rows(_counter).Item("GroupID")), "d0d9e8c9-7d31-4f54-847e-c765db533754", CompareMethod.Text) = 0 Then
                Settings.InAdminGroup = True
                Settings.SetAdmin()
                Exit For
            End If

            Dim _permMCW As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MCW"))
            If _permMCW = True Then Settings.PermMCW = True

            Dim _permMCU As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MCU"))
            If _permMCU = True Then Settings.PermMCU = True

            Dim _permMP As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MP"))
            If _permMP = True Then Settings.PermMP = True

            Dim _permME As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_ME"))
            If _permME = True Then Settings.PermME = True

            Dim _permMQ As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MQ"))
            If _permMQ = True Then Settings.PermMQ = True

            Dim _permMS As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MS"))
            If _permMS = True Then Settings.PermMS = True

            Dim _permVD As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_VD"))
            If _permVD = True Then Settings.PermVD = True

            Dim _permESW As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_ESW"))
            If _permESW = True Then Settings.PermESW = True

            Dim _permEMW As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_EMW"))
            If _permEMW = True Then Settings.PermEMW = True

            Dim _permMCA As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MCA"))
            If _permMCA = True Then Settings.PermMCA = True

            Dim _permMCF As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MCF"))
            If _permMCF = True Then Settings.PermMCF = True

            Dim _permMCV As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_MCV"))
            If _permMCV = True Then Settings.PermMCV = True

            Dim _permDMS As Boolean = GlobalFunctions.FormatBoolean(_groups.Tables(0).Rows(_counter).Item("Perm_DMS"))
            If _permDMS = True Then Settings.PermDMS = True

        Next _counter



    End Sub

    Public Shared Function GetUploadedFilePath(ByVal FileTag As String) As String
        Dim fileguid As String = ""
        Dim filename As String = ""
        ExtractFromFileTag(FileTag, fileguid, filename)
        Return "Uploads\" & fileguid & "\" & filename
    End Function

    Public Shared Function GetFullUploadedFilePath(ByVal FileTag As String) As String
        Dim fileguid As String = ""
        Dim filename As String = ""
        ExtractFromFileTag(FileTag, fileguid, filename)
        Return GetZukamiSettings.UploadPath.TrimEnd("\") & "\" & fileguid & "\" & filename
    End Function

    Public Shared Sub ExtractFromFileTag(ByVal FileTag As String, ByRef FileGUID As String, ByRef FileName As String)
        Dim arrFiles() As String = Split(FileTag, ";")
        If UBound(arrFiles) >= 1 Then
            FileGUID = CStr(arrFiles(0))
            FileName = CStr(arrFiles(1))
        End If
    End Sub

    Public Shared Function CreateFileTag(ByVal FileGUID As String, ByVal FileName As String) As String
        Return FileGUID + ";" + FileName
    End Function




    Public Shared Sub BindFormSource(ByRef WebObj As ZukamiLib.WebSession, ByRef FormSelectorCtrl As Object, ByRef CaptionCtrl As Control, ByRef ValueCtrl As Control, ByRef OrderCtrl As Control, ByRef IsDistinct As CheckBox, ByRef DefaultFindMode As CheckBox, ByRef ShowRefresh As CheckBox, ByRef Filters As TextBox, ByRef data As DataSet, ByVal bindcolumn As String, ByRef ShowNewEntry As CheckBox)
        Dim _args As String = GlobalFunctions.FormatData(data.Tables(0).Rows(0).Item(bindcolumn))
        Dim _form As String = ""
        Dim _captionfield As String = ""
        Dim _valuefield As String = ""
        Dim _orderfield As String = ""
        Dim _distinct As Boolean = False
        Dim _deffindmode As Boolean = False
        Dim _showrefresh As Boolean = False
        Dim _filters As String = ""
        Dim _shownewentry As Boolean = False

        GetDynamicArguments(_args, _form, _captionfield, _valuefield, _orderfield, _distinct, _filters, _deffindmode, _showrefresh, _shownewentry)


        Dim _formset As DataSet = WebObj.Forms_GetByFormName(_form)


        Try
            Dim _appID As Guid = GlobalFunctions.GetGUID(_formset.Tables(0).Rows(0).Item("AppID"))

            FormSelectorCtrl.App = _appID
            FormSelectorCtrl.FormName = _form

            GlobalFunctions.LoadFormFieldsDDForLookup(CaptionCtrl, _form, WebObj)
            GlobalFunctions.LoadFormFieldsDDForLookup(ValueCtrl, _form, WebObj)
            GlobalFunctions.LoadFormFieldsDDForLookup(OrderCtrl, _form, WebObj)
            Filters.Text = _filters
            IsDistinct.Checked = _distinct
            DefaultFindMode.Checked = _deffindmode
            ShowRefresh.Checked = _showrefresh
            ShowNewEntry.Checked = _shownewentry
        Catch ex As Exception
        End Try
        Try
            CType(CaptionCtrl, DropDownList).SelectedValue = _captionfield
        Catch ex As Exception
        End Try
        Try
            CType(ValueCtrl, DropDownList).SelectedValue = _valuefield
        Catch ex As Exception
        End Try
        Try
            CType(OrderCtrl, DropDownList).SelectedValue = _orderfield
        Catch ex As Exception
        End Try
    End Sub

    Public Shared Sub BindGPSSource(ByRef WebObj As ZukamiLib.WebSession, ByRef FormSelectorCtrl As Object, ByRef data As DataSet, ByVal bindcolumn As String, ByRef StartCaptionText As TextBox, ByRef StopCaptionText As TextBox)
        Dim _args As String = GlobalFunctions.FormatData(data.Tables(0).Rows(0).Item(bindcolumn))
        Dim _form As String = ""
        Dim _captionfield As String = ""
        Dim _valuefield As String = ""
        Dim _orderfield As String = ""
        Dim _distinct As Boolean = False
        Dim _deffindmode As Boolean = False
        Dim _showrefresh As Boolean = False
        Dim _filters As String = ""
        Dim _startcaption As String = "Start Tracking"
        Dim _stopcaption As String = "Stop Tracking"

        GetDynamicGPSArguments(_args, _form, _captionfield, _valuefield, _orderfield, _distinct, _filters, _deffindmode, _showrefresh, _startcaption, _stopcaption)


        Dim _formset As DataSet = WebObj.Views_GetRecord(New Guid(_form))


        Try
            Dim _appID As Guid = GlobalFunctions.GetGUID(_formset.Tables(0).Rows(0).Item("AppID"))

            FormSelectorCtrl.App = _appID
            FormSelectorCtrl.FormName = _form
            StartCaptionText.Text = _startcaption
            StopCaptionText.Text = _stopcaption

        Catch ex As Exception
        End Try

    End Sub

    Public Shared Sub BindRadioButtonConfig(ByRef control As Object, ByRef HorizontalRB As RadioButton, ByRef VerticalRB As RadioButton, ByRef Data As DataSet, ByVal BindColumn As String)
        Dim lngCounter As Integer
        Dim _horzorientation As Boolean = True
        CType(control, ListBox).Items.Clear()
        Dim _XML As String = GlobalFunctions.FormatData(Data.Tables(0).Rows(0).Item(BindColumn))
        Dim _coll As Collection = GlobalFunctions.XMLToRadioButtonConfig(_XML, _horzorientation)
        If _coll Is Nothing = False Then
            For lngCounter = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(lngCounter)
                CType(control, ListBox).Items.Add(New ListItem(_vp.Caption, _vp.Value))
            Next lngCounter
        End If
        HorizontalRB.Checked = _horzorientation
        VerticalRB.Checked = Not _horzorientation
    End Sub

    Public Shared Sub BindValuePairList(ByRef control As Object, ByRef Data As DataSet, ByVal BindColumn As String)
        Dim lngCounter As Integer
        CType(control, ListBox).Items.Clear()
        Dim _XML As String = GlobalFunctions.FormatData(Data.Tables(0).Rows(0).Item(BindColumn))
        Dim _coll As Collection = GlobalFunctions.XMLToValuePairColl(_XML)
        If _coll Is Nothing = False Then
            For lngCounter = 1 To _coll.Count
                Dim _vp As ValuePair = _coll.Item(lngCounter)
                CType(control, ListBox).Items.Add(New ListItem(_vp.Caption, _vp.Value))
            Next lngCounter
        End If
    End Sub

    Public Shared Function Task_GetRecord(ByVal TaskID As String, Optional ByVal UserID As String = "") As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(TaskID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Task_GetRecord = _web.Task_Get(_guid, UserID)
        _web.CloseConnection()
    End Function

    Public Shared Function Task_GetByTaskID(ByVal TaskID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(TaskID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Task_GetByTaskID = _web.Task_GetByTaskID(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function Views_GetRecord(ByVal ViewID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(ViewID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Views_GetRecord = _web.Views_GetRecord(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function Document_GetLatestRecord(ByVal MasterDocumentID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(MasterDocumentID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Document_GetLatestRecord = _web.Document_GetLatestVersion(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function DocumentVersion_LatestPDFGet(ByVal MasterDocID As String) As Guid
        'This will retrieve the latest PDF
        Dim _guid As Guid
        Try
            _guid = New Guid(MasterDocID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        DocumentVersion_LatestPDFGet = _web.DocumentVersion_LatestPDFGet(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function DocumentVersion_Get(ByVal DocumentVersionID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(DocumentVersionID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        DocumentVersion_Get = _web.DocumentVersion_Get(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function ListItems_GetRecord(ByVal ListItemID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(ListItemID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        ListItems_GetRecord = _web.ListItems_GetRecord(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function IsGUID(ByVal Item As String) As Boolean
        Try
            If Len(Trim(Item)) = 0 Then Return False
            Dim _guid As New Guid(Item)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function

    Public Shared Function IsNotEmptyGUID(ByVal Item As String) As Boolean
        Try
            If Len(Trim(Item)) = 0 Then Return False
            Dim _guid As New Guid(Item)
            If _guid = Guid.Empty Then
                Return False
            Else
                Return True
            End If
        Catch ex As Exception
            Return False
        End Try
    End Function

    Public Shared Function ListItems_Get(ByVal ListID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(ListID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        ListItems_Get = _web.ListItems_Get(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function ListItemsGlobal_Get(ByVal ListID As String, ByVal Lang As String, Device As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(ListID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        ListItemsGlobal_Get = _web.ListItemsGlobal_Get(_guid, Lang, Device)
        _web.CloseConnection()
    End Function

    Private Shared Function ValuePairToXMLDoc(ByRef _Coll As Collection) As XmlDocument
        Dim _xml As New XmlDocument
        Dim _xmlroot As XmlElement = _xml.CreateElement("ZRoot")
        _xml.AppendChild(_xmlroot)
        Dim lngCounter As Integer
        For lngCounter = 1 To _Coll.Count
            Dim _valuepair As ValuePair = _Coll.Item(lngCounter)
            Dim _xmlElement As XmlElement = _xml.CreateElement("ZPair")
            _xmlroot.AppendChild(_xmlElement)
            AddElement(_xml, _xmlElement, "Caption", _valuepair.Caption)
            AddElement(_xml, _xmlElement, "Value", _valuepair.Value)
        Next
        Return _xml
    End Function

    Public Shared Function RadioButtonConfigToXML(ByRef _coll As Collection, ByVal HorzOrientation As Boolean) As String
        Dim _xml As XmlDocument = ValuePairToXMLDoc(_coll)
        Dim _xmlroot As XmlElement = _xml.ChildNodes.Item(0)
        _xmlroot.SetAttribute("Hort", CStr(HorzOrientation))

        Dim _sb As New StringBuilder
        Dim _stringwriter As New System.IO.StringWriter(_sb)
        _xml.Save(_stringwriter)
        Return _sb.ToString()
    End Function

    Public Shared Function OneWayHash(ByVal RawData As String) As String
        Dim md5Hasher As System.Security.Cryptography.MD5 = System.Security.Cryptography.MD5.Create()

        ' Convert the input string to a byte array and compute the hash.
        Dim data As Byte() = md5Hasher.ComputeHash(System.Text.Encoding.Default.GetBytes(RawData))


        ' Create a new Stringbuilder to collect the bytes
        ' and create a string.


        ' Loop through each byte of the hashed data 
        ' and format each one as a hexadecimal string.
        Dim i As Integer
        Dim strTotal As String = ""
        For i = 0 To UBound(data)
            strTotal += CStr(data(i).ToString("x2"))
        Next i
        Return strTotal
    End Function
    Public Shared Function LoginZukamiCheck(ByRef WebObj As ZukamiLib.WebSession, ByRef _result As ZukamiLib.WebSession.AUTH_RETURNCODES, ByVal username As String, ByVal password As String, ByVal HostName As String, ByVal HostAddress As String, Optional AutoLogin As Boolean = False) As DataSet
        Try
            Dim _ds As DataSet = WebObj.LoginZukamiCheck(username)
            Dim _dbpassword As String = ""
            If _ds IsNot Nothing AndAlso _ds.Tables.Count > 0 Then
                _dbpassword = _ds.Tables(0).Rows(0).Item("password").ToString
                Dim isLocked As Boolean = FormatBoolean(_ds.Tables(0).Rows(0).Item("locked").ToString)
                Dim isDisabled As Boolean = FormatBoolean(_ds.Tables(0).Rows(0).Item("disabled").ToString)
                logger.Debug("is locked? " + isLocked.ToString() + ", is disabled? " + isDisabled.ToString())
                If isLocked Then
                    WebObj.History_Insert("Login attempt", username, "0", HostName, HostAddress, True, System.Guid.NewGuid(), "User is locked.")
                    _result = WebSession.AUTH_RETURNCODES.AUTH_LOCKED
                ElseIf isDisabled Then
                    WebObj.History_Insert("Login attempt", username, "0", HostName, HostAddress, True, System.Guid.NewGuid(), "User is disabled.")
                    _result = WebSession.AUTH_RETURNCODES.AUTH_DISABLED
                ElseIf ValidatePassword(password, _dbpassword, AutoLogin) Then
                    WebObj.History_Insert("Login attempt", username, "0", HostName, HostAddress, True, System.Guid.NewGuid(), "Login Success.")
                    _result = WebSession.AUTH_RETURNCODES.AUTH_GRANTED
                Else
                    WebObj.History_Insert("Login attempt", username, "0", HostName, HostAddress, True, System.Guid.NewGuid(), "Invalid password.")
                    _result = WebSession.AUTH_RETURNCODES.AUTH_DENIED
                End If
            Else
                WebObj.History_Insert("Login attempt", username, "0", HostName, HostAddress, True, System.Guid.NewGuid(), "Invalid username.")
                _result = WebSession.AUTH_RETURNCODES.AUTH_USERNOTCREATED
            End If
            Return _ds
        Catch ex As Exception
            logger.Error(ex)
            _result = WebSession.AUTH_RETURNCODES.AUTH_DENIED
            Return Nothing
        End Try

    End Function
    Public Shared Function GenerateRandomPassword() As String
        Dim validchars As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"

        Dim sb As New StringBuilder()
        Dim rand As New Random()
        For i As Integer = 1 To 10
            Dim idx As Integer = rand.Next(0, validchars.Length)
            Dim randomChar As Char = validchars(idx)
            sb.Append(randomChar)
        Next i

        Dim randomString = sb.ToString()
        Return randomString
    End Function

    Public Shared Function ValidatePassword(ByRef WebObj As ZukamiLib.WebSession, ByVal Username As String, ByVal Password As String, ByRef ValidationError As String) As Boolean
        ValidationError = ""

        Dim _minchars As String = WebObj.ServerVariables_Get("MinChars")
        Dim _maxchars As String = WebObj.ServerVariables_Get("MaxChars")
        Dim _passwordhistory As Integer = WebObj.ServerVariables_Get("UserPasswordHistory")
        Dim _usernamecharacters As Integer = WebObj.ServerVariables_Get("usernamecharactersinpassword")
        'GlobalFunctions.OneWayHash(txtNewPassword.Text)
        Dim _passwordHistorySet As DataSet = WebObj.UserPasswordHistory_Get(_passwordhistory, Username)
        Dim _passwordRepeat As Boolean = False
        If _passwordHistorySet IsNot Nothing And _passwordhistory > 0 Then
            For i As Integer = 0 To _passwordHistorySet.Tables(0).Rows.Count - 1
                If ValidatePassword(Password, _passwordHistorySet.Tables(0).Rows(i).Item("password").ToString) Then
                    _passwordRepeat = True
                End If
            Next
        End If

        If _passwordRepeat Then

            ValidationError = "The password cannot be same as your last " & _passwordhistory.ToString & " passwords."
            Return False

        End If

        Dim _alphanumeric As Integer = GlobalFunctions.FormatInteger(WebObj.ServerVariables_Get("AlphaNumeric"), 0)
        Dim _passContainsUsername As Integer = GlobalFunctions.FormatInteger(WebObj.ServerVariables_Get("SameAsPass"), 0)

        Dim _upperlower As Integer = GlobalFunctions.FormatInteger(WebObj.ServerVariables_Get("UpperLower"), 0)
        Dim _specailCharacter As Integer = GlobalFunctions.FormatInteger(WebObj.ServerVariables_Get("specialCharacter"), 0)

        If IsNumeric(_minchars) Then
            If Len(Password) < _minchars Then
                ValidationError = "The password cannot be shorter than " & _minchars & " characters in length"
                Return False
            End If
        End If

        If IsNumeric(_maxchars) Then
            If Len(Password) > _maxchars Then
                ValidationError = "The password cannot be longer than " & _maxchars & " characters in length"
                Return False
            End If
        End If

        ' If _passContainsUsername <> 0 Then
        '     If StrComp(Username, Password, CompareMethod.Text) = 0 Then
        '         ValidationError = "The password cannot be the same as the username"
        '         Return False
        '     End If
        ' End If
        If _passContainsUsername <> 0 Then
            If compareUsername_Password(Username, Password, _usernamecharacters) = True Then
                ValidationError = "The password must not contain all or part of the username"
                Return False
            End If
        End If

        If _upperlower <> 0 Then
            If Regex.IsMatch(Password, "[A-Z]") = False Or Regex.IsMatch(Password, "[a-z]") = False Then
                ValidationError = "The password must contain a mix of uppercase and lowercase characters"
                Return False
            End If
        End If
        If _specailCharacter <> 0 Then


            If Regex.IsMatch(Password, "[^a-zA-Z0-9\s]+") = False Then
                ValidationError = "The password must contain atleast one special character"
                Return False
            End If
        End If
        If _alphanumeric <> 0 Then
            Dim _counter As Integer
            Dim _letterfound As Boolean = False
            Dim _numberfound As Boolean = False
            For _counter = 0 To Len(Password) - 1
                If Char.IsLetter(Password, _counter) Then _letterfound = True
                If Char.IsNumber(Password, _counter) Then _numberfound = True
            Next _counter

            If _letterfound = False Or _numberfound = False Then
                ValidationError = "The password must contain a mix of alphanumeric characters"
                Return False
            End If
        End If

        Return True
    End Function

    Private Shared Function compareUsername_Password(ByVal username As String, ByVal password As String, ByVal _usernamecharacters As Integer) As Boolean
        Dim word1 As String = username
        Dim word2 As String = password
        Dim common As String = ""
        Dim difference1 As String = Nothing
        Dim difference2 As String = Nothing
        Dim index As Integer = 0
        Dim pindex As Integer = 0
        Dim same As Boolean = False

        Do

            If word1(index) = word2(pindex) Then
                common += word1(index)

                pindex += 1
                If common.Length >= _usernamecharacters Then
                    same = True
                    Exit Do
                End If
            Else
                '  If common.Length <= 4 Then
                pindex = 0
                common = ""
                'End If

                same = False

            End If
            index += 1
        Loop While index < word1.Length AndAlso pindex < word2.Length

        For i As Integer = index To word1.Length - 1
            difference1 += word1(i)
        Next

        For i As Integer = index To word2.Length - 1
            difference2 += word2(i)
        Next
        Return same


    End Function

    Public Shared Function ValuePairCollToXML(ByRef _coll As Collection) As String
        Dim _xml As XmlDocument = ValuePairToXMLDoc(_coll)
        Dim _sb As New StringBuilder
        Dim _stringwriter As New System.IO.StringWriter(_sb)
        _xml.Save(_stringwriter)
        Return _sb.ToString()
    End Function

    Public Shared Function ValuePairCollToXML2(ByRef _coll As Collection) As String
        Dim _xml As New XmlDocument
        Dim _xmlroot As XmlElement = _xml.CreateElement("ZRoot")
        _xml.AppendChild(_xmlroot)
        Dim lngCounter As Integer
        For lngCounter = 1 To _coll.Count
            Dim _valuepair As ValuePair = _coll.Item(lngCounter)
            Dim _xmlElement As XmlElement = _xml.CreateElement("ZPair")
            _xmlroot.AppendChild(_xmlElement)
            AddElement(_xml, _xmlElement, "Caption", _valuepair.Caption)
            AddElement(_xml, _xmlElement, "Value", _valuepair.Value)
            AddElement(_xml, _xmlElement, "Value2", _valuepair.Value2)
        Next
        Dim _sb As New StringBuilder
        Dim _stringwriter As New System.IO.StringWriter(_sb)
        _xml.Save(_stringwriter)
        Return _sb.ToString()
    End Function

    Public Shared Function ValuePairCollToXML3(ByRef _coll As Collection) As String
        Dim _xml As New XmlDocument
        Dim _xmlroot As XmlElement = _xml.CreateElement("ZRoot")
        _xml.AppendChild(_xmlroot)
        Dim lngCounter As Integer
        For lngCounter = 1 To _coll.Count
            Dim _valuepair As ValuePair = _coll.Item(lngCounter)
            Dim _xmlElement As XmlElement = _xml.CreateElement("ZPair")
            _xmlroot.AppendChild(_xmlElement)
            AddElement(_xml, _xmlElement, "Caption", _valuepair.Caption)
            AddElement(_xml, _xmlElement, "Value", _valuepair.Value)
            AddElement(_xml, _xmlElement, "Value2", _valuepair.Value2)
            AddElement(_xml, _xmlElement, "Value3", _valuepair.Value3)
            AddElement(_xml, _xmlElement, "Value4", _valuepair.Value4)
            AddElement(_xml, _xmlElement, "Value5", _valuepair.Value5)
            AddElement(_xml, _xmlElement, "Value6", _valuepair.Value6)
            AddElement(_xml, _xmlElement, "Value7", _valuepair.Value7)
        Next
        Dim _sb As New StringBuilder
        Dim _stringwriter As New System.IO.StringWriter(_sb)
        _xml.Save(_stringwriter)
        Return _sb.ToString()
    End Function



    Public Shared Function XMLToRadioButtonConfig(ByVal strXML As String, ByRef HorzOrientation As Boolean) As Collection
        If Len(strXML) = 0 Then Return Nothing
        Dim _xml As New XmlDocument
        Dim _coll As New Collection
        Dim lngCounter As Integer
        _xml.LoadXml(strXML)

        Dim _xmlList As XmlNodeList = _xml.GetElementsByTagName("ZRoot")
        If _xmlList.Count = 0 Then Return Nothing
        Dim _xmlRoot As XmlElement = _xmlList.Item(0)


        HorzOrientation = GlobalFunctions.FormatBoolean(_xmlRoot.GetAttribute("Hort"), True)
        For lngCounter = 0 To _xmlRoot.ChildNodes.Count - 1
            Dim _xmlElement As XmlElement = _xmlRoot.ChildNodes.Item(lngCounter)
            Dim _valuepair As New ValuePair
            _valuepair.Caption = GetElement(_xmlElement, "Caption")
            _valuepair.Value = GetElement(_xmlElement, "Value")
            _coll.Add(_valuepair)
        Next lngCounter
        Return _coll
    End Function



    Public Shared Function XMLToValuePairColl(ByVal strXML As String) As Collection
        If Len(strXML) = 0 Then Return Nothing
        Dim _xml As New XmlDocument
        Dim _coll As New Collection
        Dim lngCounter As Integer
        _xml.LoadXml(strXML)

        Dim _xmlList As XmlNodeList = _xml.GetElementsByTagName("ZRoot")
        If _xmlList.Count = 0 Then Return Nothing
        Dim _xmlRoot As XmlElement = _xmlList.Item(0)
        For lngCounter = 0 To _xmlRoot.ChildNodes.Count - 1
            Dim _xmlElement As XmlElement = _xmlRoot.ChildNodes.Item(lngCounter)
            Dim _valuepair As New ValuePair
            _valuepair.Caption = GetElement(_xmlElement, "Caption")
            _valuepair.Value = GetElement(_xmlElement, "Value")
            _coll.Add(_valuepair)
        Next lngCounter
        Return _coll
    End Function

    Public Shared Function XMLToValuePairColl2(ByVal strXML As String) As Collection
        If Len(strXML) = 0 Then Return Nothing
        Dim _xml As New XmlDocument
        Dim _coll As New Collection
        Dim lngCounter As Integer
        _xml.LoadXml(strXML)

        Dim _xmlList As XmlNodeList = _xml.GetElementsByTagName("ZRoot")
        If _xmlList.Count = 0 Then Return Nothing
        Dim _xmlRoot As XmlElement = _xmlList.Item(0)
        For lngCounter = 0 To _xmlRoot.ChildNodes.Count - 1
            Dim _xmlElement As XmlElement = _xmlRoot.ChildNodes.Item(lngCounter)
            Dim _valuepair As New ValuePair
            _valuepair.Caption = GetElement(_xmlElement, "Caption")
            _valuepair.Value = GetElement(_xmlElement, "Value")
            _valuepair.Value2 = GetElement(_xmlElement, "Value2")
            _coll.Add(_valuepair)
        Next lngCounter
        Return _coll
    End Function

    Public Shared Function XMLToValuePairColl3(ByVal strXML As String) As Collection
        If Len(strXML) = 0 Then Return Nothing
        Dim _xml As New XmlDocument
        Dim _coll As New Collection
        Dim lngCounter As Integer
        _xml.LoadXml(strXML)

        Dim _xmlList As XmlNodeList = _xml.GetElementsByTagName("ZRoot")
        If _xmlList.Count = 0 Then Return Nothing
        Dim _xmlRoot As XmlElement = _xmlList.Item(0)
        For lngCounter = 0 To _xmlRoot.ChildNodes.Count - 1
            Dim _xmlElement As XmlElement = _xmlRoot.ChildNodes.Item(lngCounter)
            Dim _valuepair As New ValuePair
            _valuepair.Caption = GetElement(_xmlElement, "Caption")
            _valuepair.Value = GetElement(_xmlElement, "Value")
            _valuepair.Value2 = GetElement(_xmlElement, "Value2")
            _valuepair.Value3 = GetElement(_xmlElement, "Value3")
            _valuepair.Value4 = GetElement(_xmlElement, "Value4")
            _valuepair.Value5 = GetElement(_xmlElement, "Value5")
            _valuepair.Value6 = GetElement(_xmlElement, "Value6")
            Try
                _valuepair.Value7 = GetElement(_xmlElement, "Value7")
            Catch ex As Exception

            End Try

            _coll.Add(_valuepair)
        Next lngCounter
        Return _coll
    End Function

    Public Shared Function GetElement(ByRef ParentNode As XmlElement, ByVal TagName As String) As String
        Try


            Dim _xmlnl As XmlNodeList = ParentNode.GetElementsByTagName(TagName)
            If _xmlnl.Count > 0 Then
                Dim _xmlFoundElement As XmlElement = _xmlnl.Item(0)
                Return _xmlFoundElement.InnerText
            Else
                Return ""
            End If
        Catch ex As Exception
            Return ""
        End Try
    End Function

    Public Shared Function AddElement(ByRef _xmldom As XmlDocument, ByRef ParentNode As XmlElement, ByVal TagName As String, ByVal TagValue As String) As XmlElement
        Dim _xmlElement As XmlElement = _xmldom.CreateElement(TagName)
        _xmlElement.InnerText = TagValue
        ParentNode.AppendChild(_xmlElement)
        Return _xmlElement
    End Function

    Public Shared Function Emails_GetRecord(ByVal MessageID As Guid) As DataSet
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Emails_GetRecord = _web.Emails_Get(MessageID)
        _web.CloseConnection()
    End Function

    Public Shared Function CreateNewFileGUID() As Guid
        Dim _guid As Guid = Guid.NewGuid
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _FullPath As String = _settings.UploadPath.TrimEnd("\") & "\" & _guid.ToString
        Try
            System.IO.Directory.CreateDirectory(_FullPath)
        Catch ex As Exception
            Return Guid.Empty
        End Try
        Return _guid
    End Function

    Public Shared Function CreateFileFolder(FileGUID As String) As String
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _FullPath As String = _settings.UploadPath.TrimEnd("\") & "\" & FileGUID
        Try
            System.IO.Directory.CreateDirectory(_FullPath)
        Catch ex As Exception
            Return ""
        End Try
        Return _FullPath
    End Function

    Public Shared Function DebugMessage_GetRecord(ByVal DebugMessageSeq As Integer) As DataSet
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        DebugMessage_GetRecord = _web.DebugMessages_GetRecord(DebugMessageSeq)
        _web.CloseConnection()
        _web = Nothing
    End Function

    Public Shared Function ActionBarItem_GetRecord(ByVal ActionBarItemID As String) As DataSet
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        ActionBarItem_GetRecord = _web.ActionBarItem_GetRecord(New Guid(ActionBarItemID))
        _web.CloseConnection()
        _web = Nothing
    End Function

    Public Shared Function Departments_GetRecord(ByVal DeptID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(DeptID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Departments_GetRecord = _web.Department_GetRecord(_guid)
        _web.CloseConnection()
        _web = Nothing
    End Function

    Public Shared Function Division_GetRecord(ByVal divID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(divID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Division_GetRecord = _web.Division_GetRecord(_guid)
        _web.CloseConnection()
        _web = Nothing
    End Function

    Public Shared Function Apps_GetRecord(ByVal AppID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(AppID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Apps_GetRecord = _web.App_GetRecord(_guid)
        _web.CloseConnection()
        _web = Nothing
    End Function

    Public Shared Function EmailTemplates_GetRecord(ByVal TemplateID As String) As DataSet
        Dim _guid As Guid
        Dim _result As ZukamiLib.WebSession.ACCESS_RESULT
        Try
            _guid = New Guid(TemplateID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        EmailTemplates_GetRecord = _web.EmailTemplates_GetRecord(_guid, _result)
        _web.CloseConnection()
        If _result = ZukamiLib.WebSession.ACCESS_RESULT.AUTH_DENIED Then
            Navigator.RaiseWebError("PermissionDenied")
            Return Nothing
        End If
    End Function

    Public Shared Function Schedule_GetRecord(ByVal RuleID As String) As DataSet
        Dim _guid As Guid
        Dim _result As ZukamiLib.WebSession.ACCESS_RESULT
        Try
            _guid = New Guid(RuleID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Schedule_GetRecord = _web.Schedules_GetRecord(_guid)
        _web.CloseConnection()
    End Function


    Public Shared Function Groups_GetRecord(ByVal GroupID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(GroupID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Groups_GetRecord = _web.Groups_GetRecord(_guid)
        _web.CloseConnection()
    End Function


    Public Shared Function NodeConfig_GetRecord(ByVal NodeID As String, ByVal WorkflowID As String) As DataSet
        Dim _guid As Guid
        Dim _workflowguid As Guid
        Try
            _guid = New Guid(NodeID)
            _workflowguid = New Guid(WorkflowID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        NodeConfig_GetRecord = _web.NodeConfig_Get(_guid, _workflowguid)
        _web.CloseConnection()
    End Function

    Public Shared Function App_GetIcon(ByRef WebObj As ZukamiLib.WebSession, ByVal AppID As Guid) As String
        App_GetIcon = ""
        Dim _set As DataSet = WebObj.App_GetRecord(AppID)
        If _set.Tables(0).Rows.Count > 0 Then
            Dim _appIcon As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("AppIcon"))
            Dim _appCustomIcon As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("AppCustomIcon"))
            If Len(_appCustomIcon) > 0 Then
                Return GlobalFunctions.GetUploadedFilePath(_appCustomIcon)
            ElseIf Len(_appIcon) > 0 Then
                Return _appIcon
            Else
                Return "images\icoApp.png"
            End If
        End If
    End Function

    Public Shared Function App_GetBGImagemobile(ByRef WebObj As ZukamiLib.WebSession, ByVal AppID As Guid) As String
        'App_GetBGImage = ""
        'Dim _set As DataSet = WebObj.App_GetRecord(AppID)
        'If _set.Tables(0).Rows.Count > 0 Then
        '    Dim _bgimage As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("BGImage"))
        '    Dim _bgcustomimage As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("BGCustomImage"))
        '    If Len(_bgcustomimage) > 0 Then
        '        Return GlobalFunctions.GetUploadedFilePath(_bgcustomimage)
        '    ElseIf Len(_bgimage) > 0 Then
        '        Return _bgimage
        '    Else
        Return "images\bg2.jpg"
        '    End If
        'End If
    End Function

    Public Shared Function App_GetBGImage(ByRef WebObj As ZukamiLib.WebSession, ByVal AppID As Guid) As String
        App_GetBGImage = ""
        Dim _set As DataSet = WebObj.App_GetRecord(AppID)
        If _set.Tables(0).Rows.Count > 0 Then
            Dim _bgimage As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("BGImage"))
            Dim _bgcustomimage As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("BGCustomImage"))
            If Len(_bgcustomimage) > 0 Then
                Return GlobalFunctions.GetUploadedFilePath(_bgcustomimage)
            ElseIf Len(_bgimage) > 0 Then
                Return _bgimage
            Else
                Return "images\bg2.jpg"
            End If
        End If
    End Function

    Public Shared Function Workflow_GetRecord(ByVal MasterWorkflowID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(MasterWorkflowID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Workflow_GetRecord = _web.WorkflowMaster_GetRecord(_guid)
        _web.CloseConnection()
    End Function


    Public Shared Function Lists_GetRecord(ByVal TemplateID As String) As DataSet
        Dim _guid As Guid
        Dim _result As ZukamiLib.WebSession.ACCESS_RESULT
        Try
            _guid = New Guid(TemplateID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Lists_GetRecord = _web.Lists_GetRecord(_guid, _result)
        _web.CloseConnection()
        If _result = ZukamiLib.WebSession.ACCESS_RESULT.AUTH_DENIED Then
            Navigator.RaiseWebError("PermissionDenied")
            Return Nothing
        End If
    End Function

    Public Shared Function OutOfOffice_GetRecord(ByVal ID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(ID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        OutOfOffice_GetRecord = _web.OutOfOffice_GetRecord(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Function Users_GetRecord(ByVal UserID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(UserID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Users_GetRecord = _web.Users_GetRecord(_guid)
        _web.CloseConnection()
    End Function

    Public Shared Sub LoadControlProperties(ByRef DropDownCtrl As DropDownList)
        DropDownCtrl.Items.Clear()
        DropDownCtrl.Items.Add(New System.Web.UI.WebControls.ListItem("Value", "Value"))
        DropDownCtrl.Items.Add(New System.Web.UI.WebControls.ListItem("ReadOnly", "ReadOnly"))
        DropDownCtrl.Items.Add(New System.Web.UI.WebControls.ListItem("Visible", "Visible"))

    End Sub

    Public Shared Sub LoadAllCodeFields(ByRef Webobj As ZukamiLib.WebSession, ByRef DropDownCtrl As DropDownList, ByVal FormID As Guid, ByVal IsAction As Boolean)
        DropDownCtrl.Items.Clear()

        Dim _set As DataSet = Webobj.ListItems_Get(FormID)
        Dim _Counter As Integer
        For _Counter = 0 To _set.Tables(0).Rows.Count - 1
            Dim _fBindSource As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_Counter).Item("FieldBindSource"))
            DropDownCtrl.Items.Add(New System.Web.UI.WebControls.ListItem(_fBindSource, _fBindSource))
        Next _Counter
        If IsAction = False Then
            DropDownCtrl.Items.Add(New System.Web.UI.WebControls.ListItem("[CurrentUser]", "[CurrentUser]"))
        End If


    End Sub

    Public Shared Sub GetFormTheme(ByRef WebObj As ZukamiLib.WebSession, ByVal ThemeCode As String, ByRef ThemeID As Guid, ByRef Header As String, ByRef Footer As String, ByRef Body As String, Optional IsMobile As Boolean = False)
        Dim _set As DataSet = WebObj.Template_Get(ThemeID, ThemeCode, IsMobile)
        If _set.Tables(0).Rows.Count = 0 Then
            Dim _set2 As DataSet = WebObj.Template_Get(ThemeID, IIf(IsMobile = True, "M", "") & "MASTP", IsMobile)
            If _set2.Tables(0).Rows.Count = 0 Then
                Header = ""
                Footer = ""
                Body = ""
            Else
                Header = GlobalFunctions.FormatData(_set2.Tables(0).Rows(0).Item("Header"))
                Footer = GlobalFunctions.FormatData(_set2.Tables(0).Rows(0).Item("Footer"))
                Body = GlobalFunctions.FormatData(_set2.Tables(0).Rows(0).Item("Body"))
            End If

        Else
            Header = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Header"))
            Footer = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Footer"))
            Body = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Body"))
        End If
    End Sub

    Public Shared Sub GetRawFormTheme(ByRef WebObj As ZukamiLib.WebSession, ByVal ThemeCode As String, ByRef ThemeID As Guid, ByRef Header As String, ByRef Footer As String, ByRef Body As String, Optional IsMobile As Boolean = False)
        Dim _set As DataSet = WebObj.Template_GetRaw(ThemeID, ThemeCode)
        If _set.Tables(0).Rows.Count = 0 Then
            Dim _set2 As DataSet = WebObj.Template_GetRaw(ThemeID, IIf(IsMobile = True, "M", "") & "MASTP")
            If _set2.Tables(0).Rows.Count = 0 Then
                Header = ""
                Footer = ""
                Body = ""
            Else
                Header = GlobalFunctions.FormatData(_set2.Tables(0).Rows(0).Item("Header"))
                Footer = GlobalFunctions.FormatData(_set2.Tables(0).Rows(0).Item("Footer"))
                Body = GlobalFunctions.FormatData(_set2.Tables(0).Rows(0).Item("Body"))
            End If

        Else
            Header = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Header"))
            Footer = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Footer"))
            Body = GlobalFunctions.FormatData(_set.Tables(0).Rows(0).Item("Body"))
        End If
    End Sub

    Public Shared Sub Writelog(ByVal Message As String)
        Try
            Message = Now & vbTab & " Report : " & Message & vbNewLine
            Dim byteMessage() As Byte = System.Text.ASCIIEncoding.ASCII.GetBytes(Message)
            Dim myLogfile As String = "C:\Zukamilog.txt"
            Dim fs As New IO.FileStream(myLogfile, IO.FileMode.Append)
            fs.Write(byteMessage, 0, byteMessage.Length)
            fs.Close()
        Catch ex As Exception

        End Try
    End Sub

    ' https://stackoverflow.com/questions/49547/how-to-control-web-page-caching-across-all-browsers
    Public Shared Sub AddHttpHeaderToDisablePageCache(resp As HttpResponse)
        resp.AppendHeader("Cache-Control", "no-cache, no-store, must-revalidate") ' HTTP 1.1.
        ' If you don't care about IE6 nor HTTP 1.0 clients (HTTP 1.1 was introduced 1997), then you could omit Pragma.
        ' resp.AppendHeader("Pragma", "no-cache") ' HTTP 1.0.
        resp.AppendHeader("Expires", "0") ' Proxies.

        resp.Cache.SetCacheability(HttpCacheability.NoCache)
        resp.Cache.AppendCacheExtension("no-store, must-revalidate")
        resp.AppendHeader("Pragma", "no-cache")
        resp.AppendHeader("Expires", "0")
    End Sub

    ' RegisterStartupScriptOnce("js/control_signature.js", Page, Me.GetType())
    Public Shared Sub RegisterStartupScriptOnce(jsFile As String, page As System.Web.UI.Page, myType As Type)
        If Not page.ClientScript.IsStartupScriptRegistered(jsFile) Then
            Dim jsFilePath As String = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~"), jsFile)
            Dim jsHtml As String = String.Format("<script>{1}{0}{1}</script>", System.IO.File.ReadAllText(jsFilePath), vbCrLf)
            page.ClientScript.RegisterStartupScript(myType, jsFile, jsHtml)
        End If
    End Sub

    Public Shared Sub RegisterStartupScript(ScriptKey As String, Script As String, AddScriptTags As Boolean)
        ScriptManager.RegisterStartupScript(CType(System.Web.HttpContext.Current.Handler, Page), System.Web.HttpContext.Current.Handler.GetType, ScriptKey, Script, AddScriptTags)
    End Sub

    Public Shared Function FromConfig(item As String, Optional defaultValueWhenNotDefined As String = "") As String
        Dim result As String = ""
        Try
            result = ConfigurationManager.AppSettings(item).ToString()
        Catch ex As Exception
            logger.Warn(ex, "item: " + item + ", defaultValueWhenNotDefined: " + defaultValueWhenNotDefined)
        End Try
        If String.IsNullOrEmpty(result) Then
            result = defaultValueWhenNotDefined
        End If
        Return result
    End Function

    Public Shared Sub RunSql(sql As String)
        Dim _webobj As New ZukamiLib.WebSession(GetZukamiSettings)
        _webobj.OpenConnection()
        _webobj.CustomSQLCommand(sql)
        _webobj.CustomClearParameters()
        _webobj.CustomSQLExecute()
        _webobj.CloseConnection()
        If Len(_webobj.LastError) > 0 Then
            logger.Error(_webobj.LastError + ", sql: " + sql)
            'Throw New System.Exception("Failed to run sql: " + sql + ", last error: " + _webobj.LastError)
        End If
    End Sub

    Private Shared oracleConnectionString As String = GetOracleConnectionString()
    Private Shared oracleCommandTimeoutInSeconds As Integer = GetOracleCommandTimeoutInSeconds()
    Private Shared oracle_StoreFormsDataInOracleDB As Boolean? = Nothing

    Public Shared Function OracleConvertToPLSQL(sql As String) As String
        Dim resultSql As String = GlobalFunctions.FormatData(sql)
        If OracleDBEnabled() Then
            resultSql = resultSql.Replace("[", """").Replace("]", """")
        End If
        Return resultSql
    End Function

    Public Shared Sub OracleCreateTable(tableName As String)
        Dim sql As String = String.Format("create table ""{0}"" (""ID"" varchar2(38)) ", tableName)
        OracleRunSql(sql)
    End Sub
    Public Shared Sub OracleCreateSubTable(tableName As String)
        Dim sql As String = String.Format("create table ""{0}"" (""ID"" varchar2(38), ""ParentID"" varchar2(38)) ", tableName)
        OracleRunSql(sql)
    End Sub
    Public Shared Function OracleCreateSubTableWithAutoRenaming(tableName As String) As String
        Dim i As Integer = 1
        Dim actualTableName As String = tableName
        Dim needToTryAnotherRound As Boolean = False
        Do
            Try
                OracleCreateSubTable(actualTableName)
                needToTryAnotherRound = False
            Catch ex As Exception
                needToTryAnotherRound = False
                ' ORA-00955: name is already used by an existing object
                If ex.ToString.ToUpper().Contains("ORA-00955".ToUpper()) Then
                    actualTableName = tableName + i.ToString()
                    i += 1
                    needToTryAnotherRound = True
                Else
                    Throw
                End If
            End Try
        Loop While (needToTryAnotherRound)
        Return actualTableName
    End Function
    ' Private Shared Sub OracleAddColumn(tableName As String, fieldName As String, oracleType As String)
    '     Dim sql As String = String.Format("ALTER TABLE ""{0}"" ADD ""{1}"" {2} ", tableName, fieldName, oracleType)
    '     If Not String.IsNullOrWhiteSpace(tableName) AndAlso Not String.IsNullOrWhiteSpace(fieldName) AndAlso Not String.IsNullOrWhiteSpace(oracleType) Then
    '         OracleRunSql(sql)
    '     Else
    '         logger.Debug("skip: " + sql)
    '     End If
    ' End Sub

    Public Shared Function OracleGetOracleDbType(fieldTypeNo As Integer) As OracleDbType
        Dim dbType As OracleDbType
        Select Case fieldTypeNo
            Case 0
                ' SHORT TEXT
                dbType = OracleDbType.Varchar2
            Case 1
                ' LONG TEXT
                dbType = OracleDbType.Clob
            Case 2
                ' INT
                dbType = OracleDbType.Int32
            Case 3
                ' FLOAT
                dbType = OracleDbType.Decimal
            Case 4
                ' DATE/TIME
                dbType = OracleDbType.Date
            Case 5
                ' FILE
                dbType = OracleDbType.Varchar2
            Case 6
                ' YES/NO
                dbType = OracleDbType.Decimal
            Case 7
                ' AUTONUMBER
                dbType = OracleDbType.Varchar2
            Case 8
                ' USER
                dbType = OracleDbType.Varchar2
            Case 9
                ' DROPDOWN
                dbType = OracleDbType.Varchar2
            Case 10
                ' DATE
                dbType = OracleDbType.Date
            Case 15
                ' MONEY
                dbType = OracleDbType.Decimal
            Case 22
                ' DROPDOWN
                dbType = OracleDbType.Varchar2
            Case 23
                dbType = OracleDbType.Varchar2
            Case 25
                dbType = OracleDbType.Varchar2
            Case 26
                dbType = OracleDbType.Varchar2
            Case 27
                dbType = OracleDbType.Varchar2
            Case 30
                dbType = OracleDbType.Varchar2
            Case 31
                dbType = OracleDbType.Varchar2
            Case 32
                dbType = OracleDbType.Clob
            Case 33
                dbType = OracleDbType.Clob
            Case 34
                ' LONG TEXT
                dbType = OracleDbType.Clob
            Case 35
                dbType = OracleDbType.Varchar2
            Case 36
                dbType = OracleDbType.Varchar2
            Case 37
                dbType = OracleDbType.Varchar2
            Case 38
                dbType = OracleDbType.Varchar2
            Case 40
                dbType = OracleDbType.Varchar2
            Case 50
                dbType = OracleDbType.Varchar2
            Case Else
                dbType = OracleDbType.Varchar2
        End Select
        Return dbType
    End Function

    Private Shared Function OracleGetFieldType(fieldTypeNo As Integer) As String
        Dim fieldType As String = ""
        Select Case fieldTypeNo
            'We keep it simple just for now
            Case 0
                ' SHORT TEXT
                fieldType = "varchar2(1000)"
            Case 1
                ' LONG TEXT
                fieldType = "CLOB"
            Case 2
                ' INT
                fieldType = "NUMBER(38)"
            Case 3
                ' FLOAT
                'fieldType = "BINARY_FLOAT"
                fieldType = "Number(30,8)"
            Case 4
                ' DATE/TIME
                fieldType = "DATE"
            Case 5
                ' FILE
                fieldType = "varchar2(1000)"
            Case 6
                ' YES/NO
                fieldType = "NUMBER(1)"
            Case 7
                ' AUTONUMBER
                fieldType = "varchar2(1000)"
            Case 8
                ' USER
                fieldType = "varchar2(38)"
            Case 9
                ' DROPDOWN
                fieldType = "varchar2(1000)"
            Case 10
                ' DATE
                fieldType = "DATE"
            Case 15
                ' MONEY
                fieldType = "Number(30,4)"
            Case 22
                ' DROPDOWN
                fieldType = "varchar2(1000)"
            Case 23
                fieldType = "varchar2(1000)"
            Case 25
                fieldType = "varchar2(1000)"
            Case 26
                fieldType = "varchar2(1000)"
            Case 27
                fieldType = "varchar2(1000)"
            Case 30
                fieldType = "varchar2(1000)"
            Case 31
                fieldType = "varchar2(1000)"
            Case 32
                fieldType = "CLOB"
            Case 33
                fieldType = "CLOB"
            Case 34
                ' LONG TEXT
                fieldType = "CLOB"
            Case 35
                fieldType = "varchar2(1000)"
            Case 36
                fieldType = "varchar2(1000)"
            Case 37
                fieldType = "varchar2(1000)"
            Case 38
                fieldType = "varchar2(1000)"
            Case 40
                fieldType = "varchar2(1000)"
            Case 50
                fieldType = "varchar2(1000)"
            Case Else
                fieldType = ""
        End Select
        Return fieldType
    End Function
    Private Shared Function GetOracleConnectionString() As String
        Dim conn As String = ""
        If OracleDBEnabled() Then
            conn = FromConfig("OracleConnectionString")
        End If
        Return conn
    End Function
    Private Shared Function GetOracleCommandTimeoutInSeconds() As String
        Dim timeout As Integer = 0
        If OracleDBEnabled() Then
            timeout = Integer.Parse(FromConfig("OracleCommandTimeoutInSeconds", "5"))
        End If
        Return timeout
    End Function
    Public Shared Function OracleDBEnabled() As Boolean
        If Not oracle_StoreFormsDataInOracleDB.HasValue Then
            oracle_StoreFormsDataInOracleDB = Boolean.Parse(FromConfig("Oracle_StoreFormsDataInOracleDB", "false"))
        End If
        Return oracle_StoreFormsDataInOracleDB.Value
    End Function
    Public Shared Function IsInternalTable(tableName As String) As Boolean
        Dim isInternal As Boolean = False
        If Not String.IsNullOrWhiteSpace(tableName) Then
            tableName = tableName.Replace("""", "").Replace("[", "").Replace("]", "").ToLower()
            'Dim left3 As String = Left(tableName.ToUpper(), 3)
            'If left3 = "QF_" OrElse left3 = "SF_" Then
            Dim internalTables As List(Of String) = FromConfig("InternalTables").Split(",").ToList()
            For Each internalTable As String In internalTables
                If tableName = internalTable.ToLower() Then
                    isInternal = True
                    Exit For
                End If
            Next
        End If
        logger.Debug("tableName: " + tableName + ", isInternal: " + isInternal.ToString())
        Return isInternal
    End Function
    Public Shared Sub OracleRunSql(sql As String, Optional ByRef params As List(Of OracleParameter) = Nothing)
        Try
            Using con As New OracleConnection(oracleConnectionString)
                ' logger.Debug("StatementCacheSize: " + con.StatementCacheSize.ToString())
                Using cmd As OracleCommand = con.CreateCommand()
                    cmd.CommandTimeout = oracleCommandTimeoutInSeconds
                    cmd.Connection.Open()
                    cmd.CommandText = sql
                    If params IsNot Nothing Then
                        cmd.BindByName = True
                        For Each param As OracleParameter In params
                            'cmd.Parameters.Add(New OracleParameter(param.ParameterName, param.OracleDbType, param.Value, param.Direction))
                            cmd.Parameters.Add(DirectCast(param.Clone(), OracleParameter))
                        Next
                    End If
                    Dim rowsAffected As Integer = cmd.ExecuteNonQuery()
                    cmd.Connection.Close()
                    logger.Debug(String.Format("{0} rows affected, sql: {1}, params: {2}", rowsAffected.ToString(), sql, Newtonsoft.Json.JsonConvert.SerializeObject(cmd.Parameters)))
                End Using
            End Using
            ClearOracleConnectionPoolsWhenNecessary(sql)
        Catch ex As Exception
            logger.Error(ex, "sql: " + sql)
            Throw
        End Try
    End Sub

    Private Shared Sub ClearOracleConnectionPoolsWhenNecessary(sql As String)
        Dim theSql As String = sql.ToLower()
        If theSql.Contains("alter table") OrElse
            theSql.Contains("drop column") Then
            OracleConnection.ClearAllPools()
            logger.Debug("connections in pools are cleared triggered by sql: " + sql)
        End If
    End Sub

    Public Shared Function OracleGetDataSetBySql(sql As String, Optional ByRef webObj As ZukamiLib.WebSession = Nothing) As DataSet
        Dim ds As New DataSet()
        Try
            Using con As New OracleConnection(oracleConnectionString)
                ' logger.Debug("StatementCacheSize: " + con.StatementCacheSize.ToString())
                Using cmd As OracleCommand = con.CreateCommand()
                    cmd.CommandTimeout = oracleCommandTimeoutInSeconds
                    cmd.CommandText = sql
                    cmd.CommandType = CommandType.Text
                    Dim da As New OracleDataAdapter(cmd)
                    Dim rowsAffected As Integer = da.Fill(ds)
                    logger.Debug(String.Format("{0} rows affected, sql: {1}", rowsAffected.ToString(), sql))
                End Using
            End Using
            ClearOracleConnectionPoolsWhenNecessary(sql)
        Catch ex As Exception
            logger.Error(ex, "sql: " + sql)
            If webObj Is Nothing Then
                Throw
            Else
                Dim msg As String = ex.ToString()
                If FromConfig("OracleDebug") = "true" Then
                    msg += ", sql: " + sql
                End If
                webObj.LastErrorFromExternal = msg
            End If
        End Try
        Return ds
    End Function

    Public Shared Function OracleGetDataTableBySql(sql As String) As DataTable
        Dim dt As New DataTable()
        Dim ds As DataSet = OracleGetDataSetBySql(sql)
        If ds.Tables.Count > 0 Then
            dt = ds.Tables(0)
        End If
        Return dt
    End Function


    Public Shared Sub OracleRenameTable(newTableName As String, oldTableName As String)
        If Not String.IsNullOrWhiteSpace(oldTableName) AndAlso Not String.IsNullOrWhiteSpace(newTableName) AndAlso oldTableName <> newTableName Then
            Dim sql As String = String.Format(" /* DDBD3858-BC79-4D0F-9F9C-3572F29DD823 */ ALTER TABLE ""{0}"" RENAME TO ""{1}"" ", oldTableName, newTableName)
            OracleRunSql(sql)
        Else
            logger.Debug("skip renaming. oldTableName: " + FormatData(oldTableName) + ", newTableName: " + FormatData(newTableName))
        End If
    End Sub

    Public Shared Function GetTableBindSource(listId As Guid, Optional throwsException As Boolean = True) As String
        Dim tableName As String = ""
        Dim sql As String = String.Format("select * from Lists where ListId = '{0}' ", listId.ToString())
        Dim dt As DataTable = GetDataTableBySql(sql)
        If dt.Rows.Count > 0 Then
            tableName = FormatData(dt.Rows(0).Item("TableBindSource"))
        End If
        If String.IsNullOrWhiteSpace(tableName) AndAlso throwsException Then
            Throw New Exception("failed to get tableName with listId: " + listId.ToString() + ", sql: " + sql)
        End If
        Return tableName
    End Function
    ' Public Shared Function GetDataTableBySql(sql As String) As DataTable
    '     Dim dt As New DataTable()
    ' 
    '     Dim _webobj As New ZukamiLib.WebSession(GetZukamiSettings)
    '     _webobj.OpenConnection()
    '     _webobj.CustomSQLCommand(sql)
    '     Dim ds As DataSet = _webobj.CustomSQLExecuteReturn
    '     _webobj.CloseConnection()
    ' 
    '     If Len(_webobj.LastError) > 0 Then
    '         Throw New System.Exception("Failed to get Dataset from sql: " + sql + ", last error: " + _webobj.LastError)
    '     End If
    ' 
    '     If ds IsNot Nothing AndAlso ds.Tables.Count > 0 Then
    '         dt = ds.Tables(0)
    '     Else
    '         Throw New System.Exception("Failed to get Dataset from sql: " + sql)
    '     End If
    ' 
    '     Return dt
    ' End Function
    Public Shared Function GetDataTableBySql(ByVal sql As String) As DataTable
        Dim ds As DataSet = New DataSet()
        Dim da As SqlDataAdapter = New SqlDataAdapter()
        Using trans As TransactionScope = New TransactionScope()
            Using conn As SqlConnection = New SqlConnection(GetDecryptedConnectionString())
                conn.Open()
                da = New SqlDataAdapter(sql, conn)
                da.Fill(ds, "table1")
                conn.Close()
            End Using
        End Using

        If ds.Tables.Count = 0 Then
            logger.Error("no datatable, sql: " & sql)
            Throw New System.Exception("no datatable, sql: " & sql)
        ElseIf ds.Tables(0).Rows.Count = 0 Then
            logger.Debug("no record, sql: " & sql)
        End If

        Return ds.Tables(0)
    End Function

    Public Shared Function GetDecryptedConnectionString() As String
        Return IIf(GlobalFunctions.FormatBoolean(AppSettings.Get("EncryptSQLConnection"), False) = True, GlobalFunctions.SimpleCrypt(GlobalFunctions.DecryptBase64(AppSettings.Get("ConnectionString"))), AppSettings.Get("ConnectionString"))
    End Function
    Public Shared Sub EnsureColumnExists(tableName As String, colName As String, colType As String)
        Try
            If OracleDBEnabled() Then
                OracleEnsureColumnExists(tableName, colName, colType)
            Else
                If Not DoesColumnExist(tableName, colName) Then
                    AddColumn(tableName, colName, colType)
                End If
            End If
        Catch ex As Exception
            logger.Error(ex, "tableName: " + tableName + ", colName: " + colName + ", colType: " + colType)
        End Try
    End Sub

    Private Shared Sub OracleDropColumn(tableName As String, colName As String)
        ' Dim sql As String = String.Format(
        '     " declare                                                                                         " + vbCrLf +
        '     "     colExists number := 0;                                                                      " + vbCrLf +
        '     "     tblName varchar2(1000) := '{0}';                                                            " + vbCrLf +
        '     "     colName varchar2(1000) := '{1}';                                                            " + vbCrLf +
        '     " begin                                                                                           " + vbCrLf +
        '     "     select count(*) into colExists                                                              " + vbCrLf +
        '     "     from user_tab_cols                                                                          " + vbCrLf +
        '     "     where upper(column_name) = upper(colName)                                                   " + vbCrLf +
        '     "     and upper(table_name) = upper(tblName);                                                     " + vbCrLf +
        '     "                                                                                                 " + vbCrLf +
        '     "     if (colExists > 0) then                                                                     " + vbCrLf +
        '     "         execute immediate 'alter table ""' || tblName || '"" drop column ""' || colName || '""'; " + vbCrLf +
        '     "     end if;                                                                                     " + vbCrLf +
        '     " end;                                                                                            " + vbCrLf,
        '     tableName, colName
        ' )
        Dim sql As String = String.Format(" alter table ""{0}"" drop column ""{1}"" ", tableName, colName)
        If OracleDoesColumnExist(tableName, colName) Then
            OracleRunSql(sql)
        End If
    End Sub
    Private Shared Function OracleDoesColumnExist(tableName As String, colName As String) As Boolean
        Dim exists As Boolean = False
        If Not String.IsNullOrWhiteSpace(tableName) AndAlso Not String.IsNullOrWhiteSpace(colName) Then
            Dim sql As String = String.Format("select DoesColumnExist('{0}','{1}') ""exists"" from dual ", tableName, colName)
            Dim dt As DataTable = OracleGetDataTableBySql(sql)
            If dt.Rows.Count > 0 Then
                exists = FormatBoolean(dt.Rows(0).Item("exists"))
            End If
        End If
        logger.Debug("tableName: " + FormatData(tableName) + ", colName: " + FormatData(colName) + ", exists: " + exists.ToString())
        Return exists
    End Function
    Private Shared Sub OracleEnsureColumnExists(tableName As String, colName As String, colType As String)
        ' Dim sql As String = String.Format(
        '     " Declare                                                                                                  " + vbCrLf +
        '     "     colExists number := 0;                                                                               " + vbCrLf +
        '     "     tblName varchar2(1000) := '{0}';                                                                     " + vbCrLf +
        '     "     colName varchar2(1000) := '{1}';                                                                     " + vbCrLf +
        '     "     colType varchar2(1000) := '{2}';                                                                     " + vbCrLf +
        '     " begin                                                                                                    " + vbCrLf +
        '     "     select count(*) into colExists                                                                       " + vbCrLf +
        '     "     from user_tab_cols                                                                                   " + vbCrLf +
        '     "     where upper(column_name) = upper(colName)                                                            " + vbCrLf +
        '     "     and upper(table_name) = upper(tblName);                                                              " + vbCrLf +
        '     "                                                                                                          " + vbCrLf +
        '     "     if (colExists = 0) then                                                                              " + vbCrLf +
        '     "         execute immediate 'alter table ""' || tblName || '"" add (""' || colName || '"" ' || colType || ')'; " + vbCrLf +
        '     "     end if;                                                                                              " + vbCrLf +
        '     " end;                                                                                                     " + vbCrLf,
        '     tableName, colName, colType
        ' )
        Dim sql As String = String.Format("alter table ""{0}"" add (""{1}"" {2})", tableName, colName, colType)
        If Not String.IsNullOrWhiteSpace(tableName) AndAlso Not String.IsNullOrWhiteSpace(colName) AndAlso Not String.IsNullOrWhiteSpace(colType) AndAlso Not OracleDoesColumnExist(tableName, colName) Then
            OracleRunSql(sql)
        Else
            logger.Debug("skip sql: " + sql)
        End If
    End Sub

    Public Shared Sub ModifyTableForSync(ByRef Webobj As ZukamiLib.WebSession, ByVal TableBound As String, ByVal EnableForSync As Boolean)
        If OracleDBEnabled() Then
            OracleModifyTableForSync(TableBound, EnableForSync)
        Else
            If EnableForSync = True Then
                Webobj.CustomSQLCommand("ALTER TABLE [" & TableBound & "] ADD [Cloud_DateLastModified] DATETIME")
            Else
                Webobj.CustomSQLCommand("ALTER TABLE [" & TableBound & "] DROP COLUMN [Cloud_DateLastModified]")
            End If
            Webobj.CustomClearParameters()
            Webobj.CustomSQLExecute()
        End If
    End Sub
    Private Shared Sub OracleModifyTableForSync(ByVal TableBound As String, ByVal EnableForSync As Boolean)
        ' Dim sql As String = ""
        If EnableForSync = True Then
            ' sql = "ALTER TABLE """ & TableBound & """ ADD ""Cloud_DateLastModified"" DATE "
            OracleEnsureColumnExists(TableBound, "Cloud_DateLastModified", "DATE")
        Else
            ' sql = "ALTER TABLE """ & TableBound & """ DROP COLUMN ""Cloud_DateLastModified"" "
            OracleDropColumn(TableBound, "Cloud_DateLastModified")
        End If
        ' OracleRunSql(sql)
    End Sub
    Public Shared Sub ListItems_Delete(ByVal ListItemID As Guid, ByVal ListID As Guid, ByRef webobj As ZukamiLib.WebSession)
        Dim alterTable As Boolean = True
        If OracleDBEnabled() Then
            alterTable = False
            OracleDropColumn(GetTableBindSource(ListID), GetFieldInfo(ListID, ListItemID, "FieldBindSource"))
        End If
        webobj.ListItems_Delete(ListItemID, ListID, alterTable)
    End Sub

    Private Shared Sub Subforms_Insert(ByVal ListName As String, ByVal ListCaption As String, ByVal ListID As Guid, ByVal ParentListID As Guid, ByVal Description As String, ByVal TableSource As String, ByVal AppID As Guid, web As WebSession)
        Dim createTable As Boolean = True
        If OracleDBEnabled() Then
            createTable = False
            TableSource = OracleCreateSubTableWithAutoRenaming(OracleGetSubTableName(ListName))
        End If
        web.Subforms_Insert(ListName, ListCaption, ListID, ParentListID, Description, TableSource, AppID, createTable)
    End Sub

    Private Shared Function OracleGetSubTableName(listName As String) As String
        Return "SF_" + listName
    End Function

    Private Shared Sub OracleAlterColumn(tableName As String, colName As String, colType As String, newColName As String, newColType As String)
        Dim sql As String = ""
        sql = String.Format("ALTER TABLE ""{0}"" MODIFY ""{1}"" {2}", tableName, colName, newColType)
        If Not String.IsNullOrWhiteSpace(colType) AndAlso colType.ToUpper() <> newColType.ToUpper() AndAlso OracleDoesColumnExist(tableName, colName) Then
            OracleRunSql(sql)
        Else
            logger.Debug("sql not running: " + sql)
        End If

        sql = String.Format("ALTER TABLE ""{0}"" RENAME COLUMN ""{1}"" to ""{2}"" ", tableName, colName, newColName)
        If Not String.IsNullOrWhiteSpace(colName) AndAlso colName <> newColName AndAlso OracleDoesColumnExist(tableName, colName) Then
            OracleRunSql(sql)
        Else
            logger.Debug("sql not running: " + sql)
        End If
    End Sub

    Public Shared Sub ListItems_Update(ByVal FieldCaption As String, ByVal FieldType As Integer, ByVal FieldOrder As Integer, ByVal ListItemID As Guid, ByVal ListID As Guid,
                                       ByVal FieldBindSource As String, ByVal FieldRemarks As String, ByVal FieldArguments As String, ByVal IsCompulsory As Boolean, ByVal AdditionalFlag As Boolean,
                                       ByVal Enabled As Boolean, ByVal CSS As String, ByVal LabelCSS As String, web As WebSession)
        Dim AlterTable As Boolean = True
        Dim gotError As Boolean = False
        If OracleDBEnabled() Then
            AlterTable = False
            Try
                OracleAlterColumn(
                GetTableBindSource(ListID),
                GetFieldInfo(ListID, ListItemID, "FieldBindSource"),
                OracleGetFieldType(GetFieldInfo(ListID, ListItemID, "FieldType")),
                FieldBindSource,
                OracleGetFieldType(FieldType))
            Catch ex As Exception
                web.LastErrorFromExternal = ex.ToString()
                gotError = True
            End Try
        End If
        If Not gotError Then
            web.ListItems_Update(FieldCaption, FieldType, FieldOrder, ListItemID, ListID, FieldBindSource, FieldRemarks, FieldArguments, IsCompulsory, AdditionalFlag, Enabled, CSS, LabelCSS, AlterTable)
        End If
    End Sub

    Public Shared Function FormItems_Update(ByVal FieldName As String, ByVal FieldCaption As String, ByVal FieldType As Integer, ByVal ListItemID As Guid, ByVal ListID As Guid,
                                            ByVal FieldBindSource As String, ByVal FieldRemarks As String, ByVal FieldArguments As String, ByVal AdditionalFlag As Boolean, ByVal Enabled As Boolean,
                                            ByVal CSS As String, ByVal LabelCSS As String, ByVal FocusCSS As String, ByVal ReadonlyCSS As String, Hidden As Boolean, web As WebSession) As String
        Dim AlterTable As Boolean = True
        Dim errMsg As String = ""
        Try
            'Using scope As New TransactionScope()
            If OracleDBEnabled() Then
                AlterTable = False
                Dim newColName As String = FieldBindSource
                If String.IsNullOrWhiteSpace(newColName) Then
                    newColName = FieldName
                End If
                OracleAlterColumn(
                        GetTableBindSource(ListID),
                        GetFieldInfo(ListID, ListItemID, "FieldBindSource"),
                        OracleGetFieldType(GetFieldInfo(ListID, ListItemID, "FieldType")),
                        newColName,
                        OracleGetFieldType(FieldType))
            End If
            web.FormItems_Update(FieldName, FieldCaption, FieldType, ListItemID, ListID, FieldBindSource, FieldRemarks, FieldArguments, AdditionalFlag, Enabled, CSS, LabelCSS, FocusCSS, ReadonlyCSS, Hidden, AlterTable)
            If web.LastError.Length > 0 Then
                Throw New Exception(web.LastError)
            End If
            'scope.Complete()
            'End Using
        Catch ex As Exception
            web.LastErrorFromExternal = ex.ToString()
            errMsg = ex.ToString()
        End Try
        Return errMsg
    End Function


    Private Shared Function GetFieldInfo(ListID As Guid, listItemID As Guid, fieldName As String) As String
        Dim fieldBindSource As String = ""
        Dim sql As String = String.Format("select top 10 * from ListItems where ListId = '{0}' and ListItemId = '{1}' ", ListID.ToString(), listItemID.ToString())
        Dim dt As DataTable = GetDataTableBySql(sql)
        If dt.Rows.Count > 0 Then
            fieldBindSource = FormatData(dt.Rows(0).Item(fieldName))
        End If
        If String.IsNullOrWhiteSpace(fieldBindSource) Then
            Throw New Exception("failed to find fieldBindSource, sql: " + sql)
        End If
        Return fieldBindSource
    End Function

    Public Shared Sub AddColumn(tableName As String, colName As String, colType As String)
        Dim sql As String = String.Format("ALTER TABLE [{0}] ADD [{1}] {2}",
                                          tableName.Replace("'", "''"),
                                          colName.Replace("'", "''"),
                                          colType.Replace("'", "''"))
        RunSql(sql)
    End Sub

    Public Shared Function DoesColumnExist(tableName As String, colName As String) As Boolean
        Dim exists As Boolean = False
        Dim sql As String = String.Format(
            " IF COL_LENGTH(N'{0}', N'{1}') IS NOT NULL " +
            " BEGIN                                     " +
            "     select 'Yes' 'Column Exists'          " +
            " END                                       " +
            " ELSE                                      " +
            " BEGIN                                     " +
            "     select 'No' 'Column Exists'           " +
            " END                                       ",
            FormatData(tableName).Replace("'", "''"),
            FormatData(colName).Replace("'", "''")
        )
        Dim dt As DataTable = GetDataTableBySql(sql)
        For Each r As DataRow In dt.Rows
            If r.Item("Column Exists") = "Yes" Then
                exists = True
            End If
        Next
        logger.Debug("tableName: " + FormatData(tableName) + ", colName: " + FormatData(colName) + ", exists: " + exists.ToString())
        Return exists
    End Function

    ' "###,###,###,###,##0.00"
    Public Shared Function GetMoneyDisplayFormat(Optional WithComma As Boolean = True) As String
        Dim format As String = "###,###,###,###,###,##0."
        Dim precision As Integer = CInt(FromConfig("MoneyPrecision", 2))
        For i As Integer = 1 To precision
            format += "0"
        Next
        If Not WithComma Then
            format.Replace(",", "")
        End If
        'logger.Debug("precision: " + precision.ToString() + ", WithComma: " + WithComma.ToString() + ", format: " + format)
        Return format
    End Function

    ' 0.00
    Public Shared Function GetMoneyZeroString() As String
        Dim s As String = "0."
        Dim precision As Integer = CInt(FromConfig("MoneyPrecision", 2))
        For i As Integer = 1 To precision
            s += "0"
        Next
        Return s
    End Function

    ''' <summary>
    ''' Resize the image to the specified width and height. https://stackoverflow.com/questions/1922040/resize-an-image-c-sharp
    ''' </summary>
    ''' <param name="image">The image to resize.</param>
    ''' <param name="width">The width to resize to.</param>
    ''' <param name="height">The height to resize to.</param>
    ''' <returns>The resized image.</returns>
    Public Shared Function ResizeImage(image As System.Drawing.Image, width As Integer, height As Integer) As System.Drawing.Bitmap
        logger.Debug(String.Format("resize, {0}, {1} -> {2}, {3}",
                                   image.Width.ToString(), image.Height.ToString(), width.ToString(), height.ToString()))
        Dim destRect = New System.Drawing.Rectangle(0, 0, width, height)
        Dim destImage = New System.Drawing.Bitmap(width, height)

        destImage.SetResolution(image.HorizontalResolution, image.VerticalResolution)

        Using graphics__1 = System.Drawing.Graphics.FromImage(destImage)
            graphics__1.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy
            graphics__1.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality
            graphics__1.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic
            graphics__1.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality
            graphics__1.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality

            Using wrapMode__2 = New System.Drawing.Imaging.ImageAttributes()
                wrapMode__2.SetWrapMode(System.Drawing.Drawing2D.WrapMode.TileFlipXY)
                graphics__1.DrawImage(image, destRect, 0, 0, image.Width, image.Height,
                System.Drawing.GraphicsUnit.Pixel, wrapMode__2)
            End Using
        End Using

        Return destImage
    End Function
    ' Public Shared Sub HelpFlaskViewStateOptimizerToDeleteFiles()
    '     If Get_FlaskViewStateOptimizer_StorageMethod() = "File" Then
    '         Dim rootFolder As String = Get_FlaskViewStateOptimizer_StoragePath()
    '         FlaskViewStateOptimizer_RemoveNormalFiles(rootFolder)
    '     End If
    ' End Sub
    ' Private Sub FlaskViewStateOptimizer_RemoveNormalFiles(path As String)
    '     Try
    '         Dim d As New DirectoryInfo(path)
    '         Dim files As FileSystemInfo() = d.GetFileSystemInfos("*.viewstate")
    '         If files IsNot Nothing AndAlso files.Length > 0 Then
    '             Dim now As DateTime = DateTime.Now
    ' 
    '             For Each file As FileSystemInfo In files
    '                 Dim lastWrite As DateTime = file.LastWriteTime
    '                 If ViewStateSettings.ViewStateCleanupInterval > TimeSpan.Zero Then
    '                     lastWrite = lastWrite.Add(ViewStateSettings.ViewStateCleanupInterval)
    '                 Else
    '                     lastWrite = lastWrite.AddHours(Me.ViewStateSettings.ViewStateFilesMaxAge)
    '                 End If
    '                 If lastWrite < now Then
    '                     Try
    '                         file.Delete()
    '                     Catch ex As System.Security.SecurityException
    '                         ' denied
    '                         logger.Warn(ex, String.Format("Access is denied to file {0}", file.Name))
    '                     Catch ex As IOException
    '                         ' file is open
    '                         logger.Warn(ex, String.Format("The file {0} is being used by another process...", file.Name))
    '                     Catch ex As Exception
    '                         logger.Warn(ex)
    '                     End Try
    ' 
    '                 End If
    '             Next
    ' 
    '         End If
    '     Catch ex As Exception
    '         logger.Warn(ex)
    '     End Try
    ' 
    ' 
    ' End Sub

    Public Shared Sub VerifySessionId()
        Try
            If Not FormatBoolean(FromConfig("AlwaysVerifySessionIdInLoginCookie", "false")) OrElse IsPageExcludedFromVerifySessionId() Then
                'logger.Debug("skip")
            Else
                'logger.Debug("start")
                'If GetSessionIdFromCookie() <> GetSessionIdFromServerSession() Then
                If Not SessionIdExistsInDB(GetSessionIdFromCookie()) Then
                    Dim msg As String = "for security reason you have been disconnected, please login again"
                    logger.Debug(msg)
                    Navigator.Navigate("Logout", msg)
                Else
                    'logger.Debug("session id match")
                End If
            End If
        Catch ex As ThreadAbortException
            ' ignore
        Catch ex As Exception
            logger.Error(ex)
        End Try
    End Sub

    Private Shared Function SessionIdExistsInDB(sessionId As String) As Boolean
        Dim exists As Boolean = False
        Dim sql As String = String.Format("select * from [LoginUserSessionID] where (userid = '{0}' or '{0}' = '') and sessionId = '{1}' ",
                                          GetCurrentUserIdFromCookie().Replace("'", "''"),
                                          sessionId.Replace("'", "''"))
        Dim dt As DataTable = GetDataTableBySql(sql)
        If dt.Rows.Count > 0 Then
            exists = True
        Else
            logger.Debug("not exists, sql: " + sql)
        End If
        Return exists
    End Function

    Private Shared Function GetCurrentUserIdFromCookie() As String
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim userId As String = ""
        If _settings IsNot Nothing Then
            userId = _settings.CurrentUserGUID.ToString()
        End If
        Return userId
    End Function
    Private Shared Function GetCurrentSessionIdFromCookie() As String
        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim sessionId As String = ""
        If _settings IsNot Nothing Then
            sessionId = _settings.SessionId
        End If
        Return sessionId
    End Function

    Private Shared Function IsPageExcludedFromVerifySessionId() As Boolean
        Dim excluded As Boolean = False
        Dim fileName As String = System.IO.Path.GetFileName(HttpContext.Current.Request.PhysicalPath)
        Dim listOfExcludedPages As String = "Login.aspx,Logout.aspx,AppLogout.aspx"
        If listOfExcludedPages.ToLower().Contains(fileName.ToLower()) Then
            excluded = True
        End If
        'logger.Debug("file name: " + fileName + ", excluded: " + excluded.ToString())
        Return excluded
    End Function

    'Private Shared Function GetSessionIdFromServerSession() As String
    '    Dim sid As String = FormatData(HttpContext.Current.Session("SessionIdFromFormsAuthenticationCookie"))
    '    logger.Debug("sid: " + sid)
    '    Return sid
    'End Function

    Private Shared Function GetSessionIdFromCookie() As String
        Dim ck As HttpCookie = GetCookieByName(FormsAuthentication.FormsCookieName())
        Dim sid As String = GetSessionIdFromAuthenticationCookie(ck)
        'logger.Debug("sid: " + sid)
        Return sid
    End Function

    Public Shared Sub IssueFormsAuthenticationCookieAndSetSessionId(ck As HttpCookie)
        logger.Debug("start")
        Try
            If ck Is Nothing Then
                logger.Debug("ck is nothing, skip")
            Else
                HttpContext.Current.Response.Cookies.Add(ck)
                'HttpContext.Current.Session("SessionIdFromFormsAuthenticationCookie") = GetSessionIdFromAuthenticationCookie(ck)
                SaveSessionIdToDB(GetSessionIdFromAuthenticationCookie(ck))
                logger.Debug("done: cookie added to http response & same session id copied to server session")
            End If
        Catch ex As Exception
            logger.Error(ex)
            'HttpContext.Current.Session.Remove("SessionIdFromFormsAuthenticationCookie")
        End Try
    End Sub

    Private Shared Sub SaveSessionIdToDB(sessionId As String)
        Dim userId As String = GetCurrentUserIdFromCookie()
        Dim sql As String = String.Format(
            " insert into [LoginUserSessionID] (userId, sessionId, [date created]) " + vbCrLf +
            " values('{0}','{1}', getdate()) ",
            userId.Replace("'", "''"),
            sessionId.Replace("'", "''")
        )
        RunSql(sql)
    End Sub
    Private Shared Sub RemovedSessionIdFromDB(userId As String, sessionId As String)
        Dim sql As String = String.Format(
            " delete from [LoginUserSessionID] where userId = '{0}' and sessionId = '{1}' ",
            userId.Replace("'", "''"),
            sessionId.Replace("'", "''")
        )
        RunSql(sql)
    End Sub

    Private Shared lastClearupTime As DateTime = DateTime.MinValue
    Private Shared Sub ClearupSessionIdFromDB()
        If DateDiff(DateInterval.Hour, lastClearupTime, Now) > 1 Then
            logger.Debug("start clearup")
            lastClearupTime = Now
            Dim timeoutHours As Integer = Integer.Parse(FromConfig("SessionIdInLoginCookieTimeout_InHours", "12"))
            Dim sql As String = String.Format("delete from [LoginUserSessionID] where datediff(hour, [date created], getdate()) > {0} ",
                                              timeoutHours.ToString())
            RunSql(sql)
        Else
            logger.Debug("skip, lastClearupTime: " + FormatDateTime(lastClearupTime))
        End If
    End Sub

    Public Shared Function GetSessionIdFromAuthenticationCookie(ck As HttpCookie) As String
        Dim sid As String = ""
        Try
            If ck IsNot Nothing Then
                Dim _fticket As FormsAuthenticationTicket = FormsAuthentication.Decrypt(ck.Value)
                Dim _settings As ZukamiLib.ZukamiSettings = ZukamiLib.ZukamiSettings.Liquify(_fticket.UserData)
                sid = _settings.SessionId
            End If
        Catch ex As Exception
            logger.Error(ex)
        End Try
        Return sid
    End Function


    Public Shared Sub DataTableToExcel(dt As DataTable, file As String)
        Try
            Dim wb As XLWorkbook = New XLWorkbook()
            wb.Worksheets.Add(dt, "Sheet1")
            wb.Worksheets(0).Style.Alignment.WrapText = True
            wb.SaveAs(file)
        Catch ex As Exception
            logger.Error(ex, "file: " + FormatData(file))
        End Try
    End Sub
    Public Shared Sub DataTableToCSV(dt As DataTable, file As String)
        Try
            Using csv = New CsvWriter(New StreamWriter(file, False))
                For Each column As DataColumn In dt.Columns
                    csv.WriteField(column.ColumnName)
                Next

                csv.NextRecord()

                For Each row As DataRow In dt.Rows
                    For i = 0 To dt.Columns.Count - 1
                        csv.WriteField(row(i))
                    Next
                    csv.NextRecord()
                Next
            End Using
        Catch ex As Exception
            logger.Error(ex, "failed in DataTableToCSV")
        End Try
    End Sub

    Public Shared Function GetVerboseTime(ByVal Time As Integer) As String
        If Time > 1440 Then
            If GlobalFunctions.ISSPRING = True Then
                If (CDbl(Time) / 1440) > 5 Then
                    Return (Format(Math.Truncate(CDbl(Time) / 1440), "###,###,##0")) & " day(s)"
                Else
                    Return (Format(CDbl(Time) / 1440, "###,###,##0")) & " day(s)"
                End If

            Else
                Return (Format(CDbl(Time) / 1440, "###,###,##0")) & " day(s)"
            End If

            'Dim _str As String = ""
            '_str = (CDbl(Time) / 1440).ToString
            '_str = _str.Substring(0, _str.IndexOf("."))
            'Return (Format(_str, "###,###,##0")) & " day(s)"
        ElseIf Time > 60 Then
            Return (Format(CDbl(Time) / 60, "###,###,##0")) & " hour(s)"
        ElseIf Time = 0 Then
            Return "No deadline"
        ElseIf Time = -1 Then
            Return "Expired"
        Else
            Return Time & " min(s)"
        End If
    End Function

    Public Shared Function GetAppIconUrl(AppIcon As String, AppCustomIcon As String) As String
        Dim url As String = "images/icoApp.png"
        If Not String.IsNullOrWhiteSpace(AppCustomIcon) Then
            ' f04fd8e2-fa44-4ec6-856a-346a59ab9fe7;NU.png -> uploads/f04fd8e2-fa44-4ec6-856a-346a59ab9fe7/NU.png
            url = "uploads/" + AppCustomIcon.Replace(";", "/")
        ElseIf Not String.IsNullOrWhiteSpace(AppIcon) Then
            ' ~\images\icons\AppSet3\1.gif -> images/icons/AppSet3/1.gif
            url = ConverPathFromDotNetToWeb(AppIcon)
        End If
        Return url
    End Function

    ' ~\images\icons\AppSet3\1.gif -> images/icons/AppSet3/1.gif
    Public Shared Function ConverPathFromDotNetToWeb(path As String) As String
        Return path.Replace("~\", "").Replace("\", "/")
    End Function
    Public Shared Sub UserPasswordHistory_Insert(ByVal username As String, ByVal password As String, ByVal isNew As Boolean)


        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _web As New ZukamiLib.WebSession(_settings)
        _web.OpenConnection()

        _web.UserPasswordHistory_Insert(username, password)
        If isNew = False Then
            _web.History_Insert("UserUpdated - " & username, WebconfigSettings.GetZukamiSettings().CurrentFullName, "0", HttpContext.Current.Request.ServerVariables("REMOTE_HOST"), HttpContext.Current.Request.UserHostAddress, 0, Guid.NewGuid(), "User details updated.")

        Else
            _web.History_Insert("UserCreated - " & username, WebconfigSettings.GetZukamiSettings().CurrentFullName, "0", HttpContext.Current.Request.ServerVariables("REMOTE_HOST"), HttpContext.Current.Request.UserHostAddress, 0, Guid.NewGuid(), "New user created.")

        End If

        _web.CloseConnection()

    End Sub
    Public Shared Function GetAppsOfCurrentUser() As DataSet

        Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
        Dim _web As New ZukamiLib.WebSession(_settings)
        _web.OpenConnection()

        Dim _iscloudinstance As Integer = GlobalFunctions.FormatInteger(_web.ServerVariables_Get("ISCLOUDINSTANCE"), 0)

        Dim _set As DataSet = _web.Apps_Get()
        _web.CloseConnection()

        If _iscloudinstance = 1 Then
            'remove all instances
            Dim _counter As Integer
            Do While _counter <= _set.Tables(0).Rows.Count - 1
                Dim _aid As String = GlobalFunctions.FormatData(_set.Tables(0).Rows(_counter).Item("ID"))
                If StrComp(_aid, "95c36531-afba-410d-abd1-2bc7aa94967a", CompareMethod.Text) = 0 Or
                StrComp(_aid, "a05eca48-bb05-43e8-ae8e-b1845dc0400c", CompareMethod.Text) = 0 Or
                StrComp(_aid, "d81d75cf-8ffc-415d-8090-96c98d041c44", CompareMethod.Text) = 0 Then
                    _set.Tables(0).Rows.RemoveAt(_counter)
                Else
                    _counter += 1
                End If
            Loop
            _set.Tables(0).AcceptChanges()
        End If
        Return _set
    End Function


    Public Shared Sub ResponseWithString(s As String)
        HttpContext.Current.Response.ClearContent()
        HttpContext.Current.Response.Write(s)
        HttpContext.Current.Response.End()
    End Sub

    Public Shared Function ControlToHtml(ctl As Control) As String
        Dim html As String = ""
        Try
            Dim sb As StringBuilder = New StringBuilder()
            Dim tw As StringWriter = New StringWriter(sb)
            Dim hw As HtmlTextWriter = New HtmlTextWriter(tw)
            ctl.RenderControl(hw)
            html = sb.ToString()
        Catch ex As Exception
            logger.Error(ex, "failed to generate html")
        End Try
        Return html
    End Function

    Public Shared Function IsWebAPIMode() As Boolean
        Dim result As Boolean = False
        Dim WebAPIMode As String = GlobalFunctions.FormatData(HttpContext.Current.Request.QueryString("WebAPIMode"))
        If WebAPIMode = "Yes" Then
            result = True
        End If
        logger.Debug("result: " + result.ToString())
        Return result
    End Function

    Public Shared Sub SetCurrentRequestAsMobileVersion()
        If HttpContext.Current.Items.Contains("IsMobileVersion") Then
            HttpContext.Current.Items.Remove("IsMobileVersion")
        End If
        HttpContext.Current.Items.Add("IsMobileVersion", "Yes")
    End Sub
    Public Shared Function IsCurrentRequestMobileVersion() As Boolean
        Dim result As Boolean = False
        If HttpContext.Current.Items.Contains("IsMobileVersion") Then
            If FormatData(HttpContext.Current.Items.Item("IsMobileVersion")) = "Yes" Then
                result = True
            End If
        End If
        'logger.Debug("result: " + result.ToString())
        Return result
    End Function
    Public Shared Function getLoginDetails(ByRef WebSessionObj As ZukamiLib.WebSession, ByVal username As String) As String
        Try
            Dim _text As String = ""
            Dim _RecordSet As DataSet
            Dim _sql As String = "SELECT top 2 * FROM History Where CONVERT(nvarchar(Max),[Description])='Login attempt' and [user]='" & Replace(username, "'", "''") & "' and [user] <> 'admin' order by [timestamp] desc"
            WebSessionObj.CustomSQLCommand(_sql)
            WebSessionObj.CustomClearParameters()
            _RecordSet = WebSessionObj.CustomSQLExecuteReturn()
            Dim _dt As Date
            If _RecordSet.Tables(0).Rows.Count >= 2 Then
                ' If _RecordSet.Tables(0).Rows.Count = 2 Then
                _dt = _RecordSet.Tables(0).Rows(1).Item("timestamp")
                If _RecordSet.Tables(0).Rows(1).Item("Success") = False Then
                    _text = _text & " Last Unsuccessful Login:" & _dt.ToString("dd/MM/yyyy hh:mm")
                    _sql = "SELECT top 2 * FROM History Where [user]='" & Replace(username, "'", "''") & "' and [success]=1 order by [timestamp] desc"
                    WebSessionObj.CustomSQLCommand(_sql)
                    WebSessionObj.CustomClearParameters()
                    _RecordSet = WebSessionObj.CustomSQLExecuteReturn()
                    If _RecordSet.Tables(0).Rows.Count >= 2 Then
                        _dt = _RecordSet.Tables(0).Rows(1).Item("timestamp")
                        _text = _text & " Last Successful Login:" & _dt.ToString("dd/MM/yyyy hh:mm")

                    End If
                Else
                    _text = _text & " Last Successful Login:" & _dt.ToString("dd/MM/yyyy hh:mm")
                End If

                'End If
            End If
            Return _text
        Catch ex As Exception
            Return ""
        End Try

    End Function
    Public Shared Sub Insert_Permission_Audit(ByRef _web As ZukamiLib.WebSession, ByVal ResourceID As String, ByVal GroupID As String, ByVal Permission As String, ByVal Action As String, ByVal ResourceType As String)
        '  Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        _web.CustomSQLCommand("INSERT INTO [Permissions_Audit](ResourceID,GroupID,Permission,[Action],ResourceType,[Date]) Values('" & ResourceID & "','" & GroupID & "','" & Permission & "','" & Action & "','" & ResourceType & "',getdate()) ")
        _web.CustomSQLExecuteReturn()
        ' _web.CloseConnection()
        '_web = Nothing
    End Sub

    Public Shared Sub Insert_Permission_Audit_Delete(ByRef _web As ZukamiLib.WebSession, ByVal GUIDs As String, ByVal ResourceType As String)
        Dim _sql As String = "Select * from [Permissions] WHERE PermID IN (" + GUIDs + ")"
        Dim _RecordSet As DataSet
        Dim i As Integer = 0
        'Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        ' _web.OpenConnection()
        _web.CustomSQLCommand(_sql)
        _web.CustomClearParameters()
        _RecordSet = _web.CustomSQLExecuteReturn()
        If _RecordSet IsNot Nothing AndAlso _RecordSet.Tables(0).Rows.Count > 0 Then
            For i = 0 To _RecordSet.Tables(0).Rows.Count - 1
                _web.CustomSQLCommand("INSERT INTO [Permissions_Audit](ResourceID,GroupID,Permission,[Action],ResourceType,[Date]) Values('" & _RecordSet.Tables(0).Rows(i).Item("ResourceID").ToString() & "','" & _RecordSet.Tables(0).Rows(i).Item("GroupID").ToString() & "','" & _RecordSet.Tables(0).Rows(i).Item("Permission").ToString() & "','Delete','" & ResourceType & "',getdate()) ")
                _web.CustomSQLExecuteReturn()
            Next
        End If

        '_web.CloseConnection()
        '_web = Nothing
    End Sub

    Protected Overrides Sub Finalize()
        MyBase.Finalize()
    End Sub
    Public Shared Function HashPassword(ByVal password As String) As String
        If GlobalFunctions.FromConfig("EncryptPasswordWithPBKDF2") = "true" Then
            Return OneWayHash_PBKDF2(password)
        Else
            Return OneWayHash(password)
        End If
    End Function
    Public Shared Function OneWayHash_PBKDF2(ByVal password As String) As String
        Dim cryptoProvider = New RNGCryptoServiceProvider()
        Dim salt As Byte() = New Byte(23) {}
        cryptoProvider.GetBytes(salt)
        Dim hash = GetPbkdf2Bytes(password, salt, Pbkdf2Iterations, HashByteSize)
        Return Pbkdf2Iterations & ":" & Convert.ToBase64String(salt) & ":" + Convert.ToBase64String(hash)
    End Function

    Public Shared Function ValidatePassword(ByVal password As String, ByVal correctHash As String, Optional AutoLogin As Boolean = False) As Boolean
        logger.Debug("start")
		If AutoLogin = True AndAlso WebconfigSettings.AllowDMSLogin = True Then
            Return True
        End If
        If GlobalFunctions.FromConfig("EncryptPasswordWithPBKDF2") = "true" Then
            Return ValidatePassword_PBKDF2(password, correctHash)
        Else
            Return ValidatePassword_OneWayHash(password, correctHash)
        End If
    End Function
    Public Shared Function ValidatePassword_OneWayHash(ByVal password As String, ByVal correctHash As String) As Boolean
        Try
            Dim testHash As String = OneWayHash(password)
            Return (testHash = correctHash)
        Catch ex As Exception
            Return False
        End Try
    End Function
    Public Shared Function ValidatePassword_PBKDF2(ByVal password As String, ByVal correctHash As String) As Boolean
        Try
            Dim delimiter As Char() = {":"c}
            Dim split = correctHash.Split(delimiter)
            Dim iterations = Int32.Parse(split(IterationIndex))
            Dim salt = Convert.FromBase64String(split(SaltIndex))
            Dim hash = Convert.FromBase64String(split(Pbkdf2Index))
            Dim testHash = GetPbkdf2Bytes(password, salt, iterations, hash.Length)
            Return SlowEquals(hash, testHash)
        Catch ex As Exception
            Return False
        End Try

    End Function

    Private Shared Function SlowEquals(ByVal a As Byte(), ByVal b As Byte()) As Boolean

        Dim diff = CUInt(a.Length) Xor CUInt(b.Length)
        Dim i As Integer = 0

        While i < a.Length AndAlso i < b.Length
            diff = diff Or CUInt((a(i) Xor b(i)))
            i += 1
        End While

        Return diff = 0
    End Function

    Private Shared Function GetPbkdf2Bytes(ByVal password As String, ByVal salt As Byte(), ByVal iterations As Integer, ByVal outputBytes As Integer) As Byte()
        Dim pbkdf2 = New Rfc2898DeriveBytes(password, salt)
        pbkdf2.IterationCount = iterations
        Return pbkdf2.GetBytes(outputBytes)
    End Function
    Private Shared Function getString(ByVal b As Byte()) As String
        Return Encoding.UTF8.GetString(b)
    End Function
    Private Shared Function Encrypt(ByVal data As Byte(), ByVal key As Byte()) As Byte()
        Using csp As AesCryptoServiceProvider = New AesCryptoServiceProvider()
            csp.KeySize = 256
            csp.BlockSize = 128
            csp.Key = key
            csp.Padding = PaddingMode.PKCS7
            csp.Mode = CipherMode.ECB
            Dim encrypter As ICryptoTransform = csp.CreateEncryptor()
            Return encrypter.TransformFinalBlock(data, 0, data.Length)
        End Using
    End Function

    Private Shared Function Decrypt(ByVal data As Byte(), ByVal key As Byte()) As Byte()
        Using csp As AesCryptoServiceProvider = New AesCryptoServiceProvider()
            csp.KeySize = 256
            csp.BlockSize = 128
            csp.Key = key
            csp.Padding = PaddingMode.PKCS7
            csp.Mode = CipherMode.ECB
            Dim decrypter As ICryptoTransform = csp.CreateDecryptor()
            Return decrypter.TransformFinalBlock(data, 0, data.Length)
        End Using
    End Function
    Public Shared Function AESEncrypt(ByVal dataVal As String) As String
        Dim data As Byte() = Encoding.UTF8.GetBytes(dataVal)
        Dim key As Byte() = {7, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8}
        Dim enc As Byte() = Encrypt(data, key)
        Return getString(enc)
    End Function
    Public Shared Function AESDecrypt(ByVal dataVal As String) As String
        Dim data As Byte() = Encoding.UTF8.GetBytes(dataVal)
        Dim key As Byte() = {7, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8}
        Dim dec As Byte() = Decrypt(data, key)
        Return getString(dec)
    End Function
    Public Shared Function EncryptBase64(Input As String) As String
        Dim byt As Byte() = System.Text.Encoding.UTF8.GetBytes(Input)
        Return System.Convert.ToBase64String(byt)
    End Function
    Public Shared Function Decryptwbft(cipherText As String) As String

        Dim cipherBytes As Byte() = Convert.FromBase64String(cipherText)
        Using encryptor As Aes = Aes.Create()
            '  encryptor.Padding = PaddingMode.None
            Dim pdb As New Rfc2898DeriveBytes(EncryptionKey, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D,
             &H65, &H64, &H76, &H65, &H64, &H65,
             &H76})
            encryptor.Key = pdb.GetBytes(32)
            encryptor.IV = pdb.GetBytes(16)
            Using ms As New MemoryStream()
                Using cs As New CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write)

                    cs.Write(cipherBytes, 0, cipherBytes.Length)
                    cs.Close()
                End Using
                cipherText = Encoding.Unicode.GetString(ms.ToArray())
                ms.Close()

            End Using
        End Using

        '  Writelog(cipherText)
        Return cipherText
    End Function

    ' Public Shared Function SimpleCrypt_128(ByVal Text As String) As String
    '     Dim strTempChar As String = "", i As Integer
    '     For i = 1 To Len(Text)
    '         If Asc(Mid$(Text, i, 1)) < 128 Then
    '             strTempChar = CType(Asc(Mid$(Text, i, 1)) + 128, String)
    '         ElseIf Asc(Mid$(Text, i, 1)) > 128 Then
    '             strTempChar = CType(Asc(Mid$(Text, i, 1)) - 128, String)
    '         End If
    '         Mid$(Text, i, 1) = Chr(CType(strTempChar, Integer))
    '     Next i
    '     Return Text
    ' 
    ' End Function
    Public Shared Function SimpleCrypt(ByVal Text As String) As String
        'logger.Debug("Text start: " + Text)
        Try
            Dim strTempChar As String = "", i As Integer
            'logger.Debug("text length: " + Len(Text).ToString())
            For i = 1 To Len(Text)
                Dim c As String = Mid$(Text, i, 1)

                'logger.Debug("char: " + c + ", asc nbr: " + Asc(c).ToString())
                If Asc(c) < 64 Then
                    strTempChar = CType(Asc(c) + 64, String)
                ElseIf Asc(c) > 64 Then
                    strTempChar = CType(Asc(c) - 64, String)
                Else
                    strTempChar = CType(Asc(c), String)
                End If
                Mid$(Text, i, 1) = Chr(CType(strTempChar, Integer))
            Next i
        Catch ex As Exception
            logger.Error(ex)
        End Try
        'logger.Debug("Text end: " + Text)
        Return Text
    End Function

    Public Shared Function DecryptBase64(Input As String) As String
        Try
            Dim byt As Byte() = System.Convert.FromBase64String(Input)
            Return System.Text.Encoding.UTF8.GetString(byt)
        Catch ex As Exception
            Return ""
        End Try
    End Function
    Public Shared Function GetPortalUrl() As String
        Dim url As String = ""
        Try
            Dim _settings As ZukamiLib.ZukamiSettings = CreateDefaultZukamiSettings()
            Dim _web As New ZukamiLib.WebSession(_settings)
            _web.OpenConnection()
            url = _web.ServerVariables_Get("QuickflowsURL")
            _web.CloseConnection()
        Catch ex As Exception
            logger.Error(ex)
        End Try
        Return url
    End Function
    Public Shared Function ReplaceInvalidChars(ByVal filename As String) As String
        Return String.Join("_", filename.Split(Path.GetInvalidFileNameChars()))
    End Function
    Public Shared Sub DeleteUploadedFile(ByVal filePath As String)
        'TryDeleteFile(filePath)
        ScheduleToDeleteLater(filePath, "init task generated by user's file deletion action")
    End Sub

    Public Shared Function ExecuteTask_DeleteUnusedFiles() As String
        Dim sb As New StringBuilder()
        Dim cnt As Integer = 0
        Try
            Dim sql As String = String.Format(
                "select top 100 * from FilesToBeDeleted with(nolock) where datediff(minute, DateCreated, getdate()) > {0} order by DateCreated asc",
                FormatInteger(FromConfig("TryClearupDiskXMinutesLaterAfterFileDeletedFromPortal", "100")).ToString()
            )
            Dim dt As DataTable = GetDataTableBySql(sql)

            Dim msg As String = ""
            For Each r As DataRow In dt.Rows
                Dim filePath As String = FormatData(r.Item("FilePath"))
                TryDeleteFile(filePath, msg)
                If msg.Trim().Length > 0 Then
                    sb.Append(msg.Trim() + ", ")
                    cnt += 1
                End If
            Next
        Catch ex As Exception
            logger.Error(ex)
        End Try
        Dim result As String = "deleted " + cnt.ToString() + ": " + sb.ToString()
        logger.Debug("result: " + result)
        Return result
    End Function

    Private Shared Sub ScheduleToDeleteLater(originalFilePath As String, msg As String)
        Try
            Dim sql As String = String.Format(
                " declare @filePath nvarchar(255) = N'{0}'                               " & vbCrLf &
                " declare @msg nvarchar(max) = N'{1}'                                    " & vbCrLf &
                " select * from FilesToBeDeleted with(nolock) where FilePath = @filePath " & vbCrLf &
                " if @@ROWCOUNT > 0                                                      " & vbCrLf &
                " begin                                                                  " & vbCrLf &
                "     update FilesToBeDeleted                                            " & vbCrLf &
                "     set                                                                " & vbCrLf &
                "         DateCreated = getdate(),                                       " & vbCrLf &
                "         CountOfDeletionFailed += 1,                                    " & vbCrLf &
                "         LastDeletionFailedMessage = @msg                               " & vbCrLf &
                "     where FilePath = @filePath                                         " & vbCrLf &
                " end                                                                    " & vbCrLf &
                " else                                                                   " & vbCrLf &
                " begin                                                                  " & vbCrLf &
                "     insert into FilesToBeDeleted (                                     " & vbCrLf &
                "         ID,                                                            " & vbCrLf &
                "         FilePath,                                                      " & vbCrLf &
                "         DateCreated,                                                   " & vbCrLf &
                "         CountOfDeletionFailed,                                         " & vbCrLf &
                "         LastDeletionFailedMessage                                      " & vbCrLf &
                "     )                                                                  " & vbCrLf &
                "     values (                                                           " & vbCrLf &
                "         newid(),                                                       " & vbCrLf &
                "         @filePath,                                                     " & vbCrLf &
                "         getdate(),                                                     " & vbCrLf &
                "         1,                                                             " & vbCrLf &
                "         @msg                                                           " & vbCrLf &
                "     )                                                                  " & vbCrLf &
                " end                                                                    " & vbCrLf,
                originalFilePath.Replace("'", "''"), msg.Replace("'", "''")
            )
            RunSql(sql)
            logger.Debug("delete file task generated / updated, the file will be deleted later by the task, file: " + originalFilePath)
        Catch ex As Exception
            logger.Error(ex)
        End Try
    End Sub

    Private Shared Function TryDeleteFile(filePath As String, Optional ByRef msg As String = "") As Boolean
        Dim success As Boolean = False
        Dim originalFilePath = filePath
        Dim _DirPath As String = ""
        msg = ""
        Try
            If Not filePath.Contains(";") Then
                logger.Debug("wrong format filePath, skip: " + filePath)
                success = True
            Else
                filePath = filePath.Substring(0, filePath.IndexOf(";"))
                _DirPath = GetZukamiSettings.UploadPath.TrimEnd("\") & "\" & Replace(filePath, ";", "\")
                System.IO.Directory.Delete(_DirPath, True)
                msg = _DirPath
                success = True
            End If
        Catch ex1 As System.IO.DirectoryNotFoundException
            logger.Debug("folder was not found, skip: " + originalFilePath)
            success = True
        Catch ex2 As System.IO.FileNotFoundException
            logger.Debug("file was not found, skip: " + originalFilePath)
            success = True
        Catch ex As Exception
            success = False
            logger.Debug("[error but will be handled] failed to deleted file " + originalFilePath + ", ex: " + ex.Message)
            ScheduleToDeleteLater(originalFilePath, ex.Message)
        End Try
        If success Then
            Try
                ' https://stackoverflow.com/questions/27692900/reliable-directory-exists-using-c-sharp
                ' comfirm again before think the task is completed
                Dim di As DirectoryInfo = New DirectoryInfo(_DirPath)
                If di.Exists Then
                    ' The directory exists
                    logger.Error("something wrong, the folder should not exists: " + _DirPath)
                Else
                    ' The path is valid, but does not exist
                    Dim sql As String = ""
                    Try
                        sql = String.Format("delete from FilesToBeDeleted where FilePath = N'{0}'" + vbCrLf, originalFilePath.Replace("'", "''"))
                        RunSql(sql)
                        logger.Debug("task completed & removed from the list")
                    Catch ex As Exception
                        logger.Error(ex, "failed to run clear up sql, please run it manually, sql: " + sql)
                    End Try
                End If
            Catch ex As Exception
                logger.Error(ex, "The path is invalid or user does not have access: " + _DirPath)
            End Try

            'If Directory.Exists(_DirPath) Then
            '    logger.Debug("something wrong, the folder should not exists: " + _DirPath)
            'Else
            '    Dim sql As String = ""
            '    Try
            '        sql = String.Format("delete from FilesToBeDeleted where FilePath = N'{0}'" + vbCrLf, originalFilePath.Replace("'", "''"))
            '        RunSql(sql)
            '    Catch ex As Exception
            '        logger.Error(ex, "failed to run clear up sql, please run it manually, sql: " + sql)
            '    End Try
            'End If
        End If
        Return success
    End Function

    Public Shared Function GetStringFromHttpApplicationStateByHashId(hashId As String) As String
        Dim s As String = HttpContext.Current.Application(hashId)

        If String.IsNullOrWhiteSpace(s) Then
            Dim msg As String = "failed to get string from HttpApplicationState by key: " + hashId
            logger.Error(msg)
            Throw New Exception(msg)
        End If

        Return s
    End Function
    Public Shared Function SaveStringToHttpApplicationStateAndReturnHashId(s As String) As String
        Dim hashId As String = GlobalFunctions.OneWayHash(s)

        HttpContext.Current.Application(hashId) = s

        Return hashId
    End Function

    Public Shared Sub AutoForceLogoutIfSessionNotInApplicationState()
        Try
            If Not FromConfig("MultipleLogin_AutoLogoutExistingUser", "false") = "true" Then
                Exit Sub
            End If
            If IsAtPage("login.aspx") OrElse IsAtPage("logout.aspx") OrElse IsAtPage("AppLogin.aspx") Then
                logger.Debug("at login / logout pages, skip")
                Exit Sub
            End If
            If HttpContext.Current Is Nothing OrElse HttpContext.Current.Session Is Nothing Then
                logger.Debug("HttpContext.Current.Session is not ready, skip")
                Exit Sub
            End If

            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            If _settings IsNot Nothing Then
                Dim userId As String = FormatData(_settings.CurrentUserGUID)
                If Not String.IsNullOrWhiteSpace(userId) Then
                    Dim userid_key As String = "user_last_session_" + userId
                    'Dim currentSessionId As String = FormatData(GetSessionIdFromCookie())
                    Dim currentSessionId As String = FormatData(HttpContext.Current.Session(userid_key))
                    If String.IsNullOrWhiteSpace(currentSessionId) Then
                        logger.Debug("currentSessionId is null or white space, skip")
                        Exit Sub
                    End If
                    Dim userLastSessionId As String = FormatData(HttpContext.Current.Application(userid_key))
                    logger.Debug("userid_key: " + userid_key + ", userLastSessionId (from application state): " + userLastSessionId + ", currentSessionId (from session state): " + currentSessionId)
                    If Not String.IsNullOrWhiteSpace(userLastSessionId) Then
                        If Not userLastSessionId = currentSessionId Then
                            logger.Debug("last VS current: not match, should do auto logout")
                            Navigator.Navigate("Logout", "You are forced to logout in this browser because you've login in another browser")
                        Else
                            logger.Debug("last VS current: match")
                        End If
                    Else
                        logger.Debug("userLastSessionId is null or white space. skip checking. (reason could be user didn't login via the normal login page)")
                    End If
                Else
                    logger.Debug("checking FAILED, skip: userid is null or white space")
                End If
            Else
                logger.Debug("checking FAILED, skip: ZukamiSettings is null")
            End If
        Catch ex As ThreadAbortException
            logger.Debug("ThreadAbortException (should be due to redirect, safe to ignore)")
        Catch ex As Exception
            logger.Error(ex)
        End Try
    End Sub
    Public Shared Sub ExecuteTask_UpdateSessionIDInApplicationState()
        Try
            If HttpContext.Current Is Nothing OrElse HttpContext.Current.Session Is Nothing Then
                logger.Debug("HttpContext.Current.Session is not ready, skip")
                Exit Sub
            End If
            Dim _settings As ZukamiLib.ZukamiSettings = GetZukamiSettings()
            If _settings IsNot Nothing Then
                Dim userId As String = FormatData(_settings.CurrentUserGUID)
                If Not String.IsNullOrWhiteSpace(userId) Then
                    Dim userid_key As String = "user_last_session_" + userId
                    If String.IsNullOrWhiteSpace(FormatData(HttpContext.Current.Session.Item(userid_key))) Then
                        Dim currentCustomSessionId As String = Guid.NewGuid().ToString()
                        HttpContext.Current.Session(userid_key) = currentCustomSessionId
                        HttpContext.Current.Application(userid_key) = currentCustomSessionId
                        logger.Debug("add user_last_session_id to application state and session state: " + userid_key + ", " + currentCustomSessionId)
                    Else
                        logger.Debug("add user_last_session_id to application state: exist, skip")
                    End If
                Else
                    logger.Debug("add user_last_session to application state FAILED: userid is null or white space")
                End If
            Else
                logger.Debug("add user_last_session to application state FAILED: ZukamiSettings is null")
            End If
        Catch ex As Exception
            logger.Error(ex)
        End Try
    End Sub

    Public Shared Function IsSpecialVersion(versionCode As String) As Boolean
        Return (FromConfig("SpecialVersionCode") = versionCode)
    End Function

    Public Shared Sub AddColumnNoException(dt2 As DataTable, colCaption As String)
        Try
            dt2.Columns.Add(New DataColumn(colCaption, Type.GetType("System.String")))
        Catch ex As System.Data.DuplicateNameException
            Dim j As Integer = 1
            Dim newColCaption As String = colCaption
            Do
                newColCaption = colCaption + " (" + j.ToString() + ")"
                j += 1
            Loop While dt2.Columns.Contains(newColCaption)
            dt2.Columns.Add(New DataColumn(newColCaption, Type.GetType("System.String")))
        End Try
    End Sub
    Public Shared Function Holidays_GetRecord(ByVal HolidayID As String) As DataSet
        Dim _guid As Guid
        Try
            _guid = New Guid(HolidayID)
        Catch ex As Exception
            Navigator.RaiseWebError("MalformedWebRequest")
            Return Nothing
        End Try
        Dim _web As New ZukamiLib.WebSession(GetZukamiSettings)
        _web.OpenConnection()
        Holidays_GetRecord = _web.Holiday_GetRecord(_guid)
        _web.CloseConnection()
        _web = Nothing
    End Function
End Class
